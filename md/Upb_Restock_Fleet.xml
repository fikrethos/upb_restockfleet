<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Upb_Restock_Fleet" comment="md ismini menu mdsinin isminden alfabetik oalrak sonra gelecek şekilde ayarla"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
<!-- Yapılanlar ve düzeltilenler :
        * 
        1- Conversation menusündeki textler dil dosyasına bağlandı.
        2- Üretilen gemi mürettebatının Ship Record üzerindeki kayıtlı rütbeleri ile klonlanıp klonlanmayacağı ayarlarlanabiliyor.
        3- Faction relation change kodundaki hata giderildi.
        4- RemoveShip kodundaki bir hata düzeltildi.
        5- Ayarlar ekranındaki Max Allowed Ship Price ve Player Money Threshold kaydırma çubuğunun artış değeri 100,000Cr den 500Cr ye düşürüldü. K kısaltma formatı kaldırıldı.
        6- Manager ekranındaki text butonlar ikon butonu haline çevrildi.
        7- Yeni açılacak RFM için Mevcut RFM'lerden kayıt devralma (Clone RFM) özelliği konuşma menüsüne eklendi.
        8- Manager ekranında RFM'nin tam kolonu için buton kondu.
        9- RemoveShip ve RemoveRFM olayları için oyuncudan onay isteği almak için onay penceresi özelliği eklendi.
        
        
    -->
    <!-- Yapılacaklar listesi
        

        * rfm içinde işlem bekleyen gemi olanların adına yanıp sönen ikaz ya da kırmızı ünlem ekleyelim , ayrıca durumla ilgili mouseover da eklenebilir
            lua menu.map içine yazmak gerekiyor, bunun için de harici bir mod (kurtee) kullanmak gerekecektir.
            
        * istasyon seçimlerinde 
            her sektör uzaklığa belli bir puan eklemesi ve
            malzemesi yeterli olana best +100 puan eklemesi düşüncesi
        * addconstructionship md komutu yerine lua ya istekle lua içinden istasyona order verme rutini yazılacak
        * nextretrytime değerinin anlık değiştirilebilmesi için cueler içine aktarılması

        * İstasyon destroy edildiğinde 1.yönteme göre subları toplayacağız

        * shipplanı çıkarma fonskiyonu stack olayı ile tekrar yazılacak
        * RFM den RFM ye bağlama fonksiyonu yazılacak
        * Luaya Data değişim isteği Raise event ile tekrar yazılabilir
        *
        * * * en son iş (subordinate add, remove, destroy, promoted, fonksiyonlarını delay olmadan tekrar yazılacak.)
    -->
        
    <cues>
		<cue name="OnLuaLoaderReady" instantiate="true">
            <conditions>
                <event_ui_triggered screen="'Lua_Loader'" control="'Ready'" />
            </conditions>
            <actions>
                <raise_lua_event name="'Lua_Loader.Load'" param="'extensions.upb_restockfleet.lua_restock_fleet_manager_menu'"/>
            </actions>
        </cue>
	    <cue name="OnLuaLoaderReadyCompleted" instantiate="true">
            <conditions>
                <event_ui_triggered screen="'Lua_Loader'" 
                    control="'Loaded extensions.upb_restockfleet.lua_restock_fleet_manager_menu'" />
            </conditions>
            <actions>
                <debug_text text="'lua_restock_fleet_manager_menu.lua yüklemesi TAMAMLANDI...'" chance="100"/>
                <signal_cue_instantly cue="CheckAndFix_tShipPlan" />

                <!-- event_load olayında koyamadık, çünkü new game zamanı load olayından sonra yeni istasyonlar ekleniyor
                    load sonrasından dahageç bir vakitde istasyonları güncelliyoruz
                 -->
                <run_actions ref="Update_BlacklistStations" >
                    <param name="debugchance" value="0" />
                </run_actions>

            </actions>
        </cue>

        <!-- Bu modun kendisini upb_MODs Ana Menü girdisine ekle -->
		<cue name="SectionHandler_OtherUpbMods" instantiate="true" comment="NPC pilotların dialog menusunden bu ve diğer upb modlarına da ulaşılabilmesi için ortak alan">
			<conditions>
				<check_any>
					<event_conversation_next_section sectionprefix="upb_" />
					<event_conversation_returned_to_section sectionprefix="upb_" />
				</check_any>
			</conditions>
			<actions>

				<do_if value="event.param == 'upb_MODs'" comment="ilerde sadece bu mod un satırı kalacak. Diğer modlarla aynı olacak 'upb_MODs'. her mod un pozisyonu farklı">
                    <add_player_choice_sub text="'Restock Fleet'" section="upb_RFM_Mainmenu" position="top_left" comment="upb Restock Fleet" />
					<add_player_choice_return position="bottom_right" text="'Back'" />
				</do_if>

				<do_elseif value="event.param == 'upb_RFM_Mainmenu'">

                    <do_if value="event.object.isclass.entity">
                        <do_if value="(event.object.assignedcontrolled.isclass.ship and event.object.assignedcontrolled.pilot == event.object) 
                            or (event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object)">
                            <set_value name="$chk1"  />
                        </do_if>
                        <do_if value="event.object.isplayerowned and event.object.assignedcontrolled.isplayerowned">
                            <set_value name="$chk2"  />
                        </do_if>
                        <do_if value="not event.object.assignedcontrolled.commander">
                            <set_value name="$chk3"  />
                        </do_if>
                        <do_if value="$chk1? and $chk2? and $chk3?">
                            <set_value name="$isfreefleetcommander" />
                        </do_if>
                    </do_if>
                    <do_if value="$isfreefleetcommander?">
                        <do_if value="not event.object.$RFM? and @event.object.$RFM == null ">
                            <add_player_choice_sub text="'\33' + Main.$normalColor + 'Enable Restock Fleet' + '\33X'" section="EnableRestockFleet" position="bottom_left"/>
                        </do_if>
                        <do_else>
                            <run_actions ref="Get_RFMKey_From_ShipObject" result="$RFMKey">
                                <param name="ship" value="event.object.assignedcontrolled" />
                            </run_actions>
                            <do_if value="$RFMKey != null">
                                <set_value name="$CS" exact="'\33' + (if Main.$RebuildCues.{$RFMKey}.keys.count gt 0 then Main.$alertColor else Main.$normalColor)" />
                                <set_value name="$CE" exact="'\33X'" />
                                <add_player_choice text="'[ # ' + $CS + Main.$RebuildCues.{$RFMKey}.keys.count + $CE + ' ]' + ' - ' + 'Disable RFM_' + $RFMKey "  position="bottom_left" section="cSO_RFM_Disable"/>
                                <remove_value name="$CS" />
                                <remove_value name="$CE" />
                            </do_if>
                        </do_else>
                    </do_if>
                    <remove_value name="$RFMKey" />
                    <remove_value name="$isfreefleetcommander" />
                    <remove_value name="$chk1" />
                    <remove_value name="$chk2" />
                    <remove_value name="$chk3" />

                    <add_player_choice_sub text="'Manager'"    section="upb_RFM_manager" position="top_left"/>
                    <add_player_choice_sub text="'Options'"    section="upb_RFM_options" position="top_right"/>
                    <!-- 
                    <add_player_choice_sub text="'Test'"    section="upb_RFM_test" position="right"/>
                     -->
                    <add_player_choice_return position="bottom_right" text="'Back'"/>
                </do_elseif>
                <do_elseif value="event.param == 'upb_RFM_manager'">
                    <run_actions ref="SetInformationsToPlayer" />
                </do_elseif>
                <do_elseif value="event.param == 'upb_RFM_options'">
                    <run_actions ref="SetInformationsToPlayer" >
                        <param name="TableMode" value="'options'" />
                    </run_actions>
                </do_elseif>
                <do_elseif value="event.param == 'upb_RFM_test'">

            
                    <add_player_choice_return position="bottom_right" text="'Back'"/>

                </do_elseif>

			</actions>

		</cue>

        <!-- Bunu kullanmadan önce Update_BlacklistStations ile Main.$active_stations lar hesaplatılsın-->
        <library name="Get_Converted_Active_Stations" purpose="run_actions">
            <params>
                <param name="skipnewcalculate" default="false"/>
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <do_if value="not $skipnewcalculate">
                    <run_actions ref="Get_ActiveStations" result="Main.$active_stations" >
                        <param name="addUnknown" value="true" />
                        <param name="addEnemy" value="true" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>
                    <debug_text text="'  Updated active_stations # %s'.[Main.$active_stations.count]" chance="Main.$DeepDebug"/>
                </do_if>

                <set_value name="$active_stations" exact="[]" />
                <do_for_each name="$object" in="Main.$active_stations">
                    <set_value name="$entry" exact="table[
                        $object = $object,
                        $name = $object.knownname,
                        $sector = $object.sector.knownname
                    ]" />
                    <append_to_list name="$active_stations" exact="$entry" />
                </do_for_each>
                <return value="$active_stations"/>
            </actions>
        </library>

        <!-- BlacklistStations grubuna Güncelleme yapacak -->
        <library name="Update_BlacklistStations" purpose="run_actions">
            <params>
                <param name="sendIt" default="false" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                
                <run_actions ref="Get_ActiveStations" result="Main.$active_stations" >
                    <param name="addUnknown" value="true" />
                    <param name="addEnemy" value="true" />
                    <param name="debugchance" value="$debugchance" />
                </run_actions>
                <debug_text text="'  Updated active_stations # %s'.[Main.$active_stations.count]" chance="Main.$DeepDebug"/>

                <!-- blacklist stations -->
                <set_value name="$ia" exact="0" />
                <set_value name="$ib" exact="0" />
                <do_for_each name="$yard" in="Main.$active_stations" counter="$iy">
                    <set_value name="$ia" exact="if Main.$blacklist_stations.indexof.{$yard} then 1 else 0" operation="add" />
                    <debug_text text="'%s %s %s === %s%s'.[if Main.$blacklist_stations.indexof.{$yard} then ' ' + $iy + ' ' + $ia + ' -BLACLIST ' else $iy + ' -',$yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                    <!-- Unknown Sectors -->
                    <do_if value="not $yard.isknown">
                        <do_if value="not Main.$blacklist_stations.indexof.{$yard}">
                            <set_value name="$ib" exact="1" operation="add" />
                            <debug_text text="'  %s ADDED Blacklist = %s %s = %s%s'.[$ib, $yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                            <add_to_group groupname="Main.$blacklist_stations" object="$yard" />
                            <continue />
                        </do_if>
                    </do_if>
                    <!-- Enemy Stations -->
                    <do_if value="not $yard.hasrelation.dock.{faction.player}">
                        <do_if value="not Main.$blacklist_stations.indexof.{$yard}">
                            <set_value name="$ib" exact="1" operation="add" />
                            <debug_text text="'  %s ADDED Blacklist = %s %s = %s%s'.[$ib, $yard.idcode, $yard.knownname, (if $yard.isknown then '' else 'UNKNOWN '), $yard.sector.knownname]" chance="$debugchance"/>
                            <add_to_group groupname="Main.$blacklist_stations" object="$yard" />
                            <continue />
                        </do_if>
                    </do_if>
                </do_for_each>
                
                <debug_text text="'  Updated blacklist_stations # %s'.[Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>

                <!-- lua manager açıksa bilgileri gönder -->
                <do_if value="player.entity.$md_RFM_DataChanged?">
                    <!-- Keşfedilmemiş veya dock yapamayacağımız istasyonları da luaya göndereceğiz
                        Ancak blacklist içinde de olması gerekiyor.
                        lua içinde bu istasyonların check özelliğini kilitleyeceğiz.
                        Bunun haricinde Blacklist güncellemesi md içinde 2 yerde daha gerçekleştirilecek. Relation_Changed ve Object_Known_To_Player olayları
                    -->
                    <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations" />
                    <!-- direk listeyi göndermiyoruz. 
                        listeyi tablolara çevireceğiz. lua içinde unknow nesnelerin orijinal isimlerini bulamadım
                        station ve sector için,
                        hazırlayacağımız liste içindeki veri tabloları object bilgisi ile knownname bilgilerini de içerecek
                    -->
                    <run_actions ref="Get_Converted_Active_Stations" result="$active_stations">
                        <param name="skipnewcalculate" value="true" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>
                    <set_value name="player.entity.$active_stations" exact="$active_stations" />

                    <do_if value="$sendIt">
                        <debug_text text="'  buildstations.changed SEND ...'.[]" chance="Main.$DeepDebug"/>
                        <raise_lua_event name="'buildstations.changed'" />
                    </do_if>

                </do_if>



            </actions>
        </library>
        
        <library name="SetInformationsToPlayer" purpose="run_actions">
            <params>
                <param name="OpenLuaMenu" default="true"/>
                <param name="RFMKey" default="null" />
                <param name="TableMode" default="'manager'" />
            </params>
            <actions>

                <do_if value="Main.$RM_Fleets?">
                    <do_if value="$OpenLuaMenu">
                        

                        <!-- lua penceresi açılma bayrağı etkin-->
                        <set_value name="player.entity.$md_RFM_DataChanged"/>
                        <!-- data change notification for open lua -->
                        <include_actions ref="Set_MDDataChanged" />

                        <!-- bayrak açıkken güncelleme sonrası entity üzerine bilgileri yazacak, şu an sendit = false. öünkü birazdan luayı açacağız -->
                        <run_actions ref="Update_BlacklistStations" >
                            <param name="debugchance" value="0" />
                        </run_actions>

                        
                        <open_conversation_menu menu="RFM_Menu" param="[0, 0, $RFMKey, $TableMode, global.$upbRF_DATA ]" param2="null"/>
                        <!-- 
                        <open_menu menu="RFM_Menu" param="[0, 0, $RFMKey, $TableMode, global.$upbRF_DATA ]" param2="null" />
                        -->
                    </do_if>
                    
                </do_if>
            </actions>
        </library>
        
        <cue name="Received_from_LUA" instantiate="true">
            <conditions>
                <event_ui_triggered screen="'RFM_Menu'" />
            </conditions>
            <actions>
                <!--YAPILACAK :
                    menu.editedSettings.NextRetryTime ayarının değişme durumunu özel yakalamak için 
                    1- lua içinde ayrı bir trigger oluşturacağız
                    2- md içinde bu triggere özel cue yazacağız
                    3- değişen değeri aldıktan sonra beklemede olan tüm AddConstructonShipForFleet (rebuildship) cuelerin içindeki 
                        $NextRetryTime değişkeninin değerini değiştireceğiz ve luaya md_data_changed ile bildireceğiz
                -->
                <do_if value="event.param2 == 'Disabled'">
                    <!-- param $RFMKey Or list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true), $removetable (default true) ] -->
                    <signal_cue_instantly cue="Disable__RFM" param="[event.param3.{1}, 'Player Manager' ]" />
                </do_if>
                
                <do_elseif value="event.param2 == 'ReEnable'">
                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) ]-->
                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ event.param3.{1}, true ]" />
                </do_elseif>

                <do_elseif value="event.param2 == 'Rebuild'">
                    <run_actions ref="ReBuildShip" result="$result">
                        <param name="RFMKey" value="event.param3.{1}" />
                        <param name="ShipKey" value="event.param3.{2}" />
                        <param name="passBuildCriterias" value="['price']" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                </do_elseif>

                <do_elseif value="event.param2 == 'RFMClone'">
                    <run_actions ref="CloneRFM">
                        <param name="CloneRFMKey" value="event.param3.{1}" />
                        <param name="entity" value="null" />
                        <param name="IsSound" value="true" />
                        <param name="debugchance" value="Main.$DebugChance" />
                        <param name="deepdebug" value="Main.$DeepDebug" />
                    </run_actions>
                </do_elseif>
                
                <do_elseif value="event.param2 == 'RemoveShip'">
                    <run_actions ref="Remove_DestroyedShipRecord" >
                        <param name="RFMKey" value="event.param3.{1}" />
                        <param name="ShipKey" value="event.param3.{2}" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                </do_elseif>
                
                <do_elseif value="event.param2 == 'BuildTaskID'">
                    <set_value name="$RFMKey" exact="event.param3.{1}" />
                    <set_value name="$ShipKey" exact="event.param3.{2}" />
                    <set_value name="$id" exact="if event.param3.{3}? then event.param3.{3} else null" />
                    <set_value name="$buildingcontainer" exact="if event.param3.{4}? then event.param3.{4} else null" />
                    <set_value name="$component" exact="if event.param3.{5}? then event.param3.{5} else null" />
                    <set_value name="$buildercomponent" exact="if event.param3.{6}? then event.param3.{6} else null" />
                    <set_value name="$queueposition" exact="if event.param3.{7}? then event.param3.{7} else null" />
                    <set_value name="$macro" exact="if event.param3.{8}? then event.param3.{8} else null" />
                    <set_value name="$price" exact="if event.param3.{9}? then event.param3.{9} else null" />
                    <set_value name="$ismissingresources" exact="if event.param3.{10}? then event.param3.{10} else null" />
                    <set_value name="$time" exact="if event.param3.{11}? then event.param3.{11} else null" />
                    <set_value name="$BuildTaskID" exact="if event.param3.{12}? then event.param3.{12} else null" />

                    
                    <debug_text text="' GERI DÖNEN  %s '.[event.param3]" chance="0"/>
                    <debug_text text="' RFMKey_%s_%s  $Build = %s , Shipyard = %s , component = %s , processorcomponent = %s'.[$RFMKey, $ShipKey, $id, $buildingcontainer, $component, $buildercomponent]" chance="0"/>
                    <do_if value="not global.$BuildTaskIDs?">
                        <set_value name="global.$BuildTaskIDs" exact="[ ]" />
                    </do_if>
                    <append_to_list name="global.$BuildTaskIDs" exact="table[ 
                        $RFMKey             = $RFMKey, 
                        $ShipKey            = $ShipKey, 
                        $id                 = $id, 
                        $buildingcontainer  = $buildingcontainer, 
                        $component          = $component,
                        $buildercomponent   = $buildercomponent,
                        $queueposition      = $queueposition,
                        $macro              = macro.{$macro},
                        $price              = $price,
                        $ismissingresources = $ismissingresources,
                        $time               = $time,
                        $BuildTaskID        = $BuildTaskID
                        ]" />

                </do_elseif>
                
                <do_elseif value="event.param2 == 'show_on_map_target'">
                    <open_menu menu="MapMenu" param="[0,0,true,event.param3]" />
                </do_elseif>
                <!--param3  [ $respondPlanData , $isChangeCrewAmounts, $debug] 
                    $respondPlanData = 
                    [ 
                        table[ 
                            $RFMKey 1 = $RFMKey,
                            $ShipKey 1= $ShipKey, 
                            $ShipPlanTable 1 = ShipPlanTable
                        ],
                        ...
                        table[ 
                            $RFMKey n = $RFMKey,
                            $ShipKey n = $ShipKey, 
                            $ShipPlanTable n = ShipPlanTable
                        ],
                    ]
                -->
                <do_elseif value="event.param2 == 'Set_ShipPlan'">
                    
                    <set_value name="$ReceivedPlanData" exact="event.param3.{1}" />
                    <set_value name="$isChangeCrewAmounts" exact="event.param3.{2}" />
                    <set_value name="$debug" exact="event.param3.{3}" />
                    <!-- 
                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="$ReceivedPlanData" />
                        <param name="recursiondepth" value="1" />
                        <param name="DebugChance" value="100" />
                    </run_actions>                    
                    -->
                    
                    <!-- Debug
                        Toplu aktarım (sürüm yükseltmelerde gerektiğinde restart manager vb.. ) yaparken 
                        debug açıksa dosyaya yazma yoğunluğundan dolayı oyun ekranı 30sn kadar takılıyor. 
                        sadece oyun içi normal işleyiş istekeleri için debug moduna izin vereceğiz . 
                    -->
                    <!-- gelen veri listesi içinde birden fazla Aynı rfmkey olacağından liste tutacağız -debug için -->
                    <set_value name="$rfmKeylist" exact="[]" />

                    <do_if value="typeof $ReceivedPlanData == datatype.list">
                        <do_for_each name="$Listentry"  in="$ReceivedPlanData" counter="$i">
                            <set_value name="$RFMKey" exact="$Listentry.$RFMKey"/>
                            <set_value name="$ShipKey" exact="$Listentry.$ShipKey"/>
                            <set_value name="$ShipPlanTable" exact="$Listentry.$ShipPlanTable"/>
                            <set_value name="$IndividualInstructions" exact="$Listentry.$IndividualInstructions"/>

                            <do_if value="$rfmKeylist.indexof.{$RFMKey} == 0">
                                <append_to_list name="$rfmKeylist" exact="$RFMKey" />
                            </do_if>
                            
                            <include_actions ref="Let_RFM_LogFileNames" />
                            <debug_text text="'Received ReceivedPlanData'.[]" chance="if $debug then Main.$DebugChance" />

                            <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}?">
                                <set_value name="$shipRec" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                                <!-- luadan dönen listeler boş ise md tablo yapısında algılıyor -->
                                <do_if value="(typeof $ShipPlanTable == datatype.table) and $ShipPlanTable.keys.count > 0">
                                    <!-- lua da boş bir liste md içinde table olarak algılanıyor -->
                                    <do_if value="(typeof $ShipPlanTable.$engine == datatype.table) and ($ShipPlanTable.$engine.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$engine" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$enginegroup == datatype.table) and ($ShipPlanTable.$enginegroup.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$enginegroup" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$shield == datatype.table) and ($ShipPlanTable.$shield.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$shield" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$shieldgroup == datatype.table) and ($ShipPlanTable.$shieldgroup.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$shieldgroup" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$weapon == datatype.table) and ($ShipPlanTable.$weapon.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$weapon" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$turret == datatype.table) and ($ShipPlanTable.$turret.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$turret" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$turretgroup == datatype.table) and ($ShipPlanTable.$turretgroup.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$turretgroup" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$thruster == datatype.table) and ($ShipPlanTable.$thruster.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$thruster" exact="[]" />
                                    </do_if>
                                    <do_if value="(typeof $ShipPlanTable.$software == datatype.table) and ($ShipPlanTable.$software.keys.count == 0)">
                                        <set_value name="$ShipPlanTable.$software" exact="[]" />
                                    </do_if>
                                    <set_value name="$shipRec.$tShipPlan" exact="$ShipPlanTable" />

                                    <do_if value="$debug" >
                                        <debug_to_file text="'  RFM_%s_%s record.tShipPlan data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <debug_text text="'  RFM_%s_%s record.tShipPlan data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                                    </do_if>
    
                                </do_if>

                                <do_if value="(typeof $IndividualInstructions == datatype.table and $IndividualInstructions.keys.count > 0) or (typeof $IndividualInstructions == datatype.list and $IndividualInstructions.count > 0)">
                                    <set_value name="$shipRec.$tIndividualInstructions" exact="$IndividualInstructions" />
                                    <do_if value="$debug" >
                                        <debug_to_file text="'    RFM_%s_%s record.IndividualInstructions data updated'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <debug_text text="'    RFM_%s_%s record.IndividualInstructions data updated'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug" />
                                    </do_if>
                                </do_if>
                                
                                <do_if value="$isChangeCrewAmounts">
                                    <set_value name="$shipRec.$tShipPlan.$crew.$marine" exact="$shipRec.$tBulkCrew.{entityrole.marine}.count" />
                                    <set_value name="$shipRec.$tShipPlan.$crew.$service" exact="$shipRec.$tBulkCrew.{entityrole.service}.count" />
                                    <do_if value="$debug" >
                                        <debug_to_file text="'      RFM_%s_%s number of record.tShipPlan.crew amounts equals to the number of tBulkCrew'.[$RFMKey, $ShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <debug_text text="'      RFM_%s_%s number of record.tShipPlan.crew amounts equals to the number of tBulkCrew'.[$RFMKey, $ShipKey]" />
                                    </do_if>
                                </do_if>
                            </do_if>
                            <do_else>
                                <debug_text text="'ERROR, FleetRecords[%s][%s] table not found '.[$RFMKey, $ShipKey]" />
                            </do_else>

                        </do_for_each>
                        <!-- debug -->
                        <do_if value="$debug" >
                            <do_for_each name="$RFMKey" in="$rfmKeylist">
                                <run_actions ref="Debug_FleetRecord">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="inserttext" value="''" />
                                </run_actions>
                            </do_for_each>
                        </do_if>
                    </do_if>
                    <do_else>
                        <debug_text text="'ERROR, $ReceivedPlanData should be a list. %s'.[$ReceivedPlanData]" />
                    </do_else>
                    
                    <!-- Data aktarması bitince, sonraki aktarma işi için boşaltıyoruz -->
                    <remove_value name="player.entity.$PlanData" />

                </do_elseif>

                <do_elseif value="event.param2 == 'changed.EditingSettings'">
                    <set_value name="global.$upbRF_DATA.$Editing" exact="event.param3.{1}" />
                    <set_value name="$oldDebugChance" exact="Main.$DebugChance" />
                    <set_value name="$oldDeepDebug" exact="Main.$DeepDebug" />
                    
                    <set_value name="$oldDebugFileDetail_Fleets" exact="Main.$DebugFileDetail_Fleets" />
                    <set_value name="$oldDebugFileDetail_Records" exact="Main.$DebugFileDetail_Records" />
                    
                    <debug_text text="'lua_restock_fleet_manager_menu ayarlar alındı... ' + event.param3.{2}" chance="Main.$DebugChance"/> 
                    <include_actions ref="GlobalConstants" />

                    <do_if value="($oldDebugChance != Main.$DebugChance and Main.$DebugChance > 0) or ($oldDeepDebug != Main.$DeepDebug and Main.$DeepDebug > 0) 
                        or ($oldDebugFileDetail_Fleets != Main.$DebugFileDetail_Fleets and Main.$DebugFileDetail_Fleets > 0)
                        or ($oldDebugFileDetail_Records != Main.$DebugFileDetail_Records and Main.$DebugFileDetail_Records > 0)
                        ">
                            <run_actions ref="DebugFilesReset"/>
                    </do_if>
                    <remove_value name="$oldDebugChance" />
                    <remove_value name="$oldDeepDebug" />
                    <remove_value name="$oldDebugFileDetail_Fleets" />
                    <remove_value name="$oldDebugFileDetail_Records" />
                </do_elseif>

                <do_elseif value="event.param2 == 'changed.blacklist'">

                    <clear_group group="Main.$blacklist_stations" />
                    <do_for_each name="$object" in="event.param3">
                        <add_to_group groupname="Main.$blacklist_stations" object="$object" />
                    </do_for_each>

                    <debug_text text="'Main.changed.blacklist .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>

                </do_elseif>
                
                <do_elseif value="event.param2 == 'changed.autobuild'">
                    <set_value name="$RFMKey" exact="event.param3.{1}" />
                    
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$autobuild" exact="not Main.$RM_Fleets.{$RFMKey}.$autobuild" />
                    <debug_text text="'RFM_%s.autobuild changed to %s'.[$RFMKey, Main.$RM_Fleets.{$RFMKey}.$autobuild]" chance="Main.$DeepDebug"/>
                    
                </do_elseif>

                <do_elseif value="event.param2 == 'changed.UserQuestions.RemoveRFM'">
                    <set_value name="global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveRFM" exact="not global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveRFM" />
                    <debug_text text="'UserQuestions.RemoveRFM changed to %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveRFM]" chance="Main.$DeepDebug"/>
                </do_elseif>
                <do_elseif value="event.param2 == 'changed.UserQuestions.RemoveShip'">
                    <set_value name="global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip" exact="not global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip" />
                    <debug_text text="'UserQuestions.RemoveShip changed to %s'.[global.$upbRF_DATA.$Editing.$UserQuestions.$RemoveShip]" chance="Main.$DeepDebug"/>
                </do_elseif>

                <do_elseif value="event.param2 == ''">
                    <!-- Opened menu-->
                </do_elseif>

                <do_elseif value="event.param2 == 'menu_close'">
                    <!-- Closed menu-->
                    <!-- player entity üzerinden açtığımız değişkenleri temizliyoruz -->
                    <remove_value name="player.entity.$active_stations" />
                    <remove_value name="player.entity.$blacklist_stations" />

                    <remove_value name="player.entity.$RM_Fleets" />
                    <remove_value name="player.entity.$FleetRecords" />
                    <remove_value name="player.entity.$RebuildCues" />
                    <remove_value name="player.entity.$md_RFM_DataChanged" />

                </do_elseif>

                <do_else>
                    <debug_text text="'Unknown ControlID &lt;%s&gt;'.[event.param2]" />
                </do_else>

            </actions>
        </cue>

        <!-- data change notification for open lua -->
        <!-- <include_actions ref="Set_MDDataChanged" /> -->
        <library name="Set_MDDataChanged">
            <actions>
                <!--Lua ilk açıldığında  player.entity.$md_RFM_DataChanged değişkenine atama yapıyoruz, kapatılınca remove ediyoruz
                    Bu yüzden sadece lua açıksa değişkenleri güncelleyeceğiz
                -->
                <do_if value="player.entity.$md_RFM_DataChanged?">
                    
                    <remove_value name="player.entity.$RM_Fleets" />
                    <set_value name="player.entity.$RM_Fleets" exact="Main.$RM_Fleets" />
                    <remove_value name="player.entity.$FleetRecords" />
                    <set_value name="player.entity.$FleetRecords" exact="Main.$FleetRecords" />
                    <remove_value name="player.entity.$RebuildCues" />
                    <set_value name="player.entity.$RebuildCues" exact="Main.$RebuildCues" />
                    <!-- BAKILACAK : 
                        Raise event ile datanın değiştiğini lua ya haber gönderebiliriz 
                        Bunun için lua içinde registerevent ayarlanmalı. mapfilter örneğine bak
                    -->
                    <set_value name="player.entity.$md_RFM_DataChanged" exact="true" />

                </do_if>
                
            </actions>
        </library>
        
        <!-- DISABLE
                $RFMKey,            (İlgili RFM nin keyi)
                $endBy,             (olayı başlatan açıklama)
                $IsSpeak,           (entity konuşacak mı)
                $IsSound ,          (sesli uyarı olacak mı)
                $cancelcue          ( * Çalışan Rebuild Cue lerini iptal edecek mi)
                $removetable        ( * RebuildCue tablosundaki verileri silecek mi)
        -->
        <library name="Disable_All_RFM" purpose="run_actions">
            <actions>
                <debug_text text="'ALL RM FLEETS STOPPING'" chance="Main.$DebugChance"/>
                <do_for_each name="$dRFMKey" in="Main.$RM_Fleets.keys.list" reverse="true">
                    <!-- list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true), $removetable (default true) ] -->
                    <signal_cue_instantly cue="Disable__RFM" param="[$dRFMKey, 'Extension Disable', false, (Main.$RM_Fleets.keys.list.count == 1) ]" />

                </do_for_each>
                <remove_value name="$dRFMKey" />
                
                <debug_text text="'ALL RM FLEETS STOPPED'" chance="Main.$DebugChance"/>
                
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES File-->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>

        <!-- param $RFMKey Or list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true), $removetable (default true) ] -->
        <cue name="Disable__RFM" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <!-- param : $RFMKey Or a list [ $RFMKey, $endBy, $IsSpeak, $IsSound, $cancelcue, $removetable ]-->
                <set_value name="$RFMKey" exact="if event.param.{1}? then event.param.{1} else event.param" />
                <set_value name="$endBy" exact="if event.param.{2}? or @event.param.{2} != null then event.param.{2} else 'player' " />
                <set_value name="$IsSpeak" exact="if event.param.{3}? or @event.param.{3} != null then event.param.{3} else false" />
                <set_value name="$IsSound" exact="if event.param.{4}? or @event.param.{4} != null then event.param.{4} else false" />
                <set_value name="$cancelcue" exact="if event.param.{5}? or @event.param.{5} != null then event.param.{5} else true" />
                <set_value name="$removetable" exact="if event.param.{6}? or @event.param.{6} != null then event.param.{6} else true" />
                <do_if value="$RFMKey == null">
                    <debug_text text="'$RFMKey is NULL. canceling..'.[]" />
                    <cancel_cue cue="Disable__RFM" />
                </do_if>
                <do_else>
                    <include_actions ref="DisableRFM_Core" />
                </do_else>
            </actions>
        </cue>
        <!--for SpecOfficer 
            param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
        <library name="Disable_RFM" purpose="run_actions" comment="Calling from Spec Officer Nurcan">
            <params>
                <param name="RFMKey"/>
                <param name="cancelcue" default="true" />
                <param name="removetable" default="true" />
                <param name="endBy" default="'player'"/>
                <param name="IsSpeak" default="false"/>
                <param name="IsSound" default="false"/>
            </params>
            <actions>
                <include_actions ref="DisableRFM_Core" />
            </actions>
        </library>

        <!-- INPUT : $RFMKey, $endBy, $IsSpeak, $IsSound, $cancelcue, $removetable        -->        
        <library name="DisableRFM_Core" purpose="include_actions">
            <actions>
                <debug_text text="'   RFM_%s is Disabling..'.[$RFMKey, $endBy]" chance="Main.$DeepDebug"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <!--  Cancell all active reBuildShip cues and Tables for RFM-->
                <do_for_each name="$entryKey" valuename="$entry" in="Main.$RebuildCues.{$RFMKey}" >
                    <do_if value="$cancelcue">
                        <debug_text text="'       is exists : %s , $entry.$cue.state %s'.[@$entry.$cue.exists, @$entry.$cue.state]" />
                        <do_if value="$entry.$cue.exists">
                            <cancel_cue cue="$entry.$cue" />
                            <debug_text text="'       Cancelled.. cue&lt;%s&gt; for destroyed ship [RFM %s_%s]  .exists = %s'.[$entry.$cue, $RFMKey, $entryKey, $entry.$cue.exists]" chance="Main.$DeepDebug"/>
                        </do_if>
                    </do_if>
                    <do_if value="$removetable">
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$entryKey}" />
                        <debug_text text="'       Removed.. table Main.$RebuildCues.{%s}.{%s}'.[$RFMKey, $entryKey]" chance="Main.$DeepDebug"/>
                    </do_if>
                </do_for_each>
                <do_if value="$removetable">
                    <remove_value name="Main.$RebuildCues.{$RFMKey}" />
                    <debug_text text="'     Removed.. table Main.$RebuildCues.{%s}'.[$RFMKey]" chance="Main.$DeepDebug"/>
                </do_if>

                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <set_value name="$RFM_Cue.$Cancelling" />

                <set_value name="$pFComp" exact="$RFM_Cue.$fleetshipsByComp.clone"/>
                <set_value name="$pFIndx" exact="$RFM_Cue.$fleetshipsByIdx.clone"/>

                <set_value name="$Commander" exact="$RFM_Cue.$PromotedCommander" />
                <set_value name="$Entity" exact="$RFM_Cue.$Entity" />
                <do_if value="$Commander != null">
                    <run_actions ref="Clear_ShipCaption">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$Commander" />
                        <param name="ShipKey" value="$pFComp.{$Commander}" />
                    </run_actions>
                </do_if>
                
                <do_if value="@$Entity != null">
                    <do_if value="$Entity.$RFM?">
                        <debug_text text="'     Removed.. Entity flag &lt;%s&gt; %s'.[$RFMKey, $Entity, $Entity.name]" chance="Main.$DeepDebug"/>
                        <remove_value name="$Entity.$RFM" />
                    </do_if>
                    <do_if value="$IsSpeak">
                        <speak actor="$Entity" line="2103"/>
                    </do_if>
                </do_if>

                <debug_text text="'     Cleared cue&lt;%s&gt; Header Data values..'.[$RFM_Cue]" chance="Main.$DeepDebug"/>
                <set_value name="$RFM_Cue.$fleetshipsByComp" exact="table[]" />
                <set_value name="$RFM_Cue.$fleetshipsByIdx" exact="table[]" />
                <clear_group group="$RFM_Cue.$Subordinates" />
                <clear_group group="$RFM_Cue.$Promoted" />
                <cancel_cue cue="$RFM_Cue"/>
                <debug_text text="'     C A N C E L L E D.. cue&lt;%s&gt; FOR [RFM %s]'.[$RFM_Cue, $RFMKey]" chance="Main.$DeepDebug"/>

                <remove_value name="Main.$RM_Fleets.{$RFMKey}" />
                <remove_value name="Main.$FleetRecords.{$RFMKey}" />
                <remove_value name="Main.$Loadouts.{$RFMKey}" />


                <do_if value="$IsSound">
                    <play_sound object="player.entity" sound="Main.$DisableSoundId" />
                </do_if>

                <!-- DEBUG : MAIN PROGRAM LOG FILES -->
                <!-- DEBUG : MAIN LOG File -->
                <debug_text text="'   RFM_%s DISABLED'.[$RFMKey]" chance="Main.$DebugChance"/>

                <debug_to_file text="' DISABLED, RFM_%s_Commander &lt;%s&gt; %s %s (%s), Entity %s&lt;%s&gt;, Ended By %s, Canceling %s,  Age: %s, %s'.[$RFMKey, @$Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, @$Entity.knownname, @$Entity, $endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                <!-- DEBUG : RM_FLEETS File-->
                <debug_to_file text="' DISABLED, RFM_%s_Commander &lt;%s&gt; %s %s (%s), Entity %s&lt;%s&gt;, Ended By %s, Canceling %s,  Age: %s, %s'.[$RFMKey, @$Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, @$Entity.knownname, @$Entity, $endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <do_if value="$endBy != 'Extension Disable'">
                    <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- ALL REBUILD CUES File-->
                    <run_actions ref="Debug_AllRebuildCues"/>
                </do_if>  

                <!-- DEBUG : RFM SUB LOG FILES -->
                <set_value name="$pText" exact="' DISABLED, Ended by %s, Canceling %s,  Age: %s, %s'.[$endBy, $RFM_Cue, player.age, player.systemtime.{'%F-%X'}]"/>
                <!-- DEBUG : Command File -->
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- DEBUG : Fleet Record File -->
                <debug_to_file text="$pText" name="$FleetRecord_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- DEBUG : reBuild File  -->
                <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- DEBUG : ReBuildCues File -->
                <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- reAssign Log FILE -->
                <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- ship Files-->
                <!-- 
                <do_for_each name="$ShipIdx" in="$pFRec.keys.list">
                    <set_value name="$ship_logF" exact="'RFM_' + $RFMKey + '_SHP_' + $ShipIdx " />
                    <debug_to_file text="$pText" name="$ship_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                </do_for_each>
                -->
                <remove_value name="$Command_logF" />
                <remove_value name="$FleetRecord_logF" />
                <remove_value name="$reBuildCues_logF" />
                <remove_value name="$reBuild_logF" />
                <remove_value name="$reAssign_logF" />

                <remove_value name="$pText" />
                <remove_value name="$Commander" />
                <remove_value name="$Entity" />
                <remove_value name="$RFM_Cue" />

                <remove_value name="$pFComp" />
                <remove_value name="$pFIndx" />

                <remove_value name="$ShipIdx" />
                <remove_value name="$ship_logF" />

            </actions>
        </library>

        <!-- for SpecOfficer  -->
        <!-- param : $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) -->
        <library name="ReEnable_RFM" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="IsSound" default="false" />
                <param name="singlestartup" default="true" />
                <param name="updateloadouts" default="false" />
                <param name="isChangeCrewAmounts" default="false"/>
            </params>
            <actions>
                <include_actions ref="Re_Enable_RFM_Core" />
            </actions>
        </library>
        <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) ]-->
        <cue name="Re_Enable_RFM" instantiate="true" >
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$RFMKey" exact="if event.param.{1}? then event.param.{1} else event.param" />
                <set_value name="$IsSound" exact="if event.param.{2}? or @event.param.{2} != null then event.param.{2} else false" />
                <set_value name="$singlestartup" exact="if event.param.{3}? or @event.param.{3} != null then event.param.{3} else true" />
                <set_value name="$updateloadouts" exact="if event.param.{4}? or @event.param.{4} != null then event.param.{4} else false" />
                <set_value name="$isChangeCrewAmounts" exact="if event.param.{5}? or @event.param.{5} != null then event.param.{5} else false" />
                
                <do_if value="$RFMKey == null">
                    <debug_text text="'$RFMKey is NULL. canceling..'.[]" />
                    <cancel_cue cue="Re_Enable_RFM" />
                </do_if>
                <do_else>
                    <include_actions ref="Re_Enable_RFM_Core" />
                </do_else>
            </actions>
        </cue>

        <!--IN : $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false )  -->
        <library name="Re_Enable_RFM_Core" >
            <actions>

                <set_value name="$endBy" exact="'RESTART for Player ...'" />

                <debug_text text="'=== RFM_%s ========= %s ========= [ START ] ==='.[$RFMKey, $endBy]" chance="Main.$DeepDebug"/>

                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- Manageri açtığımızda bu veri tabloları silinecek. yedekliyoruz -->
                <set_value name="$oldfleet" exact="Main.$RM_Fleets.{$RFMKey}.clone"/>
                <set_value name="$oldFleetRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                <set_value name="$oldLoadouts" exact="Main.$Loadouts.{$RFMKey}.clone"/>
                <set_value name="$oldRebuildCues" exact="Main.$RebuildCues.{$RFMKey}.clone"/>

                <set_value name="$entity" exact="Main.$RM_Fleets.{$RFMKey}.$entity" />
                <debug_text text="'RFMKey_%s , Entity &lt;%s&gt;%s , RFM Poperty %s'.[$RFMKey, $entity, @$entity.name, if $entity.$RFM? then 'AKTİF' else 'YOK' ]" chance="Main.$DeepDebug"/>
                <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true), $removetable (default true) ]
                    Yeni manager açıldığında Main.$RebuildCues.{$RFMKey} tabloları otomatik temizlenecektir.
                    Disableden sonra manager başlatacağımız için disableyi tablo ve culer silinecek şekilde çağırıyoruz.
                    (henüz özel bir şekilde disable çağırabilmek için (yani cueleri temizlemeden disable yapmak) bir kod yazmadık )
                -->
                <set_value name="$cancelcue" exact="false"/>
                <set_value name="$removetable" exact="true"/>
                <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, $endBy, false, false, $cancelcue, $removetable ]" />

                <!-- Manager Açılıyor
                    1-yani managerın rebuildcueleri boş ayrıca eskisinden farklı headerdata bilgisi ve record yapısı olacaktır
                    2-Eski headerdata ve record yapısını yerine koyacağız
                    3-loadout yapısını değiştirmek istiyorsak record yapısında değişiklik yapacağız
                -->
                <!-- param [ entity, singlestartup, $oldfleet default null ]  -->
                <!-- burdaki singlestartup ne olursa olsun manager parametresi singlestartup false olacak şekilde başlatılacak. yazdırma ve lua haberleşmesini istemiyoruz.
                        singlestartup true ile çalışıyorsa planı ve yazdırma işini burda en son yapacağız
                        burdaki singlestartup false ile çalışıyorsa debug yazdırma ve shipplan çıkarmaları tek seferde allreenable içinde yazacağız -->
                <set_value name="$oldRFMKey" exact="$RFMKey" />
                <!-- Manager ilk boştaki key i bularak RFMKey oluşturuyor. Daha önce kapatılarak arada oluşan boş key olabilir.
                    Bu yüzden manager in oluşturacağı yeni keyi öğreniyoruz
                -->
                <set_value name="$testdebugchance" exact="0"/>

                <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                <set_value name="$entity" exact="null" />
                <set_value name="$rmcommander" exact="$oldfleet.$commander.$object" />
                <debug_text text="'  $rmcommander = %s , isShip = %s'.[$rmcommander, $rmcommander.isrealclass.ship]" chance="$testdebugchance"/>
                <do_if value="$rmcommander.isrealclass.station">
                    <do_if value="$rmcommander.tradenpc.exists">
                        <set_value name="$entity" exact="$rmcommander.tradenpc"/>
                    </do_if>
                </do_if>
                <do_else>
                    <do_if value="$rmcommander.pilot == player.entity">
                        <set_value name="$entity" exact="$rmcommander.assignedcontrolentity.{controlpost.aipilot}"/>
                        <debug_text text="'  pilot is player, Entity = %s %s , player.entity = %s'.[$entity, @$entity.knownname, player.entity]" chance="$testdebugchance"/>
                    </do_if>
                    <do_else>
                        <set_value name="$entity" exact="$rmcommander.assignedpilot"/>
                        <debug_text text="'  pilot is assignedpilot, Entity = %s %s'.[$entity, @$entity.knownname]" chance="$testdebugchance"/>
                    </do_else>
                </do_else>
                
                
                <debug_text text="'  @$entity.isclass.entity = %s  %s ,  $entity.$RFM? = %s ,  $rmcommander.isrealclass.ship = %s  '.[@$entity.isclass.entity, @$entity.name, $entity.$RFM?, $rmcommander.isrealclass.ship]" chance="$testdebugchance"/>

                <do_if value="$entity.$RFM?">
                    <debug_text text="'  &lt;%s&gt; %s RFM Flagı siliniyor...'.[$entity, $entity.knownname]" chance="Main.$DeepDebug" />
                    <remove_value name="$entity.$RFM" />
                </do_if>
                

                <debug_text text="'  @$entity.isclass.entity = %s  %s ,  $entity.$RFM? = %s ,  $rmcommander.isrealclass.station = %s '.[@$entity.isclass.entity, @$entity.name, $entity.$RFM?, $rmcommander.isrealclass.station]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.isplayerowned = %s , @$entity.assignedcontrolled.isplayerowned %s'.[@$entity.isplayerowned , @$entity.assignedcontrolled.isplayerowned]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.assignedcontrolled.isclass.ship = %s , $entity.assignedcontrolled.pilot %s  ==  %s'.[@$entity.assignedcontrolled.isclass.ship , @$entity.assignedcontrolled.pilot , $entity]" chance="$testdebugchance"/>
                <debug_text text="'  @$entity.assignedcontrolled.isclass.station = %s , @$entity.assignedcontrolled.tradenpc %s == %s'.[@$entity.assignedcontrolled.isclass.station , @$entity.assignedcontrolled.tradenpc , $entity]" chance="$testdebugchance"/>

                <debug_text text="'  Yeni Manager Başlatılıyor...'.[]" chance="Main.$DeepDebug" />
                <signal_cue_instantly cue="md.Upb_Restock_Fleet.RF_Manager" param="[$entity, false, $oldfleet]"  />

                <do_if value="$oldRFMKey != $RFMKey">
                    <debug_text text="'  RFM_%s Key Changed to new RFM_%s Key...'.[$oldRFMKey, $RFMKey]" chance="Main.$DeepDebug" />
                </do_if>
                <!-- -->

                <debug_text text="'  Eski Header Data yerine konuyor...'.[]" chance="Main.$DeepDebug" />
                <!-- Eski Header Data yerine konuyor -->
                <run_actions ref="Set_ToRFM_HeaderValues_From_FleetRec">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="FleetRec" value="$oldFleetRec" />
                </run_actions>
                
                <!-- Eski record ve loadout yerine konuyor -->
                <debug_text text="'  Eski record ve loadout yerine konuyor...'.[]" chance="Main.$DeepDebug" />
                <set_value name="Main.$FleetRecords.{$RFMKey}" exact="$oldFleetRec"/>
                <set_value name="Main.$Loadouts.{$RFMKey}" exact="$oldLoadouts"/>

                <!-- reenable zamanı loadout yapısı güncellenecek mi-->
                <do_if value="$singlestartup">
                    <!-- toplu çağırma yoksa ve yeni loadout istenmemiş ise debug dosyalarını ve record tabloyu güncelleyeceğiz -->
                    <do_if value="$updateloadouts">
                        <debug_text text="'  Updating loadouts.. RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <do_for_each name="$ShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                            <set_value name="$Ship" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object "/>
                            <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                <param name="ship"          value="$Ship"/>
                                <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                            </run_actions>
                            <do_if value="not $PlanData?">
                                <create_list name="$PlanData" />
                            </do_if>
                            <run_actions ref="AppendTo_PlanData" >
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="ShipKey"   value="$ShipKey"/>
                                <param name="Object"      value="$Ship"/>
                                <param name="issupplyship"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$issupplyship"/>
                                <param name="macro"             value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro"/>
                                <param name="PlanData"              value="$PlanData" />
                                <param name="getShipPlan"               value="true"/>
                                <param name="getIndividualInstructions" value="true"/>
                            </run_actions>
                        </do_for_each>
    
                        <!-- ShipPlan ataması istenecek -->
                        <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                        <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, $isChangeCrewAmounts]" />
                    </do_if>
                    <do_else>
                        <!-- DEBUG : RFM SUB LOG FILES -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <set_value name="$pText" exact="' REENABLED RFM_%s , Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <!-- DEBUG : Command File -->
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- DEBUG : reBuild File  -->
                        <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- DEBUG : ReBuildCues File -->
                        <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- reAssign Log FILE -->
                        <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                    </do_else>
                </do_if>
                
                <!-- Destroy edilmiş gemiler için tekrar Rebuild oluşturuluyor-->
                <run_actions ref="Restart_RebuildShips_From_FleetRec">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="oldFleetRecords" value="$oldFleetRec" />
                    <param name="oldRebuildCues" value="$oldRebuildCues" />
                    <param name="debugchance" value="if $singlestartup then Main.$DeepDebug" />
                </run_actions>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- data change notification for open lua -->
                <include_actions ref="Set_MDDataChanged" />

                <!-- Debug -->
                <do_if value="$singlestartup">
                    <set_value name="$pText" exact="'  REENABLED RFM_%s, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                    <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <!-- REBUILD CUES -->
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_if>

                <do_if value="$IsSound">
                    <play_sound object="player.entity" sound="Main.$EnableSoundId" />
                </do_if>

                <debug_text text="'=== RFM_%s ========= %s ========= [  END  ] ==='.[$RFMKey, $endBy]" chance="Main.$DeepDebug"/>
                
            </actions>
        </library>

        <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
        <library name="ReEnable_All_RFM" purpose="run_actions">
            <params>
                <param name="updateloadouts" default="false"/>
                <param name="isChangeCrewAmounts" default="false"/>
            </params>
            <actions>
                <set_value name="$old_RM_Fleets" exact="Main.$RM_Fleets" />
                <set_value name="$icount" exact="0" />

                <set_value name="$pText" exact="' REENABLE ALL RFM [ STARTED ], Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                <do_for_each name="$RFMKey" valuename="$entry" in="$old_RM_Fleets" >
                    <set_value name="$icount" operation="add" />
                    <run_actions ref="Get_New_RFMKey" result="$newRFMKey"/>
                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) ]-->
                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ $RFMKey, ($icount == $old_RM_Fleets.keys.list.count), false, $updateloadouts, $isChangeCrewAmounts ]" />

                    <!-- loadouts yapısı güncellenecek mi-->
                    <do_if value="$updateloadouts">
                        <debug_text text="'  Updating loadouts.. RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                        <do_for_each name="$ShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                            <set_value name="$Ship" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object "/>
                                <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                    <param name="ship"          value="$Ship"/>
                                    <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                    <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                                    <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                    <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                                </run_actions>
                                <do_if value="not $PlanData?">
                                    <create_list name="$PlanData" />
                                </do_if>
                                <run_actions ref="AppendTo_PlanData" >
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="ShipKey"   value="$ShipKey"/>
                                    <param name="Object"      value="$Ship"/>
                                    <param name="issupplyship"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$issupplyship"/>
                                    <param name="macro"             value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro"/>
                                    <param name="PlanData"              value="$PlanData" />
                                    <param name="getShipPlan"               value="true"/>
                                    <param name="getIndividualInstructions" value="true"/>
                                </run_actions>
                        </do_for_each>
                    </do_if>
                    <do_else>
                        <do_if value="$RFMKey gt $newRFMKey">
                            <debug_text text="'RFMKey = %s , new RFMKey = %s'.[$RFMKey, $newRFMKey]" chance="Main.$DeepDebug" />
                            <set_value name="$RFMKey" exact="$newRFMKey" />
                        </do_if>
                        
                        <set_value name="$pText" exact="'  REENABLED RFM_%s, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                        <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <!-- DEBUG : RFM SUB LOG FILES -->
                        <include_actions ref="Let_RFM_LogFileNames" />
                        <!-- DEBUG : Fleet Record File -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- DEBUG : Command File -->
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- DEBUG : reBuild File  -->
                        <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- DEBUG : ReBuildCues File -->
                        <debug_to_file text="$pText" name="$reBuildCues_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- reAssign Log FILE -->
                        <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                    </do_else>
                </do_for_each>

                <!-- loadout istenmemiş ise debug dosyalarını ve record tabloyu güncelleyeceğiz -->
                <do_if value="$PlanData?">
                    <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                    <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, $isChangeCrewAmounts] " />
                </do_if>
                <remove_value name="$PlanData" />

                <set_value name="$pText" exact="' REENABLE ALL RFM [   END   ], Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]"/>
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>

        <!--RFMKey'e ait ;
            a) FleetRec verilmişse FleetRec üzerinden verilmeişse Main.$FleetRecords.{$RFMKey} üzerinden işlem yapacak
            b) Rebuild Edilecek gemilerin yeniden başlatılması
                rebuildcues verilmişse verilen tablodan verilmemişse Main.$RebuildCues.{$RFMKey} den bakarak başlatır
            IN  : 
                RFMKey
                oldFleetRecords    (Default Main.$FleetRecords.{$RFMKey} )
                oldRebuildCues     (Default Main.$RebuildCues.{$RFMKey}  )
            OUT : 
                none
        -->
        <library name="Restart_RebuildShips_From_FleetRec" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="oldFleetRecords"      default="null" />
                <param name="oldRebuildCues"   default="null" />
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <do_if value="$oldFleetRecords == null">
                    <set_value name="$oldFleetRecords" exact="Main.$FleetRecords.{$RFMKey}"/>
                </do_if>
                <do_if value="$oldRebuildCues == null">
                    <set_value name="$oldRebuildCues" exact="Main.$RebuildCues.{$RFMKey}"/>
                </do_if>
                <do_for_each name="$entryKey" valuename="$entry" in="$oldFleetRecords">
                    <do_if value="$entry.$object == null or $entry.$destroyed ">
                        <debug_text text="'Library ReBuildShip Calling for RFM %s_%s'.[$RFMKey, $entryKey]" chance="$debugchance" />
                        <set_value name="$entry.$reBuildStartTime" exact="player.age"/>
                        <set_value name="$entry.$reBuildTryNum" exact="0"/>
                        <run_actions ref="ReBuildShip">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="ShipKey" value="$entryKey" />
                            <param name="oldcue" value="@$oldRebuildCues.{$entryKey}.$cue" comment="@ diyoruz,disable olayında tablo verileri için sil demişsek" />
                            <param name="debugchance" value="$debugchance" />
                        </run_actions>
                    </do_if>
                </do_for_each>
                
            </actions>
        </library>

        <!--RFMKey ve ShipKey e ait rebuild cue sini tekrar başlatır. 
            main.tablo verileri duruyorsa tablodan
            değilse old cue bilgisi varsa ise cue esas alarak işini yapacak
        -->
        <!-- oldcue değişkeni verilmişse reenable tarafından isteniyordur, 
            değilse normal çalışan manager istiyordur  ve Main.$RebuildCues.{$RFMKey}.{$ShipKey} den okuma yapacağız
        -->
        <library name="ReBuildShip" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="oldcue"    default="null" />
                <param name="passBuildCriterias" default="[]" />
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <set_value name="$result" exact="0" />
                <set_value name="$linestr" exact="'                          '" />
                <!-- Tablo verileri mevcutsa
                    1- ya disable esnasında main.rebuildcues tablo verilerini kaldırmadan disable etmişiz
                    2- ya da normal işleyiş var
                -->
                <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                    <debug_text text="$linestr + 'RebuildCues Table.{%s}.{%s} OK'.[$RFMKey, $ShipKey]" chance="$debugchance" />
                    <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue.exists">
                        <debug_text text="$linestr + '  %s CUE Çalışıyor'.[Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="$debugchance" />
                        <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$build == null" comment="shipyard bulamadı, uygun şartlar için kontrol noktasında">
                            <debug_text text="$linestr + '    cue.Build YOK'.[]" chance="$debugchance" />
                            <debug_text text="$linestr + '    cue siliniyor..'.[]" chance="$debugchance" />
                            <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                            <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />
                            <debug_text text="$linestr + '    RFM %s_%s  SignallingCue(AddConstructionShip ForFleet) oldcue : %s exists: %s'.[$RFMKey, $ShipKey, $oldcue, @$oldcue.exists ]" chance="$debugchance" />
                            <!-- PARAM List  [RFMKey, ShipINDX, (destroyedobject default null), ( $passingcriterias default [] ) ] -->
                            <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                            <set_value name="$result" exact="1" />
                        </do_if>
                        <do_else comment="shipyardda üretiliyor">
                            <debug_text text="$linestr + '    cue.Build VAR. Şuan Üretiliyor...'.[]" chance="$debugchance" />
                            <set_value name="$result" exact="2" />
                        </do_else>
                    </do_if>
                    <do_else comment="tabloda yeri var ama cuesi oluşmamış. BUG?">
                        <debug_text text="$linestr + '  %s CUE Çalışmıyor'.[Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="$debugchance" />
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />
                        <debug_text text="$linestr + '    RFM %s_%s  SignallingCue(AddConstructionShip ForFleet) old : %s exist: %s'.[$RFMKey, $ShipKey, $oldcue, @$oldcue.exist ]" chance="$debugchance" />
                        <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                        <set_value name="$result" exact="3" />
                    </do_else>
                </do_if>
                <!--Disable RFM olayında  main.Rebuild tablo verilerini silerek yapmışsak 
                    cue bilgisi varsa 
                        çalışıyorsa (build değişkeni oluşmuşsa)
                            bilgiyi main.tabloya aktarıp çıkıyoruz
                        build üretilememişse 
                            istek gönderiyoruz
                    yoksa 
                        istek veriyoruz . 
                -->
                <do_else >
                    <debug_text text="$linestr + 'RebuildCues Table.{%s}.{%s} YOK'.[$RFMKey, $ShipKey]" chance="$debugchance" />
                    <do_if value="$oldcue != null" comment="disable ederken rebuild cue iptal edilmemiş.">
                        <do_if value="$oldcue.exists">
                            <debug_text text="$linestr + '    Old CUE Çalışıyor'.[]" chance="$debugchance" />
                            <do_if value="@$oldcue.$Build == null">
                                <debug_text text="$linestr + '    cue.Build YOK, OldCue %s iptal ediliyor..'.[$oldcue]" chance="$debugchance" />
                                <cancel_cue cue="$oldcue" />
                                <debug_text text="$linestr + '      RFM %s_%s  SignallingCue(AddConstruction ShipForFleet) oldcue : %s exists: %s'.[$RFMKey, $ShipKey, $oldcue, @$oldcue.exists ]" chance="$debugchance" />
                                <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                                <set_value name="$result" exact="4" />
                            </do_if>
                            <do_else>
                                <set_value name="$build"  exact="$oldcue.$Build"/>
                                <set_value name="$shipyard" exact="@$oldcue.$Shipyard" />
                                <set_value name="$object" exact="$build.object"/>
                                <set_value name="$ship" exact="$build.buildobject" />
                                <debug_text text="$linestr + '    cue[%s].Build = %s VAR , $build.isprocessing = %s , Shipyard = %s ... '.[$oldcue, $build, (if $build.isprocessing then 'üretiliyor' else 'bekleme listesinde'), $shipyard]" chance="$debugchance" />
                                <do_if value="@$build.object.builds.queued.indexof.{$build} and $build.object.canabortbuild.{$build}">
                                    <debug_text text="$linestr + '      Aborting build %s on Shipyard = %s %s &lt;%s&gt;'.[$build, $build.object.idcode, $build.object.knownname, $build.object]" chance="$debugchance" />
                                    <abort_build container="$build.object" build="$build"/>
                                </do_if>
                                <do_else>
                                    <debug_text text="$linestr + '      Under processing ship %s %s &lt;%s&gt; on Shipyard = %s %s &lt;%s&gt; Skipping...'.[$ship.idcode, $ship.knownname, $ship, $build.object.idcode, $build.object.knownname, $build.object]" chance="$debugchance" />
                                    <run_actions ref="Set_RebuildCueTable">
                                        <param name="RFMKey"                value="$RFMKey" />
                                        <param name="ShipKey"               value="$ShipKey" />
                                        <param name="cue"                   value="$oldcue.$cue" />
                                        <param name="shipyard"              value="$build.object" />
                                        <param name="build"                 value="$build" />
                                        <param name="isWaitingForRebuild"   value="false" />
                                        <param name="respondMsg"            value="''" />
                                        <param name="respond"               value="table[]" />
                                    </run_actions>
                                </do_else>
                                <do_if value="not $oldcue.$Build?">
                                    <debug_text text="$linestr + '      RFM %s_%s  SignallingCue(AddConstructionShip ForFleet)'.[$RFMKey, $ShipKey]" chance="$debugchance" />
                                    <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                                </do_if>
                                <set_value name="$result" exact="5" />
                            </do_else>
                        </do_if>
                        <do_else >
                            <debug_text text="$linestr + '    Old CUE Çalışmıyor'.[]" chance="$debugchance" />
                            <debug_text text="$linestr + '    RFM %s_%s  SignallingCue(AddConstruction ShipForFleet)'.[$RFMKey, $ShipKey]" chance="$debugchance" />
                            <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                            <set_value name="$result" exact="6" />
                        </do_else>

                    </do_if>
                    <do_else>
                        <debug_text text="$linestr + '  Old CUE bilgisi YOK'.[]" chance="$debugchance" />
                        <debug_text text="$linestr + '  RFM %s_%s  SignallingCue(AddConstructionShip ForFleet)'.[$RFMKey, $ShipKey]" chance="$debugchance" />
                        <signal_cue_instantly cue="AddConstructonShipForFleet" param="[ $RFMKey, $ShipKey, null, $passBuildCriterias ]" />
                        <set_value name="$result" exact="7" />
                    </do_else>
                </do_else>
                <return value="$result"/>
            </actions>
        </library>

        <library name="Remove_DestroyedShipRecord" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <!-- record kaydında işlem yapılacak gemi türü
                    1- RFM Commander olmayacak, RFM commander ise filoda kendisinden başka gemi olmayacak
                    2- destroyed olacak
                    3- build verisi olmayacak
                -->
                
                <do_if value="$ShipKey == 1 and Main.$FleetRecords.{$RFMKey}.keys.count == 1">
                    <set_value name="$delete" />
                </do_if>
                <do_if value="$ShipKey != 1 and Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyed">
                    <do_if value="@Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$build == null">
                        <set_value name="$delete" />
                    </do_if>
                </do_if>
                <do_if value="$delete?">
                    <run_actions ref="Get_SubKeys_From_FleetRecord" result="$mainsubskeys">
                        <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        <param name="CommanderKey" value="$ShipKey" />
                    </run_actions>
                    <!-- Main subların commanderidx değerelerini sileceğimiz geminin commanderidx değerini veriyoruz-->                    
                    <do_for_each name="$skey" in="$mainsubskeys">
                        <set_value name="$newcommanderidx" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$commanderidx" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$skey}.$commanderidx" exact="$newcommanderidx" />
                        <debug_text text="'  RFM_%s (Sub %s) yeni commandera ( %s-%s ) bağlandı..'.[$RFMKey, $skey, $newcommanderidx, Main.$FleetRecords.{$RFMKey}.{$newcommanderidx}.$name]" chance="$debugchance"/>
                    </do_for_each>
                    <!-- RMFleets destroyed lsitesinden çıkarıyoruz -->
                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$ShipKey}">
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                        <debug_text text="'  RFM_%s_%s RM_Fleets destroyedShipKeys listesinden silindi..'.[$RFMKey, $ShipKey]" chance="$debugchance"/>
                    </do_if>

                    <!-- RebuildCue'sini ve tablosunu siliyoruz-->
                    <do_if value="Main.$RebuildCues.{$RFMKey}.{$ShipKey}?">
                        <debug_text text="'  RFM_%s_%s cue.%s sonlandırılıp RebuildCues kaydı silindi..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="$debugchance"/>
                        <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />
                    </do_if>
                    <!-- Loadout Tablosunu siliyoruz kaydından çıkarıyoruz-->
                    <remove_value name="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                    <debug_text text="'  RFM_%s_%s Loadouts kaydı silindi..'.[$RFMKey, $ShipKey]" chance="$debugchance"/>
                    <!-- Record kaydından çıkarıyoruz-->
                    <remove_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                    <debug_text text="'RFM_%s_%s Record kaydından çıkarıldı'.[$RFMKey, $ShipKey]" chance="$debugchance"/>

                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
    
                    <!-- data change notification for open lua -->
                    <include_actions ref="Set_MDDataChanged" />

                    <set_value name="$pText" exact="'RFM_%s_%s Removed from record data'.[$RFMKey, $ShipKey]" />
                    <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <!-- REBUILD CUES -->
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="inserttext" value="$pText" />
                    </run_actions>
                    <!-- DEBUG : Fleet Record File -->
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="inserttext" value="$pText" />
                    </run_actions>

                </do_if>

            </actions>
        </library>

        <library name="DefaultOptions" purpose="run_actions">
            <params>
                <param name="reset" default="false" />
            </params>
            <actions>
                <!-- Update Defaults, Sonradan eklenecek değişkenler için resetleme kontrolü -->
                <do_if value="not global.$upbRF_DATA.$Default.$v233?">
                    <set_value name="$changedGlobalDefaults" />
                </do_if>

                <do_if value="$changedGlobalDefaults? or $reset">
                    <set_value name="global.$upbRF_DATA" exact="table[]"/>
                    <debug_text text="'RFM Globals Is Set to Defaults'.[]" />
                    <do_if value="$reset" exact="true">
                        <show_help duration="7s" custom="'%s %s.\n %s'.[readtext.{Main.$tPage}.{1320}, readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1400}]" comment="Reset Upb Restock Fleet Manager, Globals Is Setting to Defaults"/>
                    </do_if>
                    <do_else>
                        <show_help duration="7s" custom="'%s %s.\n %s'.[readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1400}]" comment="Updated Upb Restock Fleet Manager, Globals Is Setting to Defaults"/>
                    </do_else>
                </do_if>
                <set_value name="$alertlevels" exact="table[
                    $normal = 1,
                    $low    = 2,
                    $medium = 3,
                    $high   = 4
                ]" />
                <!-- normal = 37b400 , 50dc14, 2d9600, 64b400 -->
                <set_value name="$alertcolors" exact="table[ 
                    {$alertlevels.$normal}  = '#FF'+ '37b400' + '#' , 
                    {$alertlevels.$low}     = '#FF'+ 'dcdc00' + '#' , 
                    {$alertlevels.$medium}  = '#FF'+ 'dc8200' + '#' , 
                    {$alertlevels.$high}    = '#FF'+ 'e62d5f' + '#' 
                                            ]"/>

                <set_value name="$alertstatues" exact="table[
                    $normal = table[                    
                                $level = Main.$alertlevels.$normal, 
                                $text  = readtext.{Main.$tPage}.{9050}, 
                                $color = $alertcolors.{$alertlevels.$normal}
                            ],
                    $nopilot = table[                    
                                $level = Main.$alertlevels.$low, 
                                $text  = readtext.{Main.$tPage}.{9051}, 
                                $color = $alertcolors.{$alertlevels.$low}
                            ],
                    $queuedship = table[                    
                                $level = Main.$alertlevels.$low, 
                                $text  = readtext.{Main.$tPage}.{9052}, 
                                $color = $alertcolors.{$alertlevels.$low}
                            ],
                    $noshipyard = table[                    
                                $level = Main.$alertlevels.$medium, 
                                $text  = readtext.{Main.$tPage}.{9053}, 
                                $color = $alertcolors.{$alertlevels.$medium}
                            ],
                    $rebuild    = table[                    
                                $level = Main.$alertlevels.$high, 
                                $text  = readtext.{Main.$tPage}.{9054}, 
                                $color = $alertcolors.{$alertlevels.$high}
                            ]
                ]" />
                        
                <!-- $NextRetryTime değeri min cinsinden vereceğiz, saniyeye çevirme işlerini kodlar içinde yapacağız 
                    $maxallowedpricepership, playermoneythreshold ve $maxmoney değerlerini 
                        başlangıç olarak 2 milyon, 30 milyon ve max 100 milyon ayarlıyoruz
                -->
                <!-- burdaki numara sıralaması önemli, numarası büyük olan respond hazırlanırken öncelik alacak-->
                <set_value name="$failcaseOrders" exact="table[ 
                    $shipyard               = 1,
                    $sectorisknown          = 2,
                    $relationdockge         = 3,
                    $shiptrader             = 4,
                    $buildclass             = 5,
                    $buildmacro             = 6,
                    $m_ship_licence         = 7,
                    $c_ship_licence         = 8,
                    $equipment              = 9,
                    $m_equipment_licence    = 10,
                    $c_equipment_licence    = 11,
                    $selectbest             = 12,
                    $price                  = 13
                ]" />
                <set_value name="$failcases" exact="table[ 
                    $shipyard               = table[ $id = $failcaseOrders.$shipyard,           $check = true,  $name = 'shipyard',             $text = readtext.{Main.$tPage}.{9000}   ]   ,
                    $buildclass             = table[ $id = $failcaseOrders.$buildclass,         $check = true,  $name = 'buildclass',           $text = readtext.{Main.$tPage}.{9001}   ]   ,
                    $buildmacro             = table[ $id = $failcaseOrders.$buildmacro,         $check = true,  $name = 'buildmacro',           $text = readtext.{Main.$tPage}.{9002}   ]   ,
                    $sectorisknown          = table[ $id = $failcaseOrders.$sectorisknown,      $check = true,  $name = 'sectorisknown',        $text = readtext.{Main.$tPage}.{9003}   ]   ,
                    $relationdockge         = table[ $id = $failcaseOrders.$relationdockge,     $check = true,  $name = 'relationdockge',       $text = readtext.{Main.$tPage}.{9004}   ]   ,
                    $shiptrader             = table[ $id = $failcaseOrders.$shiptrader,         $check = true,  $name = 'shiptrader',           $text = readtext.{Main.$tPage}.{9005}   ]   ,

                    $m_ship_licence         = table[ $id = $failcaseOrders.$m_ship_licence,     $check = true,  $name = 'militaryship',         $text = readtext.{Main.$tPage}.{9006}   ]   ,
                    $c_ship_licence         = table[ $id = $failcaseOrders.$c_ship_licence,     $check = true,  $name = 'capitalship',          $text = readtext.{Main.$tPage}.{9007}   ]   ,

                    $equipment              = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'equipment',            $text = readtext.{Main.$tPage}.{9008}   ]   ,
                    $m_equipment_licence    = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'militaryequipment',    $text = readtext.{Main.$tPage}.{9009}   ]   ,
                    $c_equipment_licence    = table[ $id = $failcaseOrders.$equipment,          $check = true,  $name = 'capitalequipment',     $text = readtext.{Main.$tPage}.{9009}   ]   ,

                    $selectbest             = table[ $id = $failcaseOrders.$selectbest,         $check = true,  $name = 'selectbest',           $text = readtext.{Main.$tPage}.{9010}   ]   ,
                    $price                  = table[ $id = $failcaseOrders.$price,              $check = true,  $name = 'price',                $text = readtext.{Main.$tPage}.{9011}   ]   
                ]" />


                <set_value name="global.$upbRF_DATA.$Default" exact="table
                [
                    $v233 = null ,
                    $tPage                  = Main.$tPage,
                    $shownotification       = false  ,
                    $showhelp               = true   ,
                    $write_to_logbook       = true   ,
                    $UsePlayerYards         = true   ,
                    $UseNPCYards            = true   ,
                    $ValidUpdates   = table[
                        $PYards = table[ $equipments  = true, $peoples = false ]    ,
                        $NYards = table[ $equipments  = true, $peoples = false ]
                        ],
                    $failcaseOrders = $failcaseOrders,
                    $failcases = $failcases,
                    $NextRetryTime              = 5         ,
                    $maxallowedpricepership     = 2000000       ,
                    $playermoneythreshold       = 30000000      ,
                    $moneystep                  = 500        ,
                    $maxmoney                   = 100000000     ,
                    $personnelcloning           = false     ,
                    $autobuildafterclone        = false     ,
                    $UserQuestions              = table[ $RemoveRFM = false, $RemoveShip = false ],
                    $DebugChance                = 0         ,
                    $DeepDebug                  = 0         ,
                    $ChangesOnFleetDebug        = 0         ,
                    $FleetLockStatusDebug       = 0         ,
                    $DebugFileDetail_Fleets     = false     ,
                    $DebugFileDetail_Records    = false     ,
                    $Sounds   = table[
                        $RFM_Enable       = 'rfm_enable'             ,
                        $RFM_Disable      = 'rfm_disable'
                        ]                                            ,
                    $Log   = table[
                            $DIR                = 'RestockFleet'     ,
                            $TAG_Main           = '_RestockMain'     ,
                            $TAG_RFMleets       = '_RFMFleets'       ,
                            $TAG_RebuildCues    = '_RebuildCues'     ,
                            $TAG_DumpDebug      = '_DumpDebug'       ,
                            $TAG_Command        = '_Command'         ,
                            $TAG_FleetRecord    = '_FleetRecord'     ,
                            $TAG_reBuild        = '_reBuild'         ,
                            $TAG_reAssignment   = '_reAssignment'
                        ]                                            ,
                    $alertlevels            = $alertlevels              ,
                    $alertcolors            = $alertcolors              ,
                    $alertstatues           = $alertstatues             ,
                    $normalColor            = $alertcolors.{$alertlevels.$normal}    ,
                    $alertColor             = $alertcolors.{$alertlevels.$medium}    ,
                    $oldN                   = '#FF'+ 'c4ff0e' + '#'     , 
                    $oldA                   = '#FF'+ 'f37865' + '#'     , 
                    $RMShipCaptionTag       = ' (' + Main.$RFMTag + '_$KEY$_) '
                ]"/>
                <!--   on = c4ff0e , oa = f37865   nn = 37b400 na = dcdc00 -->
                <do_if value="not global.$upbRF_DATA.$Editing?">
                    <set_value name="global.$upbRF_DATA.$Editing" exact="table[]"/>
                    <set_value name="global.$upbRF_DATA.$Editing" exact="global.$upbRF_DATA.$Default"/>
                </do_if>

                <remove_value name="$changedGlobalDefaults" />
            </actions>
        </library>

        <library name="GlobalPersistentVariables">
            <actions>
                <set_value name="$RebuildCues" exact="table[]"/>
                <set_value name="$RM_Fleets" exact="table[]"/>
                <set_value name="$FleetRecords" exact="table[]"/>
                <set_value name="$Loadouts" exact="table[]"/>

                <debug_text text="'RFM PROGRAM Global PERSISTEND Değişkenler ATANDI'" chance="Main.$DebugChance" />
            </actions>
        </library>
        <library name="GlobalConstants">
            <actions>

                <set_value name="Main.$tPage" exact="1134010" />
                <set_value name="Main.$RFMTag" exact="readtext.{Main.$tPage}.{500}" />

                <run_actions ref="DefaultOptions">
                    <param name="reset" value="if $reset? then $reset else false" />
                </run_actions>

                <set_value name="$testmode" exact="false" />

                <do_if value="$testmode">
                    <set_value name="global.$upbRF_DATA.$Editing.$DebugChance" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$DeepDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$ChangesOnFleetDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$FleetLockStatusDebug" exact="100"/>
                    <set_value name="global.$upbRF_DATA.$Editing.$DebugFileDetail_Fleets" exact="true" />
                    <set_value name="global.$upbRF_DATA.$Editing.$DebugFileDetail_Records" exact="true" />
                </do_if>

                <set_value name="Main.$EnableSoundId" exact="global.$upbRF_DATA.$Editing.$Sounds.$RFM_Enable"/>
                <set_value name="Main.$DisableSoundId" exact="global.$upbRF_DATA.$Editing.$Sounds.$RFM_Disable"/>

                <set_value name="Main.$DebugChance" exact="global.$upbRF_DATA.$Editing.$DebugChance"/>
                <set_value name="Main.$DeepDebug" exact="global.$upbRF_DATA.$Editing.$DeepDebug"/>
                <set_value name="Main.$ChangesOnFleetDebug" exact="global.$upbRF_DATA.$Editing.$ChangesOnFleetDebug"/>
                <set_value name="Main.$FleetLockStatusDebug" exact="global.$upbRF_DATA.$Editing.$FleetLockStatusDebug"/>
                <!-- özellikle record dosyalarının dökümü için Debug modunda iken bu değişkenler aktif olursa oyunda lag oluşmasına sebep olabilir -->
                <set_value name="Main.$DebugFileDetail_Fleets" exact="global.$upbRF_DATA.$Editing.$DebugFileDetail_Fleets" comment="Fleets için Dosyaya yazılan bilginin altında detaylı döküm"/>
                <set_value name="Main.$DebugFileDetail_Records" exact="global.$upbRF_DATA.$Editing.$DebugFileDetail_Records" comment="FleetRecords için Dosyaya yazılan bilginin altında detaylı döküm"/>

                <!-- listelerin yükleme işi load olayı bittikten sonra yazılacak, lua loader complete alındı-->
                <do_if value="not Main.$active_stations?">
                    <set_value name="Main.$active_stations" exact="[]"/>
                </do_if>
                <do_if value="not Main.$blacklist_stations?">
                    <create_group groupname="Main.$blacklist_stations" />
                </do_if>
                

                <set_value name="Main.$logDIR" exact="global.$upbRF_DATA.$Editing.$Log.$DIR"/>
                <set_value name="Main.$logTAG_Main" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_Main"/>
                <set_value name="Main.$logTAG_RFMleets" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_RFMleets"/>
                <set_value name="Main.$logTAG_RebuildCues" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_RebuildCues"/>
                <set_value name="Main.$logTAG_DumpDebug" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_DumpDebug" />
                <set_value name="Main.$logTAG_Command" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_Command" />
                <set_value name="Main.$logTAG_FleetRecord" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_FleetRecord" />
                <set_value name="Main.$logTAG_reBuild" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_reBuild" />
                <set_value name="Main.$logTAG_reAssignment" exact="global.$upbRF_DATA.$Editing.$Log.$TAG_reAssignment" />
                                
                <set_value name="Main.$alertlevels" exact="global.$upbRF_DATA.$Editing.$alertlevels"/>
                <set_value name="Main.$alertcolors" exact="global.$upbRF_DATA.$Editing.$alertcolors"/>
                <set_value name="Main.$alertstatues" exact="global.$upbRF_DATA.$Editing.$alertstatues"/>
                

                <set_value name="Main.$normalColor" exact="global.$upbRF_DATA.$Editing.$normalColor"/>
                <set_value name="Main.$alertColor" exact="global.$upbRF_DATA.$Editing.$alertColor"/>
                <set_value name="Main.$RMShipCaptionTag" exact="global.$upbRF_DATA.$Editing.$RMShipCaptionTag"/>

                <set_value name="Main.$isDebugMod_Dump" exact="false" comment="Scan activity yapıldığında devreye sokmak için"/>


                <debug_text text="'RF Main Global CONSTANT Değişkenler ATANDI.  event.name = ' + event.name" chance="Main.$DebugChance"/>
            </actions>
        </library>
        <cue name="KeepAlive" instantiate="false">
            <conditions>
                <check_any>
                    <event_cue_signalled/>
                </check_any>
            </conditions>
            <delay exact="100ms"/>
            <actions>
            </actions>
            <delay exact="100ms"/>
            <actions>
                <debug_text text="'RFM MOD RESTARTING ...'" chance="@Main.$DebugChance"/>
                <debug_text text="'   RFM PROGRAM.KeepAlive cue, RFM.PROGRAM.Main çağrılıyor. param =' + @event.param" chance="@Main.$DeepDebug"/>
                <signal_cue_instantly cue="Main" param="event.param"/>
                <reset_cue cue="KeepAlive"/>
            </actions>
        </cue>

        <library name="DebugFilesReset" purpose="run_actions">
            <params>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <run_actions ref="DebugFilesReset_Main">
                    <param name="debugchance" value="$debugchance" />
                </run_actions>
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets">
                    <run_actions ref="DebugFilesReset_Sub">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="debugchance" value="$debugchance" />
                    </run_actions>    
                </do_for_each>
            </actions>
        </library>
        <library name="DebugFilesReset_Main" purpose="run_actions">
            <params>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <debug_text text="'RFM PROGRAM Cue[%s]'.[this.name]" chance="$debugchance" />
                <debug_to_file text="'- Cue[%s] -  Age: %s, %s'.[this.name, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance" />
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets"/>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
            </actions>
        </library>
        <library name="DebugFilesReset_Sub" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <debug_text text="'RFM PROGRAM _%s_ Commander %s %s &lt;%s&gt; , Cue[%s] , '.[$RFMKey, $cue.$RMCommanderName, $cue.$RMCommanderIdCode, $cue.$RMCommander, this.name]" chance="$debugchance"/>
                <!-- DEBUG : MAIN FILE-->
                <debug_to_file text="'- RFM_%s_  - Cue[%s] - %s'.[$RFMKey, this.name, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug" />
                <debug_to_file text="'     Commander %s %s &lt;%s&gt; , entity = %s, %s , RFM? %s, @RFM %s'
                .[
                $cue.$RMCommanderName, $cue.$RMCommanderIdCode, $cue.$RMCommander,
                @$cue.$Entity, @$cue.$Entity.name, $cue.$Entity.$RFM?, @$cue.$Entity.$RFM 
                ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                <set_value name="$Command_logF" exact="$cue.$Command_logF" />
                <set_value name="$FleetRecord_logF" exact="$cue.$FleetRecord_logF" />
                <set_value name="$reBuildCues_logF" exact="$cue.$reBuildCues_logF" />
                <set_value name="$reBuild_logF" exact="$cue.$reBuild_logF" />
                <set_value name="$reAssign_logF" exact="$cue.$reAssign_logF" />

                <!-- DEBUG : Command File -->
                 <set_value name="$pText" exact="'- ' + player.systemtime.{'%F-%X'} + ' R M F - F I L E - R E S E T - - - - - - - - - - - - - - - - - - - - - - '" />
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- REBUILD CUES -->
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- DEBUG : reBuild File  -->
                <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                <!-- DEBUG :  reAssign Log FILE -->
                <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
            </actions>
        </library>

        <!-- Tek gemi için fixleme, Record atanmaz ise Main.$FleetRecords.{$RFMKey}.{$ShipKey} dikkate alınacak-->
        <library name="Fix_Ship_tShipPlan" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="Record"        default="null"/>
                <param name="PlanData"      default="[]" />
                <param name="SendIt"        default="true" />
            </params>
            <actions>
                <do_if value="$Record == null" >
                    <set_value name="$Record" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}" />
                </do_if>
                <set_value name="$getShipPlan" exact="not $Record.$tShipPlan?"/>
                <set_value name="$getIndividualInstructions" exact="not $Record.$tIndividualInstructions?"/>
                <do_if value="$getShipPlan or $getIndividualInstructions" comment="since main. ver 3, 7">
                    <do_if value="$getShipPlan">
                        <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                            <param name="ship"          value="$Record.$object"/>
                            <param name="macro"         value="$Record.$macro" />
                            <param name="oldLoadout"    value="Main.$Loadouts.{$RFMKey}.{$ShipKey}" />
                            <param name="FleetRec"      value="$Record"/>
                        </run_actions>
                    </do_if>
                    <run_actions ref="AppendTo_PlanData" >
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ShipKey"   value="$ShipKey"/>
                        <param name="Object"      value="$Record.$object"/>
                        <param name="issupplyship"      value="$Record.$issupplyship"/>
                        <param name="macro"             value="$Record.$macro"/>
                        <param name="PlanData"              value="$PlanData" />
                        <param name="getShipPlan"               value="$getShipPlan"/>
                        <param name="getIndividualInstructions" value="$getIndividualInstructions"/>
                    </run_actions>
                </do_if>

                <do_if value="$SendIt and ($PlanData.count gt 0) ">
                    <!-- param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                    <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, false]" />
                </do_if>
                
                <return value="$PlanData"/>

            </actions>
        </library>

        <library name="Fix_tShipPlan_ToFleetRec" purpose="run_actions">
            <params>
                <param name="RFMKey"    />
                <param name="FleetRec"  />
                <param name="PlanData"  default="[]"    />
                <param name="SendIt"    default="true"  />
                <param name="debug"    default="false"/>
                <param name="excludeshipkeys" default="[]" />
            </params>
            <actions>
                <do_for_each name="$ShipKey" valuename="$Record" in="$FleetRec">
                    <do_if value="$excludeshipkeys.indexof.{$ShipKey} == 0">
                        <run_actions ref="Fix_Ship_tShipPlan" result="$PlanData">
                            <param name="RFMKey"        value="$RFMKey"     />
                            <param name="ShipKey"       value="$ShipKey"    />
                            <param name="Record"        value="$Record"     />
                            <param name="PlanData"      value="$PlanData"   />
                            <param name="SendIt"        value="false"       />
                        </run_actions>
                    </do_if>
                </do_for_each>

                <do_if value="$SendIt and ($PlanData.count gt 0) ">
                    <!-- param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                    <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, false, $debug]" />
                </do_if>
                
                <return value="$PlanData"/>

            </actions>
        </library>

        <cue name="CheckAndFix_tShipPlan" instantiate="true">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <create_list name="$PlanData" />
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <run_actions ref="Fix_tShipPlan_ToFleetRec" result="$PlanData">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="FleetRec" value="Main.$FleetRecords.{$RFMKey}" />
                        <param name="PlanData" value="$PlanData" />
                        <param name="SendIt" value="false" />
                    </run_actions>
                </do_for_each>
                <do_if value="$PlanData.count gt 0">
                    <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                    <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, false, false]" />
                    <remove_value name="$PlanData" />
                </do_if>
                <debug_text text="'Checked And Fixed to tShipPlan Records'.[]" />
            </actions>
        </cue>

        <!-- record tablosuna (lua işlevleri harici) eklenen veya çıkarılan propertyler için 
            v3 .tShipPlan property eklemesi için, 
            sonraki denetimlerde tShipPlan yazılı olacağından ya da yeni kayıt açıldığında zaten işleneceğinden hızlı kontrol gerçekleşecek.
        -->
        <cue name="Check_Records" instantiate="true">
            <conditions>
                <event_cue_signalled/>
            </conditions>
            <actions>
                <set_value name="$affectedfleets" exact="[]" />

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_if value="not Main.$RM_Fleets.{$RFMKey}.$autobuild?">
                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$autobuild" exact="true" />
                        <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                            <append_to_list name="$affectedfleets" exact="$RFMKey" />
                        </do_if>
                    </do_if>
                    <do_for_each name="$ShipKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">

                        <!-- Main.$Loadouts içinde veri yoksa macro kullanarak oluştur -->
                        <set_value name="$loadout" exact="@Main.$Loadouts.{$RFMKey}.{$ShipKey}"/>
                        <do_if value="typeof $loadout != datatype.loadout">
                            <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipKey}">
                                <param name="ship"          value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object"/>
                                <param name="macro"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$macro" />
                                <param name="wares"         value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tWare" />
                                <param name="FleetRec"      value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}"/>
                            </run_actions>
                            <remove_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$tShipPlan" />
                        </do_if>

                        <do_if value="not $rEntry.$destroyedtime?" comment="since main. ver 3">
                            <set_value name="$rEntry.$destroyedtime" exact="null" />
                            <do_if value="$rEntry.$destroyed">
                                <set_value name="$rEntry.$destroyedtime" exact="player.age" />
                                <do_if value="$rEntry.$reBuildStartTime">
                                    <set_value name="$rEntry.$destroyedtime" exact="$rEntry.$reBuildStartTime" />
                                </do_if>
                            </do_if>
                            <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                                <append_to_list name="$affectedfleets" exact="$RFMKey" />
                            </do_if>
                        </do_if>

                        <do_if value="not $rEntry.$issupplyship?" comment="since main. ver 7">
                            <set_value name="$rEntry.$issupplyship" exact="false" />
                            <do_if value="( [shiptype.carrier, shiptype.resupplier].indexof.{$rEntry.$type} ) or ($rEntry.$macro.primarypurpose == purpose.auxiliary) ">
                                <set_value name="$rEntry.$issupplyship" exact="true" />
                            </do_if>
                            <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                                <append_to_list name="$affectedfleets" exact="$RFMKey" />
                            </do_if>
                        </do_if>

                        <do_if value="not $rEntry.$loadoutlevel?" comment="since main. ver 7">
                            <set_value name="$rEntry.$loadoutlevel" exact="1" />
                            <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                                <append_to_list name="$affectedfleets" exact="$RFMKey" />
                            </do_if>
                        </do_if>
                        
                        <do_if value="$rEntry.$object != null" comment="since main. ver 14">
                            <!-- Trader, Miner ve Salvagerlerin orderlarını kaydedeceğiz -->
                            <set_value name="$warebasketdefaultorders" exact="['TradeRoutine', 'MiningRoutine', 'SalvageRoutine']" />
                            <!-- İstasyonların defaultorder ları yoktur-->
                            <!-- <debug_text text="'%s %s , .defaultorder? = %s , @.defaultorder = %s , @.defaultorder.id = %s'.[$Ship.knownname, $Ship.idcode, $Ship.defaultorder?, @$Ship.defaultorder, @$Ship.defaultorder.id]" /> -->
                            <do_if value="$rEntry.$object.defaultorder.id?">
                                <do_if value="$warebasketdefaultorders.indexof.{$rEntry.$object.defaultorder.id}">
                                    <run_actions ref="Get_OrderTable_From_Ship" result="$orderTable">
                                        <param name="ship" value="$rEntry.$object" />
                                    </run_actions>
                                    <set_value name="$rEntry.$defaultorder" exact="$orderTable.{1}"/>
                                    <do_if value="$affectedfleets.indexof.{$RFMKey} == 0">
                                        <append_to_list name="$affectedfleets" exact="$RFMKey" />
                                    </do_if>
                                </do_if>
                            </do_if>
                        </do_if>

                    </do_for_each>
                </do_for_each>

                <!-- DEBUG : Fleet Record File -->
                <do_for_each name="$RFMKey" in="$affectedfleets">
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_for_each>
                <debug_text text="'All RFM Records Updated'.[]" chance="100"/>

            </actions>
        </cue>


        <library name="CloneRFM" purpose="run_actions" namespace="this">
            <params>
                <param name="CloneRFMKey" />
                <param name="entity" default="null"/>
                <param name="IsSound" default="true" />
                <param name="debugchance" default="0" />
                <param name="deepdebug" default="0"/>
            </params>
            <actions>

                <set_value name="$tStr" exact="'                   '" />
                <set_value name="$Fleet" exact="Main.$RM_Fleets.{$CloneRFMKey}.clone" />
                <set_value name="$Records" exact="Main.$FleetRecords.{$CloneRFMKey}.clone" />
                <set_value name="$Loadouts" exact="Main.$Loadouts.{$CloneRFMKey}.clone" />
                
                <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                <include_actions ref="Let_RFM_LogFileNames" />

                <debug_text text="$tStr + '=== CLONNING RFM_%s ========= New RFM_%s ========= [ START ] ==='.[$CloneRFMKey, $RFMKey]" chance="$deepdebug"/>

                <debug_text text="$tStr + '  Entity &lt;%s&gt;%s , Entity.RFM FLAG %s'.[if $entity != null then $entity else 'YOK', if $entity != null then $entity.name else '', if $entity.$RFM? then 'AKTİF' else 'YOK' ]" chance="$deepdebug"/>

                <debug_text text="$tStr + '  Yeni Manager Başlatılıyor...'.[]" chance="$deepdebug" />
                <!-- $entity yoksa tam bir klonlama olacak -->
                <!-- param [ entity, singlestartup (default true),  refFleetTable (default null) ] -->
                <signal_cue_instantly cue="RF_Manager" param="[$entity, if $entity == null then false else true, if $entity == null then $Fleet else null]"  />

                <do_if value="$entity == null">
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object"  exact="null"/>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$object" exact="null"/>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$name"   exact="''"/>
                </do_if>
                
                <do_for_each name="$sKey" valuename="$record" in="$Records">
                    <do_if value="($record.$id gt 1) or ($entity == null) ">
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$record.$id}" exact="$record.clone" />

                        <run_actions ref="SetRecord_DestroyedObject">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="ShipKey" value="$record.$id" />
                        </run_actions>
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$record.$id}.$reBuildStartTime" exact="null" />
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$record.$id}.$reBuildTryNum" exact="0" />

                        <set_value name="Main.$Loadouts.{$RFMKey}.{$record.$id}" exact="$Loadouts.{$record.$id}" />
                        <append_to_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$record.$id"/>
                    </do_if>
                </do_for_each>
                <debug_text text="$tStr + '  Clone.Records Güncellendi...'.[]" chance="$deepdebug" />

                <do_if value="global.$upbRF_DATA.$Editing.$autobuildafterclone">
                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false) , $singlestartup (default true ), $updateloadouts (default false ), $isChangeCrewAmounts (default false) ]-->
                    <debug_text text="$tStr + '  Clone_%s Yeniden Başlatılıyor...'.[$RFMKey]" chance="$deepdebug" />
                    <signal_cue_instantly cue="Re_Enable_RFM" param="$RFMKey" />
                </do_if>
                <do_else>
                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                
                    <!-- data change notification for open lua -->
                    <include_actions ref="Set_MDDataChanged" />

                    <!-- Debug -->
                    <set_value name="$pText" exact="'  ENABLED new RFM_%s with CLONE method, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                    <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <!-- DEBUG : RM_FLEETS File-->
                    <run_actions ref="Debug_RM_Fleets"/>
                    <!-- DEBUG : Fleet Record File -->
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    <!-- DEBUG : ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                    <!-- DEBUG : REBUILD CUES -->
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                
                </do_else>
                

                <do_if value="$IsSound">
                    <play_sound object="player.entity" sound="Main.$EnableSoundId" />
                </do_if>

                <debug_text text="'=== New RFM_%s CLONE COMPLETED =================== [  END  ] ==='.[$RFMKey]" chance="$deepdebug"/>
    
            </actions>
        </library>

        <cue name="Main" version="14">
            <conditions>
                <check_any>
                    <event_cue_signalled/>
                    <event_cue_signalled cue="md.Setup.GameStart"/>
                    <event_cue_signalled cue="md.Setup.Start" />
					<event_game_loaded/>
                </check_any>
            </conditions>
            <actions>
                <!-- md cue lerinin öncelikli başlama zaman aralıklarını Kontrol amaçlı -->
                <debug_text text="'RFM PROGRAM  Main START -  &lt;' + event.name + '&gt; , object = ' + @event.object.name + ', param = ' + @event.param " />
                <set_value name="$reset" exact="if @event.param != null then (if event.param == 'Reset' then true else false) else false" />
                <include_actions ref="GlobalConstants" />
                <include_actions ref="GlobalPersistentVariables" />
                
                <do_if value="@event.param == 'Reset' ">
                    <show_help duration="5s" custom="'%s %s'.[readtext.{Main.$tPage}.{1320}, readtext.{Main.$tPage}.{1}]" comment="Updated Upb Restock Fleet Manager"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_Main" directory="$logDIR" append="false" chance="$DebugChance"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RebuildCues" directory="$logDIR" append="false" chance="$DebugChance"/>
                    <debug_to_file text="'- %s - - - - - - - U P D A T E - - - R E S E T - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RFMleets" directory="$logDIR" append="false" chance="$DebugChance"/>
                </do_if>
                <do_else>
                    <show_help duration="5s" custom="'%s %s'.[readtext.{Main.$tPage}.{1300}, readtext.{Main.$tPage}.{1}]" comment="Installed Upb Restock Fleet Manager"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_Main" directory="$logDIR" append="false" chance="$DebugChance"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RebuildCues" directory="$logDIR" append="false" chance="$DebugChance"/>
                    <debug_to_file text="'- %s - - - - - - - I N S T A L L - - - - - - - - - - - Age: %s, %s - -'.[player.age, player.systemtime.{'%F-%X'}, this]" name="$logTAG_RFMleets" directory="$logDIR" append="false" chance="$DebugChance"/>
                </do_else>

            </actions>
            <patch sinceversion="2">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=2'"  />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <run_actions ref="ReEnable_All_RFM" />
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <patch sinceversion="3">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=3'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM" />
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <patch sinceversion="4">
                <debug_text text="'RFM PROGRAM  Main START sinceversion=4'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM" >
                    <param name="updateloadouts" value="true" />
                    <param name="isChangeCrewAmounts" value="true" />
                </run_actions>
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>
            </patch>
            <!-- BlacklistStation olayı getirildi
                record yapsındaki objectid propertysi idcode şekline dönüştürüldü
            -->
            <patch sinceversion="5">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 5'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$ShipKey" valuename="$record" in="Main.$FleetRecords.{$RFMKey}"  >
                        <set_value name="$record.$idcode" exact="$record.$objectid" />
                        <remove_value name="$record.$objectid" />
                    </do_for_each>
                </do_for_each>
                
                <set_value name="$active_stations" exact="[]" />
                <create_group groupname="$blacklist_stations" />
                <run_actions ref="Update_BlacklistStations" >
                    <param name="debugchance" value="100" />
                </run_actions>

                <do_for_each name="$RFMKey" in="Main.$RebuildCues">
                    <do_for_each name="$ShipKey" valuename="$entry" in="Main.$RebuildCues.{$RFMKey}">
                        <set_value name="$rebuildcue" exact="$entry.$cue" />
                        <set_value name="$rebuildcue.$cue" exact="$rebuildcue" />
                    </do_for_each>
                </do_for_each>

                <run_actions ref="ReEnable_All_RFM" />

            </patch>
            <!-- record.tShipPlan datası düzeltildi-->
            <patch sinceversion="6">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 6'" />
                <signal_cue_instantly cue="Check_Records" />
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$rEntry.$tShipPlan?" comment="since main. ver 6">
                            <remove_value name="$rEntry.$tShipPlan" />
                        </do_if>
                    </do_for_each>
                </do_for_each>
            </patch>
            <!-- record.issupplyship ve record.loadoutlevel propertyleri eklendi-->
            <patch sinceversion="7">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 7'" />
                <signal_cue_instantly cue="Check_Records" />
            </patch>
            <!-- RFM DefaultOrder DeadTater fixed -->
            <patch sinceversion="8">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 8'" />
                <do_for_each name="$xRFMKey" valuename="$entry" in="Main.$RM_Fleets" >
                    <do_if value="$entry.$order.$id? and $entry.$order.$id == 'DeadTater'">
                        <do_if value="$entry.$object != null">
                            <run_actions ref="Save_DefaultOrder_To_RMFleet">
                                <param name="RFMKey" value="$xRFMKey" />
                                <param name="debugchance" value="100" />
                            </run_actions>
                        </do_if>
                        <do_else>
                            <set_value name="$entry.$order" exact="table[
                                $autowares = 1,
                                $distancecheck = 0,
                                $distancecheckpercent = 5,
                                $enablelogbook = 1,
                                $id = 'DeadTater',
                                $ignoreshipbuyers = 1,
                                $ignoretraderules = 0,
                                $illegalwares = 0,
                                $maxbuy = 15,
                                $maxsell = 15,
                                $minbuy = 0,
                                $minfill = 0,
                                $minfillpercent = 5,
                                $minsell = 0,
                                $preferownfaction = 0,
                                $preferownfactionbuy = 0,
                                $preferownfactionsell = 0,
                                $range = $entry.$sectorid,
                                $warebasket = []
                            ]" />
                        </do_else>
                    </do_if>
                </do_for_each>
            </patch>
            <patch sinceversion="9">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 9'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <!-- tIndividualInstructions datası lua load esnasında güncellenmesi için propertyi siliyoruz -->
                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <remove_value name="$rEntry.$tIndividualInstructions" />
                    </do_for_each>
                </do_for_each>
                <!-- RFM Cue yapısı güncelle -->
                <!-- param  updateloadouts (default false) isChangeCrewAmounts (default false)        -->
                <run_actions ref="ReEnable_All_RFM" />
                <show_help duration="5s" custom="'%s %s %s'.[readtext.{Main.$tPage}.{1}, readtext.{Main.$tPage}.{1310}, readtext.{Main.$tPage}.{1330}]" comment="Upb Restock Fleet Manager Update Complete"/>

            </patch>
            <!-- destroyedShipKeys listeleri düzeltildi
                Manager.Cue içerisinde bazı hatalar düzeltildi
                lockstatus değiştirildi
            -->
            <patch sinceversion="10">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 10'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />

                <do_for_each name="$RFMKey" in="Main.$RM_Fleets.keys.list">
                    <set_value name="$destroyedShipKeys" exact="[]"/>
                    <do_for_each name="$rKey" valuename="$rEntry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$rEntry.$destroyed">
                            <do_if value="not Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$rKey}">
                                <append_to_list name="$destroyedShipKeys" exact="$rKey"/>
                            </do_if>
                        </do_if>
                    </do_for_each>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$destroyedShipKeys" />
                    <run_actions ref="Check_FleetLockStatus">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                </do_for_each>

                <run_actions ref="ReEnable_All_RFM" />

            </patch>
            <!-- 2.1.7 ver 10 dan kaynaklanan rfm restart  hatası giderildi
                entity add remove olayındaki hata düzeltildi
                default değerlerde değişiklik yapıldı
             -->
            <patch sinceversion="11">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 11'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <run_actions ref="ReEnable_All_RFM" />
            </patch>
            <!--    1- RFM lere autobuild propertysi eklendi
                    2- Genel ayarlara üretim ve oyuncu parası için sınırlama kondu
            -->
            <patch sinceversion="12">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 12'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
            </patch>
            <!-- ReBuild işleminde ship ve equipment lisans kontrolü eklendi -->
            <patch sinceversion="13">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 13'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
                <run_actions ref="ReEnable_All_RFM" />
            </patch>
            <!-- Trader, Miner ve Slavagerlere warebasketleri saklama özelliği eklendi -->
            <patch sinceversion="14">
                <debug_text text="'RFM PROGRAM  Main START Patch sinceversion = 14'" />
                <include_actions ref="GlobalConstants" />
                <signal_cue_instantly cue="Check_Records" />
            </patch>

            <cues>
                <cue name="DebugModReset" comment="çalışma zamanı esnasında olası değişken eklemelerini güncellemek için">
                    <conditions>
                        <event_player_changed_activity activity="activity.scan_longrange"/>
                        <!-- *** proje tamamlandığında check değerini false yapıp bu kontrolü devredışı bırakmayı UNUTMA-->
                        <check_value value="false"/>
                    </conditions>
                    <actions>
                        <run_actions ref="Disable_All_RFM" />

                        <signal_cue_instantly cue="KeepAlive" />

                        <reset_cue cue="Main"/>
                    </actions>
                </cue>

                <cue name="SetConfigVars">
                    <actions>
                        <debug_text text="'RFM PROGRAM SetConfigVars BAŞLADI'" chance="$DebugChance" />
                        <debug_to_file text="'-' + player.systemtime.{'%F-%X'} + '- DebugChance : %s, DeepDebug : %s '.[$DebugChance, $DeepDebug]" name="$logTAG_Main" directory="$logDIR" chance="$DebugChance" />
                        <debug_to_file text="'- &lt;none event enter mode&gt; Cue[%s] -  Age: %s, %s'.[this.name, player.age, player.systemtime.{'%F-%X'}]" name="$logTAG_Main" directory="$logDIR" chance="$DebugChance"/>
                    </actions>
                    <cues>
                        <cue name="SetConfigVars_Reset">
                            <conditions>
                                <check_any>
                                    <event_cue_signalled/>
                                    <event_game_loaded/>
                                </check_any>
                            </conditions>
                            <actions>
                                
                                <debug_text text="'RFM PROGRAM - SetConfigVars_RESET - BAŞLADI -  &lt;%s&gt; , object = %s , param = %s'.[event.name, @event.object.name, @event.param]" chance="$DebugChance" />
                                <include_actions ref="GlobalConstants" />
                                <debug_to_file text="'- GAME %s Cue[%s] Genel Değişkenler yüklendi.. -  Age: %s, %s , textPage = %s'.[event.name, this.name, player.age, player.systemtime.{'%F-%X'}, $tPage]" name="$logTAG_Main" directory="$logDIR" chance="$DebugChance" append="false"/>

                                <signal_cue_instantly cue="Debug_FilesReset_Main" />
                                <reset_cue cue="SetConfigVars"/>
                            </actions>
                        </cue>
                    </cues>
                </cue>
                <!-- $isDebugMod_Dump true ve scan aktivitesi açılılınca devreye girerek debug dosya dökümünü oynanırken istenilen anda yapar yeniler-->
                <cue name="DebugMod_Dump_Main" comment="Main Debug dosyalarının dökümünü yapar">
                    <conditions>
                        <check_any>
                            <event_cue_signalled />
                            <check_all>
                                <event_player_changed_activity activity="activity.scan"/>
                                <!-- *** proje tamamlandığında check değerini false yapıp bu kontrolü devredışı bırakmayı UNUTMA-->
                                <check_value value="if Main.$DebugChance == 100 then $isDebugMod_Dump else false"/>
                            </check_all>
                        </check_any>
                    </conditions>
                    <actions>
                        <show_help duration="5s" custom="'%s %s'.[readtext.{Main.$tPage}.{1}, 'DEBUG DUMP']" comment="Upb Restock Fleet Manager DEBUG DUMP"/>
                        <debug_to_file text="'Restock Manager Fleet DEBUG DUMP  Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" append="false" chance="Main.$DebugChance" />
                        <debug_to_file text="'- - - - - - - - - M A I N - - - - - - - - - - - - - - - - -'" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <!-- DEBUG : RM_FLEETS File-->
                        <run_actions ref="Debug_RM_Fleets">
                            <param name="inserttext" value="''" />
                            <param name="logfile" value="Main.$logTAG_DumpDebug" />
                            <param name="append" value="true" />
                        </run_actions>
                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues">
                            <param name="inserttext" value="''" />
                            <param name="logfile" value="Main.$logTAG_DumpDebug" />
                            <param name="append" value="true" />
                        </run_actions>
                        <debug_to_file text="'- - - - - - - - - M A I N - E N D - - - - - - - - - - - - -'" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DebugChance" />
                        <reset_cue cue="this" />
                    </actions>
                </cue>
                <cue name="Debug_FilesReset_Main" comment="Her oyun yüklemesinde main debug dosyalarını resetleyip döküm almak için">
                    <conditions>
                        <event_cue_signalled/>
                    </conditions>
                    <actions>
                        <run_actions ref="DebugFilesReset_Main">
                            <param name="debugchance" value="Main.$DebugChance" />
                        </run_actions>
                        <reset_cue cue="this" />
                    </actions>
                </cue>

                <!-- RUNNING CODE-->

                <!-- Conversations -->
                <cue name="Conversation_menu_entrance_universal_ai" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_started conversation="default" />
                            <event_conversation_returned_to_section section="default"/>
                        </check_any>
                        <check_value value="@event.object.isclass.entity"/>
                        <check_any>
                            <check_value value="@event.object.assignedcontrolled.isclass.ship and event.object.assignedcontrolled.pilot == event.object" />
                            <check_value value="@event.object.assignedcontrolled.isclass.station and event.object.assignedcontrolled.tradenpc == event.object" />
                        </check_any>
                        <check_value value="event.object.isplayerowned and event.object.assignedcontrolled.isplayerowned" />
                        <check_value value="not event.object.assignedcontrolled.commander" comment="Ana commander olacak"/>
                        <remove_value name="event.object.$Restock" />
                    </conditions>
                    <actions>
                        
                        <!-- RFM Hatalı Kapanma testi-->
                        <set_value name="$entityFlag" exact="true"/>
                        <do_if value="not event.object.$RFM? and @event.object.$RFM == null ">
                            <remove_value name="$entityFlag" />
                        </do_if>
                        <do_for_each name="$xRFMKey" valuename="$entry" in="Main.$RM_Fleets" >
                            <do_if value="$entry.$entity == event.object">
                                <set_value name="$entityRFM" exact="$entry.$id" />
                                <debug_text text="' Found Entitys RFM = %s  , $entityFlag = %s'.[@$entityRFM, $entityFlag?]" />
                                <break />
                            </do_if>
                        </do_for_each>
                        <do_if value="not $entityRFM? and $entityFlag?">
                            <debug_text text="' Broken RFM. Clearing Entity Flag '.[]" />
                            <run_actions ref="Clear_ShipCaption">
                                <param name="RFMKey" value="0" />
                                <param name="ship" value="event.object.assignedcontrolled" />
                            </run_actions>
                            <remove_value name="event.object.$RFM" />
                            <!-- 
                            <debug_text text="' Signalling Start for Manager '.[]" />
                            <signal_cue_instantly cue="RF_Manager" param="[event.object, true]"/>
                            -->
                        </do_if>


                        <do_if value="@md.ExtendedConversationMenu.Main.exists">
                            <set_value name="md.ExtendedConversationMenu.Main.$convOptions.$RFMmenu" exact="table[
                                $signalCue = md.Upb_Restock_Fleet.RFM_Conv_ECMSupport, 
                                $params = [event.object] 
                                ]" />
                        </do_if>
                        <do_else>
                           <signal_cue_instantly cue="RFM_Conv_ECMSupport" param="[event.object]" /> 
                        </do_else>
                    </actions>
                </cue>

                <cue name="RFM_Conv_ECMSupport" instantiate="true">
                    <conditions>
                      <event_cue_signalled/>
                    </conditions>
                    <actions>
                        <set_value name="$object" exact="if event.param? and typeof event.param == datatype.list then event.param.{1} else event.param" />
                        <do_if value="@md.ExtendedConversationMenu.Main.exists">
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1500} + '\33X'" section="RestockManager"  comment="Upb Restock Fleet"/>
                        </do_if>
                        <do_else>
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1500} + '\33X'" position="bottom_left" section="RestockManager"  comment="Upb Restock Fleet"/>
                        </do_else>
                        
                    </actions>
                </cue>
        
                <cue name="Conversation_Menu_Main" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_next_section section="RestockManager"/>
                            <event_conversation_returned_to_section section="RestockManager"/>
                        </check_any>
                        <check_value value="not event.object.assignedcontrolled.commander" />
                    </conditions>
                    <actions>
                        <!-- 
                        <remove_value name="event.object.$RFM" />
                        -->
                        <!-- 
                        <debug_text text="'1 %s %s : entity = %s, %s , RFM? %s, @RFM %s'.[event.name, event.param, event.object, event.object.name, event.object.$RFM?, @event.object.$RFM]" />
                        -->
                        <do_if value="not event.object.$RFM? and @event.object.$RFM == null ">
                            <add_player_choice_sub text="'\33' + $normalColor + readtext.{Main.$tPage}.{1510} + '\33X'" section="csRFM_Enable" position="left" comment="Enable Restock Fleet"/>
                            <set_value name="$selectable" exact="true"/>
                            <do_if value="event.object.assignedcontrolled.subordinates.count">
                                <set_value name="$selectable" exact="false"/>
                            </do_if>
                            <add_player_choice_sub text="readtext.{Main.$tPage}.{1520} " selectable="$selectable" section="csRFM_fleets" position="right" comment="Enable From RFM"/>
                        </do_if>
                        
                        <add_player_choice_sub text="readtext.{Main.$tPage}.{1050}" section="csRFM_OpenLua" choiceparam="'manager'" position="top_left" comment="Management" />
                        <add_player_choice_sub text="readtext.{Main.$tPage}.{1060}" section="csRFM_OpenLua" choiceparam="'options'" position="top_right" comment="Options"/>
                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                    </actions>
                </cue>

                <cue name="Conversation_Menu_Sections" instantiate="true" >
                    <conditions>
                        <check_any>
                            <event_conversation_next_section sectionprefix="csRFM_" />
                            <event_conversation_returned_to_section sectionprefix="csRFM_" />
                        </check_any>
                    </conditions>
                    <actions>

                        <do_if value="event.param == 'csRFM_Enable'">
                            <!-- param [ entity, singlestartup ]  -->
                            <signal_cue_instantly cue="RF_Manager" param="[event.object, true]"/>
                            <speak actor="event.object" line="2103"/>
                            <play_sound object="player.entity" sound="Main.$EnableSoundId" />
                        </do_if>

                        <do_elseif value="event.param == 'csRFM_OpenLua'">
                            <run_actions ref="md.Upb_Restock_Fleet.SetInformationsToPlayer" >
                                <param name="TableMode" value="event.param2" />
                            </run_actions>
                        </do_elseif>
                        
                        <do_elseif value="event.param == 'csRFM_fleets'">
                            <set_value name="$fleetsKeyList" exact="[]"/>
                            <do_if value="@md.Upb_Restock_Fleet.Main.$RM_Fleets.keys.count">
                                
                                <set_value name="$fleetsKeyList" exact="md.Upb_Restock_Fleet.Main.$RM_Fleets.keys.list"/>
                                <run_actions ref="Sort_ListKeys" result="$fleetsKeyList">
                                    <param name="list" value="$fleetsKeyList" />
                                </run_actions>

                                <do_if value="event.param2 == 'rm_f_previous' and event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" operation="subtract"/>
                                </do_if>
                                <do_elseif value="event.param2 == 'rm_f_next' and event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" operation="add"/>
                                </do_elseif>
                                <do_elseif value="event.name == 'event_conversation_next_section'">
                                    <set_value name="$rm_f_Page" exact="0"/>
                                </do_elseif>

                                <do_all exact="4" counter="$i">
                                    <set_value name="$actual_rm_f_Item" exact="$i + (4 * $rm_f_Page)"/>
                                    <do_if value="$fleetsKeyList.count lt $actual_rm_f_Item">
                                        <break/>
                                    </do_if>
                                    <set_value name="$selRFMKey" exact="$fleetsKeyList.{$actual_rm_f_Item}"/>
                                    
                                    <set_value name="$selText" exact="'%s-%s_%s_%s%s'.[
                                    $actual_rm_f_Item, Main.$RFMTag, $selRFMKey, $RM_Fleets.{$selRFMKey}.$commander.$name,
                                    if $RM_Fleets.{$selRFMKey}.$commander.$object != null then
                                        ' (' + $RM_Fleets.{$selRFMKey}.$commander.$object.idcode + ')'
                                    else ''
                                    ]"/>
                                    <add_player_choice_sub text="$selText" section="csRFM_fleetselected" choiceparam="$selRFMKey" position="$i" />
                                    
                                    <do_if value="$rm_f_Page == 0">
                                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    </do_if>
                                    <do_else>
                                        <add_player_choice text="readtext.{Main.$tPage}.{1071}" section="csRFM_fleets" choiceparam="'rm_f_previous'" position="bottom_right" comment="Previous"/>
                                    </do_else>
                                    <do_if value="$fleetsKeyList.count gt ((4 * $rm_f_Page) + 4)">
                                        <add_player_choice text="readtext.{Main.$tPage}.{1072}" section="csRFM_fleets" choiceparam="'rm_f_next'" position="right" comment="Next"/>
                                    </do_if>
        
                                </do_all>
                            </do_if>
                            <do_else>
                                <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                            </do_else>
                        </do_elseif>

                        <do_elseif value="event.param == 'csRFM_fleetselected'">
                            <add_player_choice text="readtext.{Main.$tPage}.{1073}" section="csRFM_RFMConfirmed" position="top_left" choiceparam="event.param2" comment="Confirm"/>
                            <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                        </do_elseif>

                        <do_elseif value="event.param == 'csRFM_RFMConfirmed'">
                            <run_actions ref="CloneRFM">
                                <param name="CloneRFMKey" value="event.param2" />
                                <param name="entity" value="event.object" />
                                <param name="IsSound" value="true" />
                                <param name="debugchance" value="Main.$DebugChance" />
                                <param name="deepdebug" value="Main.$DeepDebug" />
                            </run_actions>
                        </do_elseif>

                    </actions>
                </cue>




                <!-- Bu Eventi sadece lua açıkken oyuncunun anlık değişimi yakalaması için yazıldı
                    AddConstructToBuild zamanı zaten son güncel istasyon listesini alarak işe başlıyacağız
                -->
                <cue name="Object_Known_To_Player" instantiate="true">
                    <conditions>
                        <check_any>
                            <event_object_known_to_player group="$blacklist_stations" />
                        </check_any>
                        
                    </conditions>
                    <actions>
                            <debug_text text="'New Object KNOWN To Player   object = %s %s ( %s )'.[event.object.knownname, event.object.idcode, event.object.sector.knownname ]" chance="Main.$DebugChance"/>

                            <remove_from_group group="Main.$blacklist_stations" object="event.object" />
                            <debug_text text="'  Removed from blacklist_stations. %s %s == %s'.[event.object.idcode, event.object.knownname, event.object.sector.knownname]" chance="Main.$DeepDebug"/>
                            
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'" />
                            <!-- objenin unknown olayı bu cueden çıkınca düzelecek, bu yüzden istasyon güncelleme çağırmıyoruz -->
                            <do_if value="player.entity.$md_RFM_DataChanged?">
                                <set_value name="player.entity.$blacklist_stations" exact="$blacklist_stations" />
                                <run_actions ref="Get_Converted_Active_Stations" result="$active_stations" />
                                <set_value name="player.entity.$active_stations" exact="$active_stations" />
                                <debug_text text="'        buildstations.changed BİLDİRİMİ YAPILDI .. #active=%s , #blacklist=%s'.[Main.$active_stations.count, Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>
                                <raise_lua_event name="'buildstations.changed'" />
                            </do_if>
                            <do_else>
                                <debug_text text="'        MANAGER KAPALI. BİLDİRİM YOK .. #active=%s , #blacklist=%s'.[Main.$active_stations.count, Main.$blacklist_stations.list.count]" chance="Main.$DeepDebug"/>
                            </do_else>

                    </actions>
                </cue>

                <cue name="Relation_Changed" instantiate="true">
                    <conditions>
                        <event_player_relation_changed />
                        <!-- <debug_text text="'object = %s , faction = %s , [new, old] relation = %s , relationchangereason = %s '.[event.object, event.param, event.param2, event.param3]" />-->
                        <!-- belli süre için değişen durumları istemiyoruz (gemiye saldırı zamanı oluşan relation düşmeleri gibi) -->
                        <check_value value="not event.object" comment="only permanent changes are relevant"/>
                        <!-- Sadece dock relationun olumlu ve olumsuz değişmini yakalamak istiyoruz-->
                        <set_value name="$TargetRelation" exact="-0.0099" comment="-0.0099 (UI value -9) = allowed to dock"/>
                        <check_any>
                            <check_value value="(event.param2.{1} ge $TargetRelation) and (event.param2.{2} lt $TargetRelation)" comment="Dock Status Changed, Can Dock"/>
                            <check_value value="(event.param2.{1} lt $TargetRelation) and (event.param2.{2} ge $TargetRelation)" comment="Dock Status Changed, No Dock"/>
                        </check_any>
                    </conditions>
                    <actions>
                        <debug_text text="'R E L A T I O N   C H A N G E D   \n
                        entity = %s , faction = %s , [new,old] = %s , relationchangereason = %s
                        '.[event.object, event.param, event.param2, event.param3]" chance="Main.$DeepDebug"/>
                        
                        <!-- DOCK-->
                        <do_if value="(event.param2.{1} ge $TargetRelation) and (event.param2.{2} lt $TargetRelation)" comment="Dock status changed, dock yapabiliyor">
                            <debug_text text="'%s CHANGED DOCK STATUS [ Dock yapabiliyoruz ]'.[event.param]" chance="Main.$DebugChance"/>
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'" chance="Main.$DeepDebug"/>

                            <do_for_each name="$station" in="Main.$active_stations" counter="$i" >
                                <do_if value="$station.trueowner == event.param">
                                    <debug_text text="'  %s - Station. %s %s == %s'.[$i, $station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                    <do_if value="Main.$blacklist_stations.indexof.{$station}">
                                        <remove_from_group group="Main.$blacklist_stations" object="$station" />
                                        <debug_text text="'    Removed from Blacklist. %s %s == %s'.[$station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                        
                                        <do_if value="player.entity.$md_RFM_DataChanged?">
                                            <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations.list" />
                                            <debug_text text="'      buildstations.changed ATAMASI YAPILDI .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>
                                            <raise_lua_event name="'buildstations.changed'" />
                                        </do_if>
        
                                    </do_if>
                                </do_if>
                            </do_for_each>

                        </do_if>

                        <!-- CANT DOCK-->
                        <do_if value="(event.param2.{1} lt $TargetRelation) and (event.param2.{2} ge $TargetRelation)" comment="Dock status changed, dock yapamayacak">
                            <debug_text text="'%s CHANGED DOCK STATUS [ Dock izni yok ]'.[event.param]" chance="Main.$DebugChance"/>

                            <do_for_each name="$station" in="Main.$active_stations" counter="$i" >
                                <do_if value="$station.trueowner == event.param">
                                    <debug_text text="'  %s - Station. %s %s == %s'.[$i, $station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                    
                                    <do_if value="not Main.$blacklist_stations.indexof.{$station}">
                                        <add_to_group groupname="Main.$blacklist_stations" object="$station" />
                                        <debug_text text="'    Added to Blacklist. %s %s == %s'.[$station.idcode, $station.knownname, $station.sector.knownname]" chance="Main.$DeepDebug"/>
                                        
                                        <do_if value="player.entity.$md_RFM_DataChanged?">
                                            <set_value name="player.entity.$blacklist_stations" exact="Main.$blacklist_stations.list" />
                                            <debug_text text="'      blacklist_stations.changed ATAMASI YAPILDI .. %s %s'.[Main.$blacklist_stations.count, Main.$blacklist_stations.list]" chance="Main.$DeepDebug"/>
                                            <raise_lua_event name="'buildstations.changed'" />
                                        </do_if>
                                        
                                    </do_if>
                                </do_if>
                            </do_for_each>

                        </do_if>

                        <!-- Debug -->
                        <set_value name="$EntryRelation" exact="event.param.relation.friend.min" comment="0.01 (UI value 10) = friend"/>
                        <debug_text text="'  $EntryRelation (friend.min) = %s , $TargetRelation (allowed to dock) = %s'.[$EntryRelation, $TargetRelation]" chance="Main.$DeepDebug"/>
                        <do_if value="(event.param.relationto.{faction.player} ge $EntryRelation) ">
                            <debug_text text="'   %s FRIEND'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_if>
                        <do_else>
                            <debug_text text="'   %s NOT FRIEND'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_else>
                        <do_if value="(event.param.relationto.{faction.player} ge $TargetRelation) ">
                            <debug_text text="'   %s ALLOWED TO DOCK'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_if>
                        <do_else>
                            <debug_text text="'   %s DOCKING IS NOT ALLOWED'.[event.param]" chance="Main.$DeepDebug"/>
                        </do_else>
                        
                    </actions>
                </cue>
        
                <!-- ENABLE RFM  param [ entity, singlestartup (default true),  refFleetTable (default null) ] 
                    
                    refFleetTable null ise
                        Restart amaçlı çalıştırılıyor. Cue Temel Değişkenleri oluşturulup değerleri
                        refFleetTable değerleinden alacağız 

                    singlestartup : record yapısına eklemek için luaya tShipPlan isteği gönderilecek mi? ( default true )
                        toplu reenable yapıldığında tek tek debug dosyalarına yazma oyunu yavaşlatır 
                            ayrıca lua iletişimi toplu haberleşmelerde son girdiyi dikkate alıyor.
                        bu yüzden toplu reenable edileceği zaman bu değişken false alacak, 
                            lua verileri ve debug dökümü işlemleri allreenable işi bitince ilgili yerde yapılacak
                -->
                <cue name="RF_Manager" instantiate="true" namespace="this">
                    <conditions>
                        <event_cue_signalled/>
                    </conditions>
                    <actions>

                        <!-- CREATE RFMKey-->
                        <run_actions ref="Get_New_RFMKey" result="$RFMKey"/>
                        <debug_text text="'     RF MANAGER _%s_ [ STARTING ]'.[$RFMKey]" chance="Main.$DeepDebug"/>

                        <set_value name="$this_rfm_connects_to_other_rfm" exact="0"/>
                        <create_list name="$RemoveProcessShipKeys" />
                        <create_list name="$reAssignedShips" />

                        <set_value name="$RFMCue" exact="this"/>

                        
                        <set_value name="Main.$RebuildCues.{$RFMKey}" exact="table[]"/>
                        <set_value name="Main.$FleetRecords.{$RFMKey}" exact="table[]"/>
                        <set_value name="Main.$Loadouts.{$RFMKey}" exact="table[]"/>

                        <set_value name="$Entity" exact="event.param.{1}"/>
                        <set_value name="$singlestartup" exact="if event.param.{2}? then event.param.{2} else true" />
                        <set_value name="$refFleetTable" exact="if event.param.{3}? then event.param.{3} else null" />

                        <set_value name="$PromotedCommander" exact="@$Entity.assignedcontrolled"/>
                        <set_value name="$RMCommander" exact="$PromotedCommander"/>
                        <set_value name="$RMCommanderIdCode" exact="@$PromotedCommander.idcode"/>
                        <do_if value="$Entity != null ">
                            <set_value name="$Entity.$RFM" exact="true"/>
                        </do_if>

                        <set_value name="$alertstatus" exact="table[ 
                            $level = Main.$alertlevels.$normal , 
                            $text = 'Normal', 
                            $color = global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$normal}
                        ]" />

                        <do_if value="typeof $refFleetTable != datatype.table">
        
                            <set_value name="$RMCommanderName" exact="if $PromotedCommander != null then $PromotedCommander.name else ''"/>
    
                            <!-- ADD RM_FLEETS -->
                            <set_value name="Main.$RM_Fleets.{$RFMKey}" exact="table[
                                $cue                = $RFMCue,
                                $commander          = table[
                                    $object = $RMCommander,
                                    $name   = $RMCommanderName
                                ],
                                $autobuild          = true,
                                $alertstatus        = $alertstatus,
                                $destroyedShipKeys  = [],
                                $entity             = $Entity,
                                $id                 = $RFMKey,
                                $isLockedFleet      = false,
                                $isStation          = if $RMCommander.isclass.station then true else false,
                                $name               = if $PromotedCommander != null then $PromotedCommander.name else '',
                                $object             = $PromotedCommander,
                                $shipid             = 1,
                                $order              = table[],
                                $sector             = '',
                                $sectorid           = null
                            ]"/>
    
                            <run_actions ref="Save_DefaultOrder_To_RMFleet">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="debugchance" value="Main.$DeepDebug" />
                            </run_actions>
    
                            <!-- ADD FLEET RECORD and LOADOUT-->
                            <!-- result="$Data  = [$HeaderData, $FleetRec, $Loadouts]"-->
                            <run_actions ref="CreateAndGet_Records_By_Commander" result="$Data">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="Commander" value="$RMCommander" />
                                <param name="SendPlanData" value="$singlestartup" />
                            </run_actions>
                            <set_value name="$HeaderData" exact="$Data.{1}"/>

                            <!-- $HeaderData içindekileri al (grp $Promoted , tbl $fleetshipsByComp, tbl $fleetshipsByIdx, grp $Subordinates ) -->
                            <include_actions ref="Let_HeaderData_To_HeaderValues" />
                            
                            <debug_text text="'      RFM_%s  FleetRecords Created'.[$RFMKey]" chance="Main.$DeepDebug"/>

                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
    
                            <debug_text text="'       Manager _%s_ Creted with Normal'.[$RFMKey]" chance="Main.$DeepDebug"/>

                            <!-- data change notification for OPEN LUA -->
                            <include_actions ref="Set_MDDataChanged" />

                        </do_if>
                        <do_else>

                            <set_value name="$RMCommander" exact="$refFleetTable.$commander.$object"/>
                            <set_value name="$RMCommanderName" exact="$refFleetTable.$commander.$name"/>

                            <!-- ADD RM_FLEETS -->
                            <!-- Bu kısım yeniden başlatma ile çalışacağından baazı propertyler çıkışta düznelenecek, örneğin $alertstatus gibi-->
                            <set_value name="Main.$RM_Fleets.{$RFMKey}" exact="table[
                                $cue                = $RFMCue,
                                $commander          = table[
                                    $object = $RMCommander,
                                    $name   = $RMCommanderName
                                ],
                                $autobuild          = $refFleetTable.$autobuild,
                                $alertstatus        = $alertstatus,
                                $destroyedShipKeys  = $refFleetTable.$destroyedShipKeys,
                                $entity             = $Entity,
                                $id                 = $RFMKey,
                                $isLockedFleet      = false,
                                $isStation          = $refFleetTable.$isStation,
                                $name               = $refFleetTable.$name,
                                $object             = $refFleetTable.$object,
                                $shipid             = $refFleetTable.$shipid,
                                $order              = $refFleetTable.$order,
                                $sector             = $refFleetTable.$sector,
                                $sectorid           = $refFleetTable.$sectorid
                            ]"/>
                            
                            <!-- Header DATA-->
                            <create_group groupname="$Promoted" />
                            <set_value name="$fleetshipsByComp" exact="table[]" />
                            <set_value name="$fleetshipsByIdx" exact="table[]" />
                            <create_group groupname="$Subordinates"/>

                            <debug_text text="'       Manager _%s_ Creted with Restart'.[$RFMKey]" chance="Main.$DeepDebug"/>

                        </do_else>


                        <include_actions ref="Let_RFM_LogFileNames" />
                        <do_if value="$singlestartup" comment="toplu başlatma yapılıyorsa yazdırmayacağız">
                            <!-- DEBUG : MAIN PROGRAM LOG FILES -->
                            <set_value name="$pText" exact="'RFM_%s_ ENABLED Commander : &lt;%s&gt; %s %s (%s) , Entity : %s &lt;%s&gt;  Age: %s, %s'.[$RFMKey, $RMCommander, $RMCommanderName, $RMCommanderIdCode, $RMCommander.sector.knownname, $Entity.name, $Entity, player.age, player.systemtime.{'%F-%X'}]" />
                            <!-- DEBUG : MAIN LOG File -->
                            <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            <!-- DEBUG : RM_FLEETS File-->
                            <run_actions ref="Debug_RM_Fleets">
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>

                            <!-- DEBUG : RFM SUB LOG FILES -->
                            <set_value name="$pText" exact="'- - R M F - E N A B L E - - - - - - - - - - - - - - - - - - - - - - - - - -  Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]" />
                            <!-- DEBUG : Command File -->
                            <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                            <!-- 
                            <include_actions ref="Print_Subordinates" />
                            <set_value name="$printlogF" exact="$Command_logF"/>
                            <include_actions ref="Print_fleetshipsByIdx" />
                            <remove_value name="$printlogF" />
                            -->
                            <!-- DEBUG : Fleet Record File -->
                            <run_actions ref="Debug_FleetRecord">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- DEBUG : reBuild File  -->
                            <debug_to_file text="$pText" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- reAssign Log FILE -->
                            <debug_to_file text="$pText" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                        </do_if>

                        <!-- Aynı anda hem assign hem de grp değişimi olunca 2 sini birden değişiyor. 
                            Biz ayrı ayrı ele alacağız her iki durumu
                        -->
                        <set_value name="$oldAssignment" exact="null"/>
                        <debug_text text="'     RF MANAGER _%s_ [ ENABLED ]'.[$RFMKey]" chance="Main.$DebugChance"/>

                    </actions>
                    <cues>
                        <cue name="DebugMod_Dump_Cue" comment="manuel RFMlere ait Debug dosyalarının dökümünü yapar">
                            <conditions>
                                <check_any>
                                    <event_cue_signalled />
                                    <check_all>
                                        <event_player_changed_activity activity="activity.scan"/>
                                        <!-- *** proje tamamlandığında check değerini false yapıp bu kontrolü devredışı bırakmayı UNUTMA-->
                                        <check_value value="if Main.$DebugChance == 100 then Main.$isDebugMod_Dump else false"/>
                                    </check_all>
                                </check_any>
                            </conditions>
                            <!-- dump_main cue nin bitmesini bekle -->
                            <delay exact="1ms"/>
                            <actions>
                                
                                <!-- hata tespiti için , sonra silinecek
                                <signal_cue cue="DebugFilesReset" />
                                -->

                                <!-- RUNTIME CUES DUMP DEBUG -->
                                <debug_to_file text="'- - - - - - - - - C U E - - - %s - - - - - - - - - - - - - -'.[parent.$cue]" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DebugChance" />
                                <!-- SUBORDINATES-->
                                <set_value name="$printlogF" exact="Main.$logTAG_DumpDebug"/>
                                <include_actions ref="Print_Subordinates" />
                                <!-- FLEET RECORD TABLE -->
                                <run_actions ref="Debug_FleetRecord">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="inserttext" value="''" />
                                    <param name="logfile" value="Main.$logTAG_DumpDebug" />
                                </run_actions>
                                <!-- REBUILD CUE-->
                                <debug_to_file text="'RebuildCues.{%s}.keys.count %s'.[$RFMKey, Main.$RebuildCues.{$RFMKey}.keys.count]" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DebugChance" />
                                <debug_to_file text="'RebuildCues.{%s}=&lt;%s&gt;'.[$RFMKey, Main.$RebuildCues.{$RFMKey}]" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DeepDebug" />
                                <do_for_each name="$xDestroyedShipIDX" in="Main.$RebuildCues.{$RFMKey}.keys.list" counter="$icount">
                                    <debug_to_file text="' %s- Ship&lt;%s&gt;  Inst&lt;%s&gt;'.[$icount, $xDestroyedShipIDX, Main.$RebuildCues.{$RFMKey}.{$xDestroyedShipIDX}.$cue]" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DeepDebug" />
                                </do_for_each>
                                <run_actions ref="DebugPrintValue">
                                    <param name="value" value="Main.$RebuildCues.{$RFMKey}" />
                                    <param name="debugToFile" value="true" />
                                    <param name="debugFileName" value="Main.$logTAG_DumpDebug" />
                                    <param name="debugFileDir" value="Main.$logDIR" />
                                    <param name="DebugChance" value="Main.$DebugChance" />
                                </run_actions>
                                <debug_to_file text="'- - - - - - - - - C U E - E N D - - - - - - - - - - - - - -'" name="Main.$logTAG_DumpDebug" directory="Main.$logDIR" chance="Main.$DebugChance" />
                                <!-- DUMP SHIPS FILES-->
                                <run_actions ref="Dump_ShipFiles">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>

                                <reset_cue cue="this" />
                            </actions>
                        </cue>
                        <cue name="Debug_FilesReset_Sub" comment="Her oyun yüklemesinde sub debug dosyalarını resetleyip döküm almak için">
                            <conditions>
                                <check_any>
                                    <event_cue_signalled/>
                                    <event_game_loaded/>
                                </check_any>
                            </conditions>
                            <actions>
                                <run_actions ref="DebugFilesReset_Sub">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="debugchance" value="Main.$DebugChance" />
                                </run_actions>    
                                <reset_cue cue="this" />
                            </actions>
                        </cue>

                        <cue name="Conversation_Menu_Sub_Main" instantiate="true">
                            <conditions>
                                <check_any>
                                    <event_conversation_next_section section="RestockManager"/>
                                    <event_conversation_returned_to_section section="RestockManager"/>
                                </check_any>
                                <check_value value="event.object == $Entity"/>
                                <check_value value="$Entity.$RFM?" />
                            </conditions>
                            <actions>

                                <!-- 
                                <debug_text text="'2 event.name = %s, param = %s, param2 = %s, param3 = %s '.[event.name, @event.param, @event.param2, @event.param3]" />
                                -->
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1050}" position="top_left" section="cSO_RFM_Manager" comment="Management"/>
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1060}" position="top_right" section="cSO_RFM_Options" comment="Options"/>
                                
                                <add_player_choice_sub text="readtext.{Main.$tPage}.{1090} + ' ' + readtext.{Main.$tPage}.{1101}" position="bottom_left" section="cSO_RFM_More_1" comment="More 1"/>
                                
                                <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>

                            </actions>
                        </cue>
                        <cue name="Conversation_Menu_Sub_Sections" instantiate="true">
                            <conditions>
                                <check_any>
                                    <event_conversation_next_section sectionprefix="cSO_RFM_"/>
                                    <event_conversation_returned_to_section sectionprefix="cSO_RFM_"/>
                                </check_any>
                                <check_value value="event.object == $Entity"/>
                            </conditions>
                            <actions>
                                <!-- 
                                <debug_text text="'event.name = %s, param = %s, param2 = %s, param3 = %s '.[event.name, @event.param, @event.param2, @event.param3]" />
                                -->
                                <do_if value="event.param == 'cSO_RFM_More_1'">

                                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1530}" position="top_left" section="cSO_RFM_LostShips" comment="Produce for Lost Ships"/>
                                    
                                    <add_player_choice_sub text="readtext.{Main.$tPage}.{1090} + ' ' + readtext.{Main.$tPage}.{1102}" position="bottom_left" section="cSO_RFM_More_2"  comment="More 2"/>
                                    
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    
                                </do_if>

                                <do_if value="event.param == 'cSO_RFM_More_2'">
                                    <set_value name="$color" exact="Main.$normalColor" />
                                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$RebuildCues" >
                                        <do_if value="$entry.keys.count gt 0">
                                            <set_value name="$color" exact="Main.$alertColor" />
                                            <break />
                                        </do_if>
                                    </do_for_each>

                                    <set_value name="$CS" exact="'\33' + (if md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count gt 0 then md.Upb_Restock_Fleet.Main.$alertColor else md.Upb_Restock_Fleet.Main.$normalColor)" />
                                    <set_value name="$CE" exact="'\33X'" />
                                    
                                    <add_player_choice_sub text="'[ # %s%s%s ] - %s %s_%s'.[$CS, md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count, $CE, readtext.{Main.$tPage}.{1022}, Main.$RFMTag, $RFMKey]"  position="top_left" section="cSO_RFM_ReEnable" comment="Restart RFM_xx"/>
                                    <add_player_choice text="'%s %s_%s - [ # %s%s%s ]'.[readtext.{Main.$tPage}.{1021}, Main.$RFMTag, $RFMKey, $CS, md.Upb_Restock_Fleet.Main.$RebuildCues.{$RFMKey}.keys.count, $CE]"  position="top_right" section="cSO_RFM_Disable" comment="Disable RFM_xx"/>

                                    <set_value name="$CS" exact="'\33' + $color" />
                                    <add_player_choice_sub text="'%s%s%s'.[$CS, readtext.{Main.$tPage}.{1550}, $CE ]"  position="left" section="cSO_RFM_AllReEnable" comment="Restart All Fleets"/>
                                    <add_player_choice text="'%s%s%s'.[$CS, readtext.{Main.$tPage}.{1560}, $CE ]"  position="bottom_left" section="cSO_RFM_AllDisable" comment="Disable All Fleets"/>

                                    <remove_value name="$CS" />
                                    <remove_value name="$CE" />
                                    <remove_value name="$color" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_if>

                                <do_elseif value="event.param == 'cSO_RFM_ReEnable'">
                                    <!-- param : $RFMKey Or a list [ $RFMKey, $IsSound (default false)  ]-->
                                    <signal_cue_instantly cue="Re_Enable_RFM" param="[ $RFMKey, true ]" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_elseif>
            
                                <do_elseif value="event.param == 'cSO_RFM_AllReEnable'">
                                    <run_actions ref="ReEnable_All_RFM" />
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_AllDisable'" >
                                    <run_actions ref="Disable_All_RFM" />
                                    <signal_cue_instantly cue="KeepAlive" param="'Reset'" />
                                    <reset_cue cue="Main"/>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_Disable'">
                                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
                                    <signal_cue_instantly cue="Disable__RFM" param="[$RFMKey, 'Player', true, true ]" />
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_Manager'">
                                    <run_actions ref="md.Upb_Restock_Fleet.SetInformationsToPlayer" >
                                        <param name="OpenLuaMenu" value="true"/>
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_Options'">
                                    <run_actions ref="md.Upb_Restock_Fleet.SetInformationsToPlayer" >
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="TableMode" value="'options'" />
                                    </run_actions>
                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_LostShips'">
                                    
                                    <set_value name="$chSection" exact="event.param2"/>

                                    <set_value name="$deadShips" exact="[]"/>
                                    <do_for_each name="$xKey" valuename="$rec" in="Main.$FleetRecords.{$RFMKey}" >
                                        <do_if value="$rec.$object == null or $rec.$destroyed">
                                            <append_to_list name="$deadShips" exact="$xKey" />
                                        </do_if>
                                    </do_for_each>


                                    <do_if value="$chSection == 'rprevious' and event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" operation="subtract"/>
                                    </do_if>
                                    <do_elseif value="$chSection == 'rnext' and event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" operation="add"/>
                                    </do_elseif>
                                    <do_elseif value="event.name == 'event_conversation_next_section'">
                                        <set_value name="$rPage" exact="0"/>
                                    </do_elseif>


                                    <do_all exact="4" counter="$i">
                                        <set_value name="$actualRow" exact="$i + (4 * $rPage)"/>
                                        <do_if value="$deadShips.count lt $actualRow">
                                            <break/>
                                        </do_if>
                                        <set_value name="$Build" exact="null"/>
                                        <set_value name="$selKey" exact="$deadShips.{$actualRow}"/>

                                        <debug_text text="'\n
                                                        %s_%s_%s Table.Exist %s, .build = %s \n
                                                        %s.$cue .$Build %s, .exists = %s, .state = %s \n'.[Main.$RFMTag, $RFMKey, $selKey, 
                                        Main.$RebuildCues.{$RFMKey}.{$selKey}?,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$build,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.exists,
                                        @Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.state
                                        ] " chance="Main.$DebugChance"/>

                                        <do_if value="@Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build != null">
                                            <set_value name="$Build" exact="Main.$RebuildCues.{$RFMKey}.{$selKey}.$cue.$Build"/>
                                        </do_if>
                                        <do_elseif value="@Main.$RebuildCues.{$RFMKey}.{$selKey}.$build != null">
                                            <set_value name="$Build" exact="Main.$RebuildCues.{$RFMKey}.{$selKey}.$build"/>
                                        </do_elseif>

                                        <add_player_choice_sub text="'%s - %s%s'.[$actualRow, Main.$FleetRecords.{$RFMKey}.{$selKey}.$name, if Main.$DebugChance == 100 then ' (' + $selKey + ')' else '']" 
                                        selectable="not $Build.exists" section="cSO_RFM_LostShips_Selected" choiceparam="$selKey" position="$i" />

                                    </do_all>

                                    <do_if value="$rPage == 0">
                                        <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>
                                    </do_if>
                                    <do_else>
                                        <add_player_choice text="readtext.{Main.$tPage}.{1071}" section="cSO_RFM_LostShips" choiceparam="'rprevious'" position="bottom_right" comment="Previous"/>
                                    </do_else>
                                    <do_if value="$deadShips.count gt ((4 * $rPage) + 4)">
                                        <add_player_choice text="readtext.{Main.$tPage}.{1072}" section="cSO_RFM_LostShips" choiceparam="'rnext'" position="right" comment="Next"/>
                                    </do_if>

                                    <remove_value name="$deadShips" />
                                    <remove_value name="$Build" />
                                    <remove_value name="$chSection"/>
                                    <remove_value name="$xKey" />
                                    <remove_value name="$selKey" />

                                </do_elseif>

                                <do_elseif value="event.param == 'cSO_RFM_LostShips_Selected'">

                                    <run_actions ref="ReBuildShip" result="$result">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="ShipKey" value="event.param2" />
                                        <param name="debugchance" value="Main.$DeepDebug" />
                                    </run_actions>

                                    <add_player_choice text="readtext.{Main.$tPage}.{1540}" selectable="false" section="" position="top_left"/>
                                    <add_player_choice_return text="readtext.{Main.$tPage}.{1070}" position="bottom_right" comment="Back"/>

                                </do_elseif>

                            </actions>
                        </cue>

                        <!-- oyuncu gemileri  Equipment Change  yaptığında record güncelleme için denetleyeceğiz -->
                        <cue name="Player_Build_Finished" instantiate="true" >
                            <conditions>
                                <check_all>
                                    <event_build_finished group="$Subordinates"/>
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <actions>

                                <set_value name="$buildprocessor"  exact="event.param"/>
                                <set_value name="$buildtask"  exact="event.param3"/>
                                <set_value name="$dock" exact="$buildtask.object" />
                                <set_value name="$tShip"  exact="$buildtask.buildobject"/>
                                <set_value name="$tShipKey" exact="@$fleetshipsByComp.{$tShip}" />
                                
                                <debug_text text="'\n
                                    $buildtask.buildobject  = &lt;%s&gt; %s %s \n
                                    $buildtask.faction      = %s %s \n
                                    $buildtask.construction = &lt;%s&gt; %s %s \n
                                    $buildtask.object       = &lt;%s&gt; %s %s \n
                                    $buildtask.constructionsequence = %s \n
                                    $buildtask.buildmodule      = %s \n
                                    $buildtask.buildprocessor   = %s \n
                                    $buildtask.macro    = %s \n
                                    isshipbuild         = %s \n
                                    isupgrade           = %s \n
                                    isshipmodification  = %s \n
                                    isrestock           = %s \n
                                    isexpansion         = %s \n
                                    isrecycleshipbuild  = %s \n
                                    isprocessing        = %s
                                    '.[
                                    $buildtask.buildobject, $buildtask.buildobject.idcode, $buildtask.buildobject.knownname,
                                    (if $buildtask.faction == faction.player then 'Player' else 'NPC'), $buildtask.faction,
                                    @$buildtask.construction, @$buildtask.construction.idcode, @$buildtask.construction.knownname,
                                    $buildtask.object, $buildtask.object.idcode, $buildtask.object.knownname,
                                    $buildtask.constructionsequence,
                                    $buildtask.buildmodule,
                                    $buildtask.buildprocessor,
                                    $buildtask.macro,
                                    $buildtask.isshipbuild, 
                                    $buildtask.isupgrade, 
                                    $buildtask.isshipmodification, 
                                    $buildtask.isrestock, 
                                    $buildtask.isexpansion,
                                    $buildtask.isrecycleshipbuild, 
                                    $buildtask.isprocessing
                                    ]" chance="0"/>
                                
                                <do_if value="$dock.isclass.station and not $buildtask.isshipbuild and $tShipKey != null ">
                                    <debug_text text="' RFMKey %s_%s  &lt;CHANGE EQUIPMENT&gt; \n
                                    Ship = %s %s&lt;%s&gt; state = %s , build = %s , buildprocessor = %s, event.object = &lt;%s&gt; dock = &lt;%s&gt; %s %s %s
                                    '.[$RFMKey, $tShipKey, $tShip.idcode, $tShip.knownname, $tShip,$tShip.state, $buildtask, $buildprocessor, event.object, $dock, $dock.idcode, $dock.knownname, (if $dock.isclass.ship then 'Ship' else 'Station') ]" chance="Main.$ChangesOnFleetDebug"/>

                                    <do_if value="$dock.isplayerowned">
                                    <set_value name="$updateEquipments" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$PYards.$equipments"/>
                                    <set_value name="$updatePeoples" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$PYards.$peoples"/>
                                    </do_if>
                                    <do_else>
                                        <set_value name="$updateEquipments" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$NYards.$equipments"/>
                                        <set_value name="$updatePeoples" exact="global.$upbRF_DATA.$Editing.$ValidUpdates.$NYards.$peoples"/>
                                    </do_else>
                                    <!-- ShipKey vermiyoruz, olası ad değişikliği yapıldıysa ad bilgisini ship.name den  alacak-->
                                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="ship" value="$tShip" />
                                    </run_actions>
                                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$name" exact="$name"/>

                                    <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                                        <param name="Ship" value="$tShip"/>
                                    </run_actions>

                                    <!-- .tShipPlan güncellemesini sadece equipment üzerinden yapacağız -->
                                    <!-- .tShipPlan.crew de güncellenecek bu yüzden geçerli crew okuma işini .tBulkCrew üzerinden yapacağız -->
                                    <do_if value="$updatePeoples">
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tPilot" exact="$NewLoadout.{3}"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew" exact="$NewLoadout.{4}"/>
                                        <do_if value="not $updateEquipments">
                                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tShipPlan.$crew.$marine" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew.{entityrole.marine}.count" />
                                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tShipPlan.$crew.$service" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tBulkCrew.{entityrole.service}.count" />
                                        </do_if>
                                    </do_if>
                                    <do_if value="$updateEquipments">
                                        <set_value name="Main.$Loadouts.{$RFMKey}.{$tShipKey}" exact="$NewLoadout.{1}"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$tWare" exact="$NewLoadout.{2}"/>
                                        
                                        <create_list name="$PlanData" />
                                        <run_actions ref="AppendTo_PlanData" >
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="ShipKey"   value="$tShipKey"/>
                                            <param name="Object"      value="$tShip"/>
                                            <param name="issupplyship"      value="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$issupplyship"/>
                                            <param name="macro"             value="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$macro"/>
                                            <param name="PlanData"              value="$PlanData" />
                                            <param name="getShipPlan"               value="true"/>
                                            <param name="getIndividualInstructions" value="true"/>
                                        </run_actions>
                                        <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                                        <signal_cue_instantly cue="Get_PlanData_FromLua" param="[$PlanData, true]" />
                                    </do_if>
                                    
                                    <set_value name="$pText" exact="'( %s ) &lt;%s&gt; %s %s EQUIPMENT CHANGED on Shipyard %s, Age: %s, %s'
                                    .[$tShipKey, $tShip, $name, $tShip.idcode, event.param.knownname, player.age, player.systemtime.{'%F-%X'}]" />

                                    <do_if value="$tShipKey == 1">
                                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name" exact="$name"/>
                                        <set_value name="Main.$RM_Fleets.{$RFMKey}.$name" exact="$name"/>
                                        <run_actions ref="Update_RFMCaption">
                                            <param name="RFMKey" value="$RFMKey" />
                                        </run_actions>
                                    </do_if>

                                    <!-- data change notification for OPEN LUA -->
                                    <include_actions ref="Set_MDDataChanged" />

                                    <set_value name="$pText" exact="'RFM_%s_%s'.[$RFMKey, $pText]"/>
                                    <!-- DEBUG : RM_FLEETS File-->
                                    <run_actions ref="Debug_RM_Fleets">
                                        <param name="inserttext" value="$pText" />
                                    </run_actions>
                                    <!-- FLEET RECORD TABLE -->
                                    <do_if value="not $PlanData?">
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="$pText" />
                                        </run_actions>
                                    </do_if>
                                    <debug_to_file text="'%s'.[$pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <debug_to_file text="'%s'.[$pText]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <do_if value="$updatePeoples">
                                        <debug_to_file text="'    RFM_%s_%s record.tShipPlan.crew amounts update'.[$RFMKey, $tShipKey]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_if>

                                </do_if>
                                <remove_value name="$updatePeoples" />
                                <remove_value name="$updateEquipments" />
                                <remove_value name="$PlanData" />
                                <remove_value name="$NewLoadout"/>
                                <remove_value name="$tShip" />
                                <remove_value name="$tShipKey" />
                                <remove_value name="$pText" />


                            </actions>
                        </cue>
                        
                        <!-- 
                            Normal Olay sıralaması :
                                1-Removed
                                2-Added
                                3-Subgroupchanged
                                4-Assignment
                                5-Promoted
                                6-Destroyed
                                7-Order Canceled
                                8-Order Ready
                        -->
                        <cue name="SubordinatePromoted" instantiate="true" comment="5. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_promoted group="$Promoted" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <actions>

                                <debug_text text="'\n
                    SUB PROMOTED  \n
                        status %s \n
                            RFMKey : %s   [table idx : %s] \n
                                RFM Cancelling?    %s   \n
                                new Promoted Ship param : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                Object (Old Commander)  : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                '.[
                                if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                $RFMKey, @$fleetshipsByComp.{event.param},
                                (if $Cancelling? then 'YES' else 'no'),
                                event.param.iswreck, event.param.exists, @event.param.isactive, event.param.isoperational,
                                event.param, event.param.knownname, event.param.idcode,
                                event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                event.object, event.object.knownname, event.object.idcode
                                ]"  chance="Main.$ChangesOnFleetDebug"/>


                                <debug_to_file text="'- Cue[%s] started, RFM_%s_  Age: %s, %s\n
                            Old Commander&lt;%s&gt; %s %s, \n
                            Promoted Ship&lt;%s&gt; %s %s
                            '.[
                            this.name, $RFMKey, player.age, player.systemtime.{'%F-%X'},
                            $PromotedCommander, $PromotedCommander.knownname, $PromotedCommander.idcode, 
                            event.param, event.param.knownname, event.param.idcode]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'- Cue[%s] started, RFM_%s_  Age: %s, %s\n
                            Old Commander&lt;%s&gt; %s %s, \n
                            Promoted Ship&lt;%s&gt; %s %s
                            '.[
                            this.name, $RFMKey, player.age, player.systemtime.{'%F-%X'},
                            $PromotedCommander, $PromotedCommander.knownname, $PromotedCommander.idcode, 
                            event.param, event.param.knownname, event.param.idcode]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                                
                                <run_actions ref="PromoteToCommander">
                                    <param name="RFMKey" value="$RFMKey" />
                                    <param name="Commander" value="event.param" />
                                    <param name="oldCommander" value="$PromotedCommander" />
                                </run_actions>

                            </actions>
                        </cue>

                        <cue name="Changed_Order" instantiate="true" comment="7. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <check_any>
                                        <event_object_order_ready group="$Promoted" />
                                        <event_object_order_cancelled group="$Promoted" />
                                    </check_any>
                                </check_all>
                            </conditions>
                            <actions>
                                <set_value name="$sakla" exact="false" />
                                <do_if value="not $isEntityChanged?">
                                    <do_if value="@$PromotedCommander.orders != null" comment="ölmemişse">
                                        <do_if value="$PromotedCommander.orders.count == 0 ">
                                            <do_if value="event.param == $PromotedCommander.defaultorder">
                                                <set_value name="$sakla" exact="true" />
                                            </do_if>
                                        </do_if>
                                        <do_if value="$sakla">
                                            <do_if value="event.name == 'event_object_order_ready'">
                                                <debug_to_file text="'RFM_%s_ CHANGED ORDER %s  Age: %s, %s
                                            '.[$RFMKey, $PromotedCommander.defaultorder.id,player.age,player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                <debug_to_file text="'RFM_%s_ CHANGED ORDER %s  Age: %s, %s
                                            '.[$RFMKey, $PromotedCommander.defaultorder.id,player.age,player.systemtime.{'%F-%X'}]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            </do_if>

                                            <run_actions ref="Save_DefaultOrder_To_RMFleet">
                                                <param name="RFMKey" value="$RFMKey" />
                                                <param name="debugchance" value="Main.$DeepDebug" />
                                            </run_actions>
                    
                                            <!-- data change notification for OPEN LUA -->
                                            <include_actions ref="Set_MDDataChanged" />
                                            
                                            <set_value name="$pText" exact="'RFM_%s_ CHANGED ORDER, Age: %s, %s'.[$RFMKey, player.age, player.systemtime.{'%F-%X'}]"/>
                                            <!-- DEBUG : RM_FLEETS File-->
                                            <run_actions ref="Debug_RM_Fleets">
                                                <param name="inserttext" value="$pText" />
                                            </run_actions>
                                        </do_if>
                                    </do_if>
                                    <remove_value name="$isEntityChanged" />

                                </do_if>
                                
                                <debug_text text="'\n
        %s , %s  RFM_%s_ \n
        Promoted Commander &lt;%s&gt; %s %s (%s)  \n
            (receving) object : &lt;%s&gt; %s %s  \n
            (order) param     : %s &lt;%s&gt;  state&lt;%s&gt;    \n
            (is critical order) param2 : %s   \n
            PromotedCommander order    : %s &lt;%s&gt;  state&lt;%s&gt; \n
            PromotedCommander orders   : %s   \n
            PromotedCommander Default  : %s &lt;%s&gt;  state&lt;%s&gt;  \n
            isEntityChanged? %s
                                '.[
                                if $sakla then 'NEW ORDER YAZ' else 'ATLA', event.name, $RFMKey,
                                $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                @event.object, @event.object.idcode, @event.object.knownname,
                                @event.param.id, event.param, @event.param.state, 
                                @event.param2,
                                @$PromotedCommander.order.id, @$PromotedCommander.order, @$PromotedCommander.order.state,
                                @$PromotedCommander.orders,
                                @$PromotedCommander.defaultorder.id, @$PromotedCommander.defaultorder, @$PromotedCommander.defaultorder.state,
                                $isEntityChanged?
                                ]" chance="if $sakla then Main.$ChangesOnFleetDebug else 0"/>

                                <remove_value name="$sakla" />
                            </actions>
                        </cue>

                        <cue name="EntityChanged" instantiate="true" >
                            <conditions>
                                <check_all>
                                    <check_any>
                                        <event_control_entity_added group="$Promoted" />
                                        <event_control_entity_removed group="$Promoted" />
                                    </check_any>
                                    <check_value value="event.param != player.entity" />
                                </check_all>
                            </conditions>
                            <actions>

                                <debug_text text="'\n
                            &lt;%s&gt;  \n
                                Object (controlabble or entity) = &lt;%s&gt; %s %s         \n
                                Param  (entity)                 = &lt;%s&gt; %s \n
                                .param.assignedcontrolled       = &lt;%s&gt;    \n
                                cue.Entity      = &lt;%s&gt;        \n
                                cue.Promoted    = %s                \n
                                PromotedCommander               = &lt;%s&gt; = = .pilot  &lt;%s&gt; , .assignedpilot &lt;%s&gt; , .assignedcontrolentity.{controlpost.aipilot} &lt;%s&gt;  \n
                                Param2 (kill method)    = %s
                                 '.[
                                event.name, 
                                event.object, event.object.knownname, @event.object.idcode,
                                event.param, event.param.knownname,
                                event.param.assignedcontrolled,
                                $Entity,
                                $Promoted,
                                @$PromotedCommander, @$PromotedCommander.pilot, @$PromotedCommander.assignedpilot, @$PromotedCommander.assignedcontrolentity.{controlpost.aipilot}, 
                                @event.param2
                                 ]" chance="Main.$ChangesOnFleetDebug"/>

                                <do_if value="event.name == 'event_control_entity_added'">
                                    <run_actions ref="PromoteEntity">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="Entity" value="event.param" />
                                    </run_actions>
                                    
                                    <set_value name="$PromotedCommander" exact="event.param.assignedcontrolled"/>
                                    <set_value name="$RMCommander" exact="$PromotedCommander"/>
                                    
                                    <!-- 1 nolu geminin pilot bilgisini Record tablosunda güncelliyoruz-->
                                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$Pilot" exact="table
                                    [
                                        $macro = event.param.macro,
                                        $skill = table
                                            [
                                            {skilltype.management} = event.param.skill.{skilltype.management},
                                            {skilltype.morale} = event.param.skill.{skilltype.morale},
                                            {skilltype.piloting} = event.param.skill.{skilltype.piloting},
                                            {skilltype.engineering} = event.param.skill.{skilltype.engineering},
                                            {skilltype.boarding} = event.param.skill.{skilltype.boarding}
                                            ]
                                    ]"/>
                                    <debug_text text="'  FleetRecords.{%s}.[1].$Pilot updated'.[$RFMKey]" />
                                    <set_value name="$isEntityChanged" exact="true" />

                                    <debug_to_file text="'  RFM_%s_ ENTITY ADDED new Entity %s &lt;%s&gt;, PromotedCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, event.param.knownname, event.param, $PromotedCommander, Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name, $PromotedCommander.idcode, $PromotedCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                                    <debug_to_file text="'RFM_%s_ NEW PILOT &quot;%s &lt;%s&gt;&quot; to Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s) Age: %s, %s
                                    '.[
                                    $RFMKey, 
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <debug_to_file text="'NEW PILOT &quot;%s &lt;%s&gt;&quot; to Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s),  Age: %s, %s
                                    '.[
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                </do_if>
                                <do_else>
                                    
                                    <run_actions ref="UnPromoteEntity">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="Entity" value="event.param" />
                                    </run_actions>

                                    <debug_to_file text="'  RFM_%s_ ENTITY REMOVED Entity&lt;%s&gt; %s, PromotedCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, event.param.knownname, event.param, $PromotedCommander, Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name, $PromotedCommander.idcode, $PromotedCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_RFMleets" directory="Main.$logDIR" chance="Main.$DebugChance" append="false"/>
                                    <debug_to_file text="'RFM_%s_ PILOT REMOVED &quot;%s &lt;%s&gt;&quot; from Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s, %s
                                    '.[
                                    $RFMKey, 
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <debug_to_file text="'PILOT REMOVED &quot;%s &lt;%s&gt;&quot; from Promoted Comander Ship ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s, %s
                                    '.[
                                    event.param.knownname, event.param, 
                                    $fleetshipsByComp.{$PromotedCommander}, $PromotedCommander, $RMCommanderName, $PromotedCommander.idcode, $PromotedCommander.sector.knownname,
                                    player.age, player.systemtime.{'%F-%X'}
                                    ]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                </do_else>

                                
                                <!-- DEBUG : RM_FLEETS File-->
                                <run_actions ref="Debug_RM_Fleets"/>
                            </actions>
                        </cue>

                        <!-- Olay sıralarını değişmek için delay eklendi-->
                        <!-- normalde Destroy en sonda oluşuyor, add ve remove olayını en geçe alıcağız-->
                        <!-- -->
                        <!-- Filoda bir gemide Destroy gerçekleştiğinde o gemi için 3 olay sırasıyla 
                            event_object_changed_owner
                            event_object_abandoned ve en sonunda da
                            event_object_destroyed gerçekleşiyor.
                        -->
                        <!-- 6.20 de 3 olaya da aynı anda trigger almıyordu
                            7.0 da check any bloğu tek birini seçmesi gerekirken 3 ünü de ayrı ayrı çağırıyor
                            bu yüzden sadece destroy kısmına odaklandık
                            player gemilere ait abandoned olayı olmayacağı için (harici bir mod olmaz ise) ele almayacağız
                            changed_owner olayı sonrasında remove gerçekleşecek bu yüzden remove içinde güncellenecek
                        -->
                        <!-- destroy 1ms beklediğinde wreck olşuyor ancak gemi bir hangarın içinde iken hangarın yokedilmesi ile patlıyorsa
                            normalde wreck oluşur ve exists dir, hangarın patlamasıyla ise wreck oluşmaz ve exists de değildir.
                            bu durumda destroy edilmiş olan bir gemi içim
                            (isreck and exists) or (not iswreck and not exists) or not isactive
                            şartı olması gerekir.
                        -->
                        <!-- onfail cancel, ve <check_value value="not $Cancelling" /> ile RFM cancel esnasında alt sublar için devreye girmeyecek -->
                        <cue name="FleetShipDestroyed_Handler" instantiate="true" comment=" * 6. Olay Sırası - 1. e çevrildi" >
                            <conditions>
                                <check_all>
                                    <event_object_destroyed group="$Subordinates"/>
                                    <check_value value="$fleetshipsByComp.{event.object}?"/>
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="1ms" comment="!!! wreck oluşması 1ms için beklendi !!! sub add ve remove ekle"/>
                            <actions>
                                <do_if value="not $Cancelling?">
                                    <!-- hangar içinde bekleyen rfm gemileri, hangarın yıkılması sonucu exists ya da active olamıyorlar -->
                                    <do_if value="not event.object.exists or @event.object.isactive == null" >
                                        <set_value name="$invalid" />
                                    </do_if>

                                    <do_if value="event.name == 'event_object_changed_owner'">
                                        <set_value name="$eventStatus" exact="'Changed Owner'"/>
                                    </do_if>
                                    <do_elseif value="event.name == 'event_object_abandoned'">
                                        <set_value name="$eventStatus" exact="'Abandoned'"/>
                                    </do_elseif>
                                    <do_else>
                                        <set_value name="$eventStatus" exact="'Destroyed'"/>
                                    </do_else>

                                    <set_value name="$isRealDestroyed" exact="false"/>
                                    <do_if value="(event.object.iswreck and event.object.exists) or (not event.object.iswreck and not event.object.exists) or not @event.object.isactive">
                                        <set_value name="$isRealDestroyed" exact="true"/>
                                    </do_if>
                                    <set_value name="$Ship_IDX" exact="$fleetshipsByComp.{event.object}"/>
                                    <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$name"/>
                                    <set_value name="$Ship_idcode" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$idcode"/>
                                    <set_value name="$macro"  exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$macro"/>
                                    <set_value name="$isship" exact="$macro.isclass.ship"/>

                                    <debug_text text="'\n
                            RFM %s %s     status %s                     \n
                    $eventStatus    = %s                    \n
                    Destroyed object= %s                    \n
                    isactive        = %s                    \n
                    exists          = %s                    \n
                    iswreck         = %s                    \n
                    isoperational   = %s           \n
                    isRealDestroyed = %s            \n
                    $fleetshipsByComp.{event.object}?   %s,   \n
                    @$fleetshipsByComp.{event.object}   %s,   \n
                    macro           = %s  $macro  = %s       \n
                    macro.class     = %s  $isship = %s      \n
                    class           = %s                    \n
                    realclass       = %s                    \n
                    $Subordinates = %s
                    '.[
                    $RFMKey, $Ship_IDX,
                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                    $eventStatus,
                    event.object, 
                    @event.object.isactive, 
                    event.object.exists,
                    event.object.iswreck,
                    event.object.isoperational,
                    if $isRealDestroyed then 'YES' else 'NO',
                    if $fleetshipsByComp.{event.object}? then 'VAR' else 'YOK', 
                    @$fleetshipsByComp.{event.object}, 
                    @event.object.macro, $macro,
                    (if @event.object.macro.isclass.ship then 'Ship' else 'Station'), (if $isship then 'Ship' else 'Station'),
                    (if event.object.isclass.ship then 'Ship' else 'Station'),
                    (if event.object.isrealclass.ship then 'Ship' else 'Station'),
                    $Subordinates
                    ]" chance="Main.$ChangesOnFleetDebug"/>

                                    
                                    <!-- promote sub destroyden önce oluşur ama filoda son gemi patlıyorsa promoted olayı olmaz -->
                                    <do_if value="$fleetshipsByIdx.keys.count == 1" >
                                        <debug_text text="' Empty PROMTOTING (The last object in RFM_%s exploded.)'.[$RFMKey]" chance="Main.$ChangesOnFleetDebug"/>
                                        <run_actions ref="PromoteToCommander">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="Commander" value="null" />
                                            <param name="oldCommander" value="event.object" />
                                        </run_actions>
                                    </do_if>

                                    <set_value name="$TopLevelCommanderDie" exact="false" />
                                    <do_if value="event.object == $RMCommander" comment="Top Commander öldü">
                                        <set_value name="$TopLevelCommanderDie" exact="true" />

                                        <set_value name="$RMCommander" exact="$PromotedCommander"/>
                                        <set_value name="$RMCommanderName" exact="if $PromotedCommander != null then Main.$FleetRecords.{$RFMKey}.{$fleetshipsByComp.{$PromotedCommander}}.$name else ''"/>
                                        <set_value name="$RMCommanderIdCode" exact="if $PromotedCommander != null then $PromotedCommander.idcode else ''"/>
                                    </do_if>

                                    <do_if value="not $isship">
                                        <!-- YAPILACAK-->
                                        <!-- ISTASYON patlarsa sublar promote olur mu?-->
                                        <!-- Olursa Promote olan gemiye sublar bağlanıp  
                                            Bulunduğu pozisyona commander için protect posizyon verilip
                                            Manager oluşturulmalı
                                        -->
                                        <!-- Olmazsa kayıtlı gemileri en büyük gemi altında defans verip
                                            Bulunduğu pozisyona commander için protect posizyon verilip
                                            Manager oluşturulmalı
                                        -->
                                        <!-- Şimdilik hiç bir şey yapmayacağız. RFM kapatılacak. -->
                                        <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
                                        <!-- 
                                        <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, 'Commander Station Destroyed' ]" />
                                        -->
                                        <cancel_cue cue="FleetShipDestroyed_Handler" />
                                    </do_if>

                                    <debug_to_file text="'RFM_%s_( %s ) DESTROYED &lt;%s&gt;, %s RFM_%s_PromotedCommander&lt;%s&gt;, Commander&lt;%s&gt;,  Destroyed Ship&lt;%s&gt;  Age: %s, %s'.[$RFMKey, $fleetshipsByComp.{event.object}, $eventStatus, player.age, $RFMKey, $PromotedCommander, $RMCommander, event.object, player.age, player.systemtime.{'%F-%X'}]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <debug_to_file text="'( %s ) DESTROYED &lt;%s&gt;, RFM_%s_PromotedCommander&lt;%s&gt;, Commander&lt;%s&gt;,  Destroyed Ship&lt;%s&gt;  Age: %s, %s'.[$fleetshipsByComp.{event.object}, $eventStatus, $RFMKey, $PromotedCommander, $RMCommander, event.object, player.age, player.systemtime.{'%F-%X'}]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                                    <do_if value="$TopLevelCommanderDie">
                                        <do_if value="$Ship_IDX == 1" comment="Gerçek fleet commander öldü">
                                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="null"/>
                                            <set_value name="$capText" exact="'\033' + 'R' + readtext.{Main.$tPage}.{6620} + ' ' + Main.$RFMTag + '_' + $RFMKey + '_ ' + readtext.{Main.$tPage}.{6570} + '\033X'" />
                                        </do_if>
                                        <do_else>
                                            <set_value name="$capText" exact="'\033' + 'O' + readtext.{Main.$tPage}.{6620} + ' ' + Main.$RFMTag + '_' + $RFMKey + '_ '+  readtext.{Main.$tPage}.{6570} + '\033X'" />
                                        </do_else>
                                    </do_if>
                                    <do_else>
                                        <set_value name="$capText" exact="'\033' + 'Y' + readtext.{Main.$tPage}.{6620} + ' ' + 'RFM' + '_' + $RFMKey + '_ ' + readtext.{Main.$tPage}.{6571} + '\033X'" />
                                    </do_else>
                                    

                                    <show_help custom="'
                %s\n\n
    %s : (%s) %s %s\n\n
    %s : %s %s\n
    %s          : %s\n
                                    '.[
                                    $capText,
                                    readtext.{Main.$tPage}.{6571}, $Ship_IDX, $Ship_Name, event.object.idcode,
                                    readtext.{Main.$tPage}.{6500}, $RMCommanderName, $RMCommanderIdCode,
                                    readtext.{Main.$tPage}.{1210}, event.object.sector.knownname
                                    ]" duration="5s" chance="if global.$upbRF_DATA.$Editing.$showhelp then 100 else 0" />
                                    <remove_value name="$capText" />

                                    <append_to_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$Ship_IDX"/>

                                    <do_if value="not $invalid?">
                                        <remove_from_group group="$Subordinates" object="event.object"  />
                                    </do_if>
                                    <!-- tablodan çıkarıyoruz, add remove olaylarında kriter olacak -->
                                    <remove_value name="$fleetshipsByIdx.{$fleetshipsByComp.{event.object}}"/>
                                    <remove_value name="$fleetshipsByComp.{event.object}"/>

                                    <run_actions ref="SetRecord_DestroyedObject">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="ShipKey" value="$Ship_IDX" />
                                    </run_actions>

                                    <run_actions ref="Check_FleetLockStatus">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>

                                    <!-- data change notification for OPEN LUA -->
                                    <include_actions ref="Set_MDDataChanged" />

                                    <!-- DEBUG MAIN-->
                                    <!-- DEBUG : RM_FLEETS File-->
                                    <run_actions ref="Debug_RM_Fleets"/>
                                    <!-- FLEET RECORD TABLE -->
                                    <run_actions ref="Debug_FleetRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="inserttext" value="''" />
                                    </run_actions>


                                    <debug_text text="'\n
                        DESTROY \n
                            %s \n
                                RFMKey : %s   \n
                                    ShipIdx: %s \n
                                    Object : &lt;%s&gt; %s %s (isWreck %s) (exists %s) (isactive %s) (isoperational %s)
                                    '.[
                                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey,
                                    $Ship_IDX,
                                    event.object, $Ship_Name, $Ship_idcode, 
                                    event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational
                                    ]" chance="Main.$ChangesOnFleetDebug"/>

                                    <set_value name="RF_Manager.$destroyedshipkey" exact="$Ship_IDX" />
                                    <set_value name="RF_Manager.$destroyedshipcommanderkey" exact="Main.$FleetRecords.{$RFMKey}.{$Ship_IDX}.$commanderidx" />

                                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$autobuild">
                                        <debug_text text="'Signalled Cue for Construct RMF_%s_(%s) &lt;%s&gt; Age:%s'.[$RFMKey, $Ship_IDX, event.object, player.age]"  chance="Main.$ChangesOnFleetDebug"/>
                                        <signal_cue_instantly cue="AddConstructonShipForFleet" param="[$RFMKey, $Ship_IDX, (if not $invalid? then event.object)]" />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'[RFM_%s].autobuild is disabled. Skipping add construct'.[$RFMKey]" chance="Main.$ChangesOnFleetDebug"/>
                                    </do_else>

                                    <remove_value name="$Ship_IDX" />
                                    <remove_value name="$Ship_Name" />
                                    <remove_value name="$Ship_idcode" />
                                    <remove_value name="$invalid" />
                                    <remove_value name="$macro" />
                                    <remove_value name="$isship" />
                                    <remove_value name="$isRealDestroyed" />
                                </do_if>
                            </actions>
                        </cue>
                        

                        <!-- Grp değişimi zaten iş görüyor -->
                        <!-- Assignment değişimine gerek kalmadı-->
                        <!-- 
                        <cue name="Changed_Assignment" instantiate="true" comment="4. Olay Sırası">
                            <conditions>
                                <check_any>
                                    <event_object_changed_assignment group="$Subordinates"/>
                                </check_any>
                            </conditions>
                            <actions>
                                <do_if value="event.param != event.object">
                                    <do_if value="$RFMKey == 1">
                                        <debug_text text="'\n
                                        ASSIGNMENT CHANGED  \n
                                        RFMKey   : %s   \n
                                        Locked : %s \n
                                        Changed Ship : %s %s %s \n
                                        Object(PlayerOrEntityOrSubOrComm): %s %s %s   \n
                                        Assignment Pre : %s , New : %s \n
                                        Groupid : %s \n
                                        '.[
                                        $RFMKey,
                                        if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'YES' else 'none',
                                        event.param, event.param.knownname, event.param.idcode,
                                        event.object, event.object.knownname, event.object.idcode,
                                        event.param2, event.param3,
                                        event.param.subordinategroupid
                                        ]" />

                                        <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="patlayan gemi var. düzen bozuk">
                                            <debug_text text="'Filo Kilitli, ATLA'" />
                                        </do_if>
                                        <do_else>
                                            <debug_text text="'Manuel Değişim yapılıyor, GÜNCELLE'" />
                                        </do_else>

                                    </do_if>
                                    <do_else>
                                        <debug_text text="'\n
                                        ASSIGNMENT CHANGED  \n
                                        RFMKey   : %s   \n
                                        Locked : %s \n
                                        Changed Ship : %s %s %s \n
                                        Object(PlayerOrEntityOrSubOrComm): %s %s %s   \n
                                        Assignment Pre : %s , New : %s \n
                                        Groupid : %s \n
                                        '.[
                                        $RFMKey,
                                        if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'YES' else 'none',
                                        event.param, event.param.knownname, event.param.idcode,
                                        event.object, event.object.knownname, event.object.idcode,
                                        event.param2, event.param3,
                                        event.param.subordinategroupid
                                        ]" />
                                    </do_else>                                
                                </do_if>
                            </actions>
                        </cue>
                        -->

                        <!-- AYNI COMMANDER içindeki değişimleri kapsar-->
                        <cue name="Changed_Subordinategroup" instantiate="true" comment="3. Olay Sırası">
                            <conditions>
                                <check_all>
                                    <event_object_changed_subordinategroup group="$Subordinates"/>
                                </check_all>
                            </conditions>
                            <actions>
                                <do_if value="event.param != event.object">

                                    <debug_text text="'\n
                        GROUP CHANGED  \n
                            %s \n
                                RFMKey : %s   (shipKeyIdx:%s) \n
                                    Changed Ship        : %s %s %s   \n
                                    Object(Sub Or Comm) : %s %s %s   \n
                                    Groupid Pre         : %s , New : %s \n
                                    Assignment          : %s 
                                    '.[
                                    if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey, @$fleetshipsByComp.{event.param},
                                    event.param, event.param.knownname, event.param.idcode,
                                    event.object, event.object.knownname, event.object.idcode,
                                    event.param2, event.param3,
                                    event.param.assignment
                                    ]"  chance="Main.$ChangesOnFleetDebug"/>

                                    <debug_text text="'Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                    <debug_text text="'Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                    <debug_text text="'re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                    <!-- groupchanged eventinde değişime uğrayan geminin commanderi değişmez
                                        (filo içinde commander değiştirerek yapılan değişimlerde de remove ve add olayları peşpeşe gerçekleşir)
                                        sadece subordinategroupid, Assignment bilgileri record tablosunda güncelleyeceğiz
                                        değişime uğrayan gemi sublarının durumu zaten kendisine bağlı olduğundan güncellemeye gerek yok.
                                    -->
                                    <set_value name="$shipKey" exact="@$fleetshipsByComp.{event.param}" />
                                    <do_if value="$shipKey" exact="null">
                                        <debug_text text="'! ? SHIPKEY NULL ? ! OLUŞURSA SEBEP TESPİT EDİLİP KODA EKLENECEK'.[]" />
                                    </do_if>
                                    <do_else>
                                        <run_actions ref="GetNameSubordinateGroupId" result="$oldsubordinategrouptext">
                                            <param name="subordinategroupid" value="event.param2" />
                                        </run_actions>
                                        <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                                            <param name="subordinategroupid" value="event.param3" />
                                        </run_actions>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$subordinategroupid" exact="event.param3" />
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$subordinategrouptext" exact="$subordinategrouptext" />
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$assignment" exact="event.param.assignment" />

                                        <!-- data change notification for OPEN LUA -->
                                        <include_actions ref="Set_MDDataChanged" />

                                        <!-- Debug-->
                                        <set_value name="$pText" exact="'( %s ) Group Changed, &lt;%s&gt; subordinategroupid Pre %s(%s) New %s(%s), Assignment %s, Commander &lt;%s&gt;  Age: %s, %s'.[$fleetshipsByComp.{event.param}, event.param, event.param2, $oldsubordinategrouptext, event.param3, $subordinategrouptext, event.param.assignment, event.object, player.age, player.systemtime.{'%F-%X'}]" />
                                        <debug_text text="'%s'.[$pText]" chance="Main.$ChangesOnFleetDebug"/>
                                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <!-- FLEET RECORD TABLE -->
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="'Last entry is ' + $pText" />
                                        </run_actions>
                                        <remove_value name="$pText" />
                                        <remove_value name="$shipKey" />
                                        <remove_value name="$oldsubordinategrouptext" />
                                        <remove_value name="$subordinategrouptext" />
                                        
                                    </do_else>
                                </do_if>
                            </actions>                        
                        </cue>

                        <!-- Patlama ve Üretim esnasında filo düzeni değişiyor -->
                        <!-- ADD-->
                        <cue name="Subordinate_Added" instantiate="true" comment="2. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_added group="$Subordinates"/>
                                    <check_value value="not event.param.macro.isunit and not event.param.macro.isclass.ship_xs" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="2ms" comment="+1ms destroy delay den sonra oluşması için"/>
                            <actions>

                                <do_if value="not $Cancelling?">
                                    <run_actions ref="GetNameSubordinateGroupId" result="$grpname">
                                        <param name="subordinategroupid" value="event.param.subordinategroupid" />
                                    </run_actions>
    
                                    <debug_text text="'\n
                        ADDED  \n
                            status %s   \n
                                RFMKey : %s   [table idx : %s] \n
                                    is the added ship is a RFM command ship? : %s \n
                                    RFM Cancelling?   %s  \n
                                    Added Ship     [param]  : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                    New Commander  [object] : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s     \n
                                    Assignment New [param2] : %s  \n
                                    Groupid                 : %s (%s)
                                    '.[
                                    if @Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                    $RFMKey, @$fleetshipsByComp.{event.param},
                                    if $this_rfm_connects_to_other_rfm gt 0 then 'Yes (' + $this_rfm_connects_to_other_rfm  + ' connect to ' + $RFMKey + ')'  else 'No',
                                    (if $Cancelling? then 'YES' else 'no'),
                                    event.param.iswreck, event.param.exists, @event.param.isactive, event.param.isoperational,
                                    event.param, event.param.knownname, event.param.idcode, 
                                    event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                    event.object, event.object.knownname, event.object.idcode, 
                                    event.param2,
                                    event.param.subordinategroupid, $grpname
                                    ]"  chance="Main.$ChangesOnFleetDebug"/>
    
                                    <do_if value="$this_rfm_connects_to_other_rfm gt 0" comment="Başka bir RFM Bağlanıyor">
                                        <debug_text text="' Filo DIŞIndan  RFM  Ekleme'" chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$newF_RMCommander" exact="@event.object.fleet.commander" />
                                        <do_if value="@event.object.fleet.iscommander or $newF_RMCommander == null">
                                            <set_value name="$newF_RMCommander" exact="event.object" />
                                        </do_if>
                                        
                                        <!-- Eski fleet commander şuanda zaten yeni filoya bağlı durumda -->
                                        <!-- 
                                        <do_if value="event.param.isclass.ship">
                                            <set_value name="$oldF_RMCommander" exact="event.param.fleet.commander" />
                                            <do_if value="event.param.fleet.iscommander or $oldF_RMCommander == null">
                                                <set_value name="$oldF_RMCommander" exact="event.param" />
                                            </do_if>
                                        </do_if>
                                        -->
    
                                        <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet">
                                            <debug_text text="'  C1 Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'  C1 Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <do_else>
                                            <debug_text text="'  C1 Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_else>
    
                                        <do_if value="Main.$RM_Fleets.{$this_rfm_connects_to_other_rfm}.$isLockedFleet">
                                            <debug_text text="'  A1 Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'  A1 Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$this_rfm_connects_to_other_rfm}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <do_else>
                                            <debug_text text="'  A1 Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_else>
                                        <!-- Sadece RFM RFM ye bağlanırken NewCommanderSet olayı ile buraya gelinir. -->
                                        <!-- A Fleet (promoted durumunda da olsa) olduğu gibi gibi C de bağlandığı gemi altına bağlanacak-->
                                        <run_actions ref="SpecAdd3_ApplyRecorFleet">
                                            <param name="RMCommander" value="$newF_RMCommander" />
                                            <param name="Commander" value="event.object" />
                                            <param name="ship" value="event.param" />
                                            <param name="C_RFMKey" value="$RFMKey" />
                                            <param name="A_RFMKey" value="$this_rfm_connects_to_other_rfm" />
                                        </run_actions>
                                        <set_value name="$this_rfm_connects_to_other_rfm" exact="0"/>
                                        <remove_value name="$newF_RMCommander" />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="' No DUAL RFM Connect'" chance="Main.$ChangesOnFleetDebug"/>
                                        <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="Filo Kilitli. düzen bozuk">
                                            <debug_text text="'  GÜNCELLE, Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'  Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'  Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'  re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                            <set_value name="$check_SpecAdd"  />
                                        </do_if>
                                        <do_else>
                                            <debug_text text="'  GÜNCELLE, Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                            <do_if value="$Subordinates.indexof.{event.param} == 0">
                                                <set_value name="$check_SpecAdd"  />
                                                <debug_text text="'   SPEC GÜNCELLE. Filo DIŞIndan Normal Ekleme.'"  chance="Main.$ChangesOnFleetDebug"/>
                                            </do_if>
                                            <do_else>
                                                <do_if value="@$takedControl == event.param">
                                                    <remove_value name="$takedControl" />
                                                    <debug_text text="'   ATLA. Player gemi kontrolünü terketti.'"  chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_elseif value="event.param == $PromotedCommander" >
                                                    <set_value name="$changedCommander" exact="event.object" comment="sub remove olayında değişken silinecek "/>
                                                    <set_value name="$RMCommander" exact="$changedCommander" />
                                                    
                                                    <debug_text text="'event.object.class = %s'.[event.object.class]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'event.object.fleet.iscommander = %s'.[@event.object.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'event.object.fleet.commander = %s'.[@event.object.fleet.commander]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$fleetCommander" exact="event.object" />
                                                    <do_if value="event.object.isclass.ship">
                                                        <set_value name="$fleetCommander" exact="event.object.fleet.commander" />
                                                        <do_if value="event.object.fleet.iscommander or $fleetCommander == null">
                                                            <set_value name="$fleetCommander" exact="event.object" />
                                                        </do_if>
                                                    </do_if>
                                                    <debug_text text="'fleet.commander = (%s) %s  isFleetCommander %s'.[@$fleetCommander, @$fleetCommander.name, @$fleetCommander.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                
                                                    <set_value name="$RMCommander" exact="$fleetCommander" />
                                                                
                                                    <do_if value="$changedCommander?">
                                                        <run_actions ref="PromoteToCommander">
                                                            <param name="RFMKey" value="$RFMKey" />
                                                            <param name="Commander" value="$fleetCommander" />
                                                            <param name="oldCommander" value="event.param" />
                                                        </run_actions>
                                                        <debug_text text="'Promote edildi .. %s'.[$PromotedCommander]"  chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_if>
                                                    <remove_value name="$fleetCommander" />
    
                                                    <!-- Debug ?-->
    
                                                    <debug_text text="'   ? GÜNCELLECEK Mİ ?. Promoted Commander Değiştik.'.[]"  />
                                                </do_elseif>
                                                <do_else>
                                                    <debug_text text="'   Üretilen gemi bağlanıldı. Reassign Filo İçinden Ekleme.'"  chance="Main.$ChangesOnFleetDebug"/>
                                                    <set_value name="$check_SpecAdd" />
                                                </do_else>
                                            </do_else>
                                        </do_else>
                                    </do_else>
    
                                    <do_if value="$reCreateFleetRecord?">
                                        <remove_value name="$reCreateFleetRecord" />
                                        <!-- DEBUG -->
                                        <assert value="@$fleetshipsByComp.{event.param} != null" text="'fleetshipsByComp.{event.param} : ' + @$fleetshipsByComp.{event.param}"/>
                                        <set_value name="$pText" exact="'( %s ) Fleet Record Changed (Add) &lt;%s&gt; subordinategroupid %s(%s), Assignment %s, new Commander &lt;%s&gt;  Age: %s, %s'.[@$fleetshipsByComp.{event.param}, event.param, event.param.subordinategroupid, $grpname, event.param2, $fleetCommander, player.age, player.systemtime.{'%F-%X'}]" />
                                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <!-- FLEET RECORD TABLE -->
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="'Last entry is ' + $pText" />
                                        </run_actions>
                                        <remove_value name="$pText" />
                                        <remove_value name="$fleetCommander" />
                                    </do_if>
    
                                    <do_if value="$check_SpecAdd?" comment="ATLA Durumu için özel güncelleme var mı">
                                        <do_if value="$reAssignedShips.indexof.{event.param}" comment="Üretim">
                                            <remove_from_list name="$reAssignedShips" exact="event.param" />
                                            <set_value name="$isSubShipBuilded" exact="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$fleetshipsByComp.{event.param}}"/>
                                            <set_value name="$isRMCommanderBuilded" exact="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$fleetshipsByComp.{event.object}}"/>
                                            <do_if value="$isSubShipBuilded">
                                                <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$fleetshipsByComp.{event.param}" />
                                                <debug_text text="'   updated Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="'   updated re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                <debug_text text="'   ATLA. Üretilen geminin kendisi dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                            </do_if>
                                            <do_else>
                                                <do_if value="$isRMCommanderBuilded">
                                                    <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$fleetshipsByComp.{event.object}" />
                                                    <debug_text text="'   updated Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   updated re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   ATLA. Filo Commanderi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_else>
                                                    <debug_text text="'   updated Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   updated re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                                    <debug_text text="'   ATLA. Filodaki bir gemi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                </do_else>
                                            </do_else>
                                            <do_if value="$reAssignedShips.count == 0">
                                                <debug_text text="'   All Assignment Orders COMPLETED.'" chance="Main.$ChangesOnFleetDebug"/>
                                                <run_actions ref="Check_FleetLockStatus">
                                                    <param name="RFMKey" value="$RFMKey" />
                                                </run_actions>
                                                <!-- data change notification for OPEN LUA -->
                                                <include_actions ref="Set_MDDataChanged" />
                                            </do_if>
                                            <remove_value name="$isSubShipBuilded" />
                                            <remove_value name="$isRMCommanderBuilded" />
                                        </do_if>
                                        <do_elseif value="$RemoveProcessShipKeys.indexof.{@$fleetshipsByComp.{event.param}}" comment="Patlama Olayları">
                                            <remove_from_list name="$RemoveProcessShipKeys" exact="$fleetshipsByComp.{event.param}" />
                                            <debug_text text="'   updated Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                            <debug_text text="'   ATLA. Patlamadan dolayı yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                            <set_value name="$addedshipkey" exact="$fleetshipsByComp.{event.param}" />
                                            <set_value name="$addednewcommanderkey" exact="$fleetshipsByComp.{event.object}" />
                                            <!-- Özel durum trader, miner, salvager görevi devralma -->
                                            <do_if value="$destroyedshipcommanderkey?">
                                                <debug_text text="'   destroyedshipkey = %s , destroyedshipcommanderkey = %s , addedshipkey = %s, addednewcommanderkey = %s'.[$destroyedshipkey, $destroyedshipcommanderkey, $addedshipkey, $addednewcommanderkey]" chance="Main.$ChangesOnFleetDebug"/>
                                                <!-- sublardan biri patlayan komutanının görevini devralıyor-->
                                                <do_if value="$addednewcommanderkey == $destroyedshipcommanderkey">
                                                    <debug_text text="'     sub [%s], patlayan komutanının[%s] yerine yeni commander oluyor..'.[$addedshipkey, $destroyedshipkey]" chance="Main.$ChangesOnFleetDebug"/>    
                                                    <!-- patlayan geminin order bilgisi trader, miner veya salvager ise warebasket listesini de yeni commandere ekle ancak kaydı güncellemeyceğiz-->
                                                    <do_if value="Main.$FleetRecords.{$RFMKey}.{$destroyedshipkey}.$defaultorder?">
                                                        <run_actions ref="Add_OrderTable_To_Ship">
                                                            <param name="orderT" value="Main.$FleetRecords.{$RFMKey}.{$destroyedshipkey}.$defaultorder" />
                                                            <param name="ship" value="event.param" />
                                                        </run_actions>
                                                        <debug_text text="'     sub [%s], patlayan komutanının[%s] order bilgisini aldı..'.[$addedshipkey, $destroyedshipkey]" chance="Main.$ChangesOnFleetDebug"/>    
                                                    </do_if>
                                                    <remove_value name="$addedshipkey" />
                                                    <remove_value name="$addednewcommanderkey" />
                                                    <remove_value name="$destroyedshipkey" />
                                                    <remove_value name="$destroyedshipcommanderkey" />
                                                </do_if>
                                            </do_if>
                                        </do_elseif>
                                        <do_else>
                                            <debug_text text="'   SPECADD. Kullanıcı ekleme yapıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                            <run_actions ref="SpecAdd_ApplyRecorFleet">
                                                <param name="RFMKey" value="$RFMKey" />
                                                <param name="ship" value="event.param" />
                                            </run_actions>
                                            <debug_text text="'   SPECADD. Fleet Record Güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_else>
                                    </do_if>
                                    <remove_value name="$check_SpecAdd" />
    
                                </do_if>
                            </actions>
                        </cue>
                        
                        <!-- REMOVE-->
                        <cue name="Subordinate_Removed" instantiate="true" comment="1. Olay Sırası" >
                            <conditions>
                                <check_all>
                                    <event_object_subordinate_removed group="$Subordinates" />
                                    <check_value value="not event.param.macro.isunit and not event.param.macro.isclass.ship_xs" />
                                    <check_value value="not $Cancelling?" />
                                </check_all>
                            </conditions>
                            <delay exact="2ms" comment="+1ms destroy delay den sonra oluşması için"/>
                            <actions>
                                <do_if value="not $Cancelling?">
                                    <!-- hangar içinde bekleyen rfm gemileri, hangarın yıkılması sonucu exists ya da active olamıyorlar 
                                     not event.param.exists or 
                                    -->
                                    <do_if value="@event.param.isactive == null" >
                                        <set_value name="$invalid" />
                                    </do_if>

                                    <debug_text text="'\n
                                    REMOVED  \n
                                        %s   \n
                                            RFMKey : %s   [table idx : %s] \n
                                                %s \n
                                                RFM Cancelling?    %s  \n
                                                Removed Ship param  : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                Object (Old Comm)   : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                Old Commander       : (isWreck %s) (exists %s) (isactive %s) (isoperational %s) %s %s %s    \n
                                                '.[
                                                if @Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                                $RFMKey, @$fleetshipsByComp.{event.param}, 
                                                if $Subordinates.indexof.{event.param} then 'Subordinates() İÇİNDE' else 'Subordinates() DIŞINDA',
                                                (if $Cancelling? then 'YES' else 'no'),
                                                event.param.iswreck, event.param.exists, @event.param.isactive, event.param.isoperational,
                                                event.param, if not $invalid? then event.param.knownname else '(invalid)', if not $invalid? then event.param.idcode else '', 
                                                event.object.iswreck, event.object.exists, @event.object.isactive, event.object.isoperational,
                                                event.object, event.object.knownname , event.object.idcode,
                                                event.param2.iswreck, event.param2.exists, @event.param2.isactive, event.param2.isoperational,
                                                @event.param2, event.param2.knownname, @event.param2.idcode
                                                ]"  chance="Main.$ChangesOnFleetDebug"/>
                
                                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" comment="patlayan gemi var. Düzen bozuk">
                                        <!-- filo kitlendiği için manuel remove durumu için özel bir güncelleme yapılacak-->
                                        <debug_text text="' Destroyed Ship Keys:%s'.[Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                        <debug_text text="' Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                        <debug_text text="' re Assigned Ships:%s'.[$reAssignedShips]" chance="Main.$ChangesOnFleetDebug"/>
                                        <debug_text text="' Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$specRemove"  />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="'Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <do_if value="event.param.pilot == player.entity">
                                            <set_value name="$takedControl" exact="event.param" />
                                            <debug_text text="' ATLA. İçerdeki gemiyi Player kontrole aldı.'"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <do_elseif value="event.param == @$changedCommander">
                                            <remove_value name="$changedCommander" />
                                            <debug_text text="' ATLA. Promote den dolayı Commander değişti. Add olayı içinde ele alındı..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        </do_elseif>
                                        <do_else>
                                            <debug_text text="' GÜNCELLE. İÇerdeki bir gemi remove edildi.'"  chance="Main.$ChangesOnFleetDebug"/>
                                            <set_value name="$removeFleetRecord"  />
                                        </do_else>
                                    </do_else>
                                    
                                    <!-- filo kilit açıkken manuel çıkartılıyor demektir. patlamadan dolayı değil -->
                                    <do_if value="$removeFleetRecord?">
                                        <remove_value name="$removeFleetRecord" />
                                        
                                        <set_value name="$rShip" exact="event.param" />
                                        <set_value name="$rShipKey" exact="@$fleetshipsByComp.{$rShip}"/>
                                        <set_value name="$rShipName" exact="@Main.$FleetRecords.{$RFMKey}.{$rShipKey}.$name"/>
                                        
                                        <!-- Gemiyi ve sub gemilerini kayıtlardan sil-->
                                        <!-- Geminin kayıtlarını sil-->
                                        <set_value name="$pText" exact="'( %s ) Fleet Record Changed (Removed &lt;%s&gt; %s from Commander &lt;%s&gt; )  Age: %s, %s'
                                        .[$rShipKey, $rShip, $rShipName, event.object, player.age, player.systemtime.{'%F-%X'}]" />
                                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <debug_text text="'  %s'.[$pText]"  chance="Main.$ChangesOnFleetDebug"/>
                                        <remove_from_group group="$Subordinates" object="$rShip"/>
                                        <remove_value name="$fleetshipsByIdx.{$fleetshipsByComp.{$rShip}}"/>
                                        <remove_value name="$fleetshipsByComp.{$rShip}"/>
                                        <remove_value name="Main.$FleetRecords.{$RFMKey}.{$rShipKey}" />
                                        <remove_value name="Main.$Loadouts.{$RFMKey}.{$rShipKey}" />
                                        <!-- Sub gemiler için kayıotlar silinecek-->
                                        <do_for_each name="$sub" in="$rShip.allsubordinates">
                                            <do_if value="not $sub.isunit and not $sub.isclass.ship_xs">
                                                <set_value name="$sShipKey" exact="$fleetshipsByComp.{$sub}"/>
                                                <set_value name="$sShipName" exact="@Main.$FleetRecords.{$RFMKey}.{$sShipKey}.$name"/>
                                                
                                                <set_value name="$pText" exact="'( %s ) Fleet Record Changed ( Removed Sub &lt;%s&gt; %s )'.[$sShipKey, $sub, $sShipName]" />
                                                <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                                <debug_to_file text="'  ' + $pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                                <debug_text text="'    %s'.[$pText]"  chance="Main.$ChangesOnFleetDebug"/>
    
                                                <remove_from_group group="$Subordinates" object="$sub"/>
                                                <remove_value name="$fleetshipsByIdx.{$sShipKey}"/>
                                                <remove_value name="$fleetshipsByComp.{$sub}"/>
                                                <remove_value name="Main.$FleetRecords.{$RFMKey}.{$sShipKey}" />
                                                <remove_value name="Main.$Loadouts.{$RFMKey}.{$sShipKey}" />
    
                                                <remove_value name="$sShipKey" />
                                                <remove_value name="$sShipName" />
                                            </do_if>
                                        </do_for_each>
    
                                        <debug_text text="'  Fleet Record güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
    
                                        <!-- data change notification for OPEN LUA -->
                                        <include_actions ref="Set_MDDataChanged" />
    
                                        <!-- FLEET RECORD TABLE -->
                                        <run_actions ref="Debug_FleetRecord">
                                            <param name="RFMKey" value="$RFMKey" />
                                            <param name="inserttext" value="'Last entry is ' + $pText" />
                                        </run_actions>
                                        
                                        <remove_value name="$pText" />
                                        <remove_value name="$rShip" />
                                        <remove_value name="$rShipKey" />
                                        <remove_value name="$rShipName" />
                                        <remove_value name="$invalid" />
        
                                    </do_if>
                                    
                                    <!-- Filo kilit kapalı olduğu için çıkarılan gemi neden çıkarıldığı aranıyor -->
                                    <do_if value="$specRemove?">
                                        <!-- üretilen geminin bağlanma işleri-->
                                        <do_if value="$reAssignedShips.indexof.{event.param}">
                                            <debug_text text="'  ATLA. Filodaki bir gemi üretilip dahil edildiği için düzenleme alıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                        </do_if>
                                        <!-- filo kilitli iken patlama mı yoksa manuel çıkarma mı? -->
                                        <!-- patlamadan dolayı filo yapısı otomotaik değişir -->
                                        <do_else>
                                            <!-- destroy olayı önce oluştuğuna göre, destroy içinde gemiyi tabloadan çıkarmıştık -->
                                             <!-- gemi istasyon içinde yıkımdan dolayı ölmüş ise wreck oluşmaz ama active de değildir.-->
                                            <do_if value="@$fleetshipsByComp.{event.param} == null">
                                                <set_value name="$isRealDestroyed" exact="false"/>
                                                <do_if value="(event.param.iswreck and event.param.exists) or (not event.param.iswreck and not event.param.exists) or not @event.param.isactive">
                                                    <set_value name="$isRealDestroyed" exact="true"/>
                                                </do_if>
                                                <do_if value="$isRealDestroyed" >
                                                    <debug_text text="'  ATLA. Patalyan gemi kendisi olduğu için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                </do_if>
                                                <do_else>
                                                    <debug_text text="'  ?? SPEC REMOVE GÜNCELLE ??. Filoda kaydedilmemiş bir gemi. !!! Bu satıra uğrar mı? .!!! '" />
                                                </do_else>
                                            </do_if>
                                            <!-- tabloda bulunduğuna göre (add remove) otomatik filo yapısı değişiyor -->
                                            <do_else>
                                                <!-- komutanı öldüğü için promoted ve otomatik filo yapsı değişiyordur
                                                    bir şey yapmayacağız -->
                                                <set_value name="$isRealDestroyed" exact="false"/>
                                                <do_if value="(event.object.iswreck and event.object.exists) or (not event.object.iswreck and not event.object.exists) or not @event.object.isactive">
                                                    <set_value name="$isRealDestroyed" exact="true"/>
                                                </do_if>
                    
                                                <do_if value="$isRealDestroyed" >
                                                    <!-- remove edilmeye çalışılan promoted değeri almış mı-->
                                                    <do_if value="event.param == $PromotedCommander">
                                                        <debug_text text="'  ATLA. Filodaki bir gemi. Promote olduğu için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_if>
                                                    <do_else>
                                                        <append_to_list name="$RemoveProcessShipKeys" exact="$fleetshipsByComp.{event.param}"/>
                                                        <debug_text text="'updated Remove Process Ship Keys:%s'.[$RemoveProcessShipKeys]" chance="Main.$ChangesOnFleetDebug"/>
                                                        <debug_text text="'  ATLA. Filodaki bir gemi. Commanderi patladığı için yeni düzenleme yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    </do_else>
                                                </do_if>
                                                <!-- remove edilen geminin komutanı yaşıyorsa manuel çıkarımak isteniyordur -->
                                                <do_else>
                                                    <debug_text text="'  SPEC GÜNCELLE. Filodaki bir gemi. Kullanıcı tarafından remove dildi.'" chance="Main.$ChangesOnFleetDebug"/>
                                                    <run_actions ref="SpecRemove_ApplyRecorFleet">
                                                        <param name="RFMKey" value="$RFMKey" />
                                                        <param name="ship" value="event.param" />
                                                    </run_actions>
                                                    <debug_text text="'  Fleet Record Güncellendi (SpecRemove)..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                                </do_else>
                                            </do_else>
                                        </do_else>
                                    </do_if>
                                    <remove_value name="$specRemove" />

                                </do_if>
                            </actions>
                        </cue>
                        
                        <cue name="NewCommanderSet" instantiate="true">
                            <conditions>
                                <check_all>
                                    <event_object_commander_set group="$Promoted"/>
                                </check_all>
                            </conditions>
                            <actions>
                                <debug_text text="'\n
                    NEW COMMANDER SET  \n
                        %s   \n
                            RFMKey : %s   (idx:%s)      ( %s ) \n
                                object (Promoted Ship)  : %s %s %s (isWreck %s) \n
                                param  (New Comm)       : %s %s %s (isWreck %s)   ( %s )\n
                                param2 (Old Comm)       : %s %s %s (isWreck %s) \n
                                param3 (new Assign)     : %s
                                '.[
                                if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'LOCKED' else 'open',
                                $RFMKey, @$fleetshipsByComp.{event.object},
                                if $Subordinates.indexof.{event.object} then 'Filo İÇİNDE' else 'Filo DIŞINDA',
                                event.object, event.object.knownname, event.object.idcode, event.object.iswreck, 
                                event.param, event.param.knownname, event.param.idcode, event.param.iswreck, 
                                if $Subordinates.indexof.{event.param} then '! ! ! Filo İÇİNDE ! ! !' else 'Filo DIŞINDA',
                                @event.param2, @event.param2.knownname, @event.param2.idcode, @event.param2.iswreck,
                                event.param3
                                ]"  chance="Main.$ChangesOnFleetDebug"/>
                                
                                <do_if value="$Subordinates.indexof.{event.param} and $Subordinates.indexof.{event.object}">
                                    <debug_text text="'Has a circular commander structure, cancelling cue'.[]" />
                                    <cancel_cue cue="this" />
                                </do_if>

                                <debug_text text="' event.param.class = %s'.[event.param.class]" chance="Main.$ChangesOnFleetDebug"/>
                                <debug_text text="' event.param.fleet.iscommander = %s'.[@event.param.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>
                                <debug_text text="' event.param.fleet.commander = %s'.[@event.param.fleet.commander]" chance="Main.$ChangesOnFleetDebug"/>
                                <set_value name="$new_RMCommander" exact="event.param" />
                                <do_if value="event.param.isclass.ship">
                                    <set_value name="$new_RMCommander" exact="event.param.fleet.commander" />
                                    <do_if value="event.param.fleet.iscommander or $new_RMCommander == null">
                                        <set_value name="$new_RMCommander" exact="event.param" />
                                    </do_if>
                                </do_if>
                                <debug_text text="' new RMCommander = (%s) %s  isFleetCommander %s'.[@$new_RMCommander, @$new_RMCommander.name, @$new_RMCommander.fleet.iscommander]" chance="Main.$ChangesOnFleetDebug"/>

                                <run_actions ref="Get_RFMKey_From_ShipObject" result="$new_RFMKey">
                                    <param name="ship" value="$new_RMCommander" />
                                </run_actions>

                                <do_if value="$new_RFMKey gt 0" comment="RFM ye bağlanılıyor">
                                    <debug_text text="' &lt;%s&gt;(%s %s), RFM Commandera &lt;%s&gt;(%s %s) Bağlandı.'
                                    .[$PromotedCommander, $PromotedCommander.idcode, $PromotedCommander.name, $new_RMCommander, $new_RMCommander.idcode, $new_RMCommander.name]" chance="Main.$ChangesOnFleetDebug"/>
                                    <set_value name="$new_RFMCue" exact="Main.$RM_Fleets.{$new_RFMKey}.$cue" />
                                    <set_value name="$new_RFMCue.$this_rfm_connects_to_other_rfm" exact="$RFMKey" />
                                    <debug_text text="' ATLA, yeni RFMnin Add olayında SPECADD 3 ele alacak..'"  chance="Main.$ChangesOnFleetDebug"/>
                                    <remove_value name="$new_RFMCue" />
                                </do_if>
                                <do_else>
                                    <debug_text text="' &lt;%s&gt;(%s %s), RFM Olmayan Commandera &lt;%s&gt;(%s %s) Bağlandı.'
                                    .[$PromotedCommander, $PromotedCommander.idcode, $PromotedCommander.name, $new_RMCommander, $new_RMCommander.idcode, $new_RMCommander.name]" chance="Main.$ChangesOnFleetDebug"/>
                                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet">
                                        <debug_text text="' GÜNCELLE, Eski Filo Kilitli..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$specAdd2"  />
                                    </do_if>
                                    <do_else>
                                        <debug_text text="' GÜNCELLE, Eski Filo Açık..'"  chance="Main.$ChangesOnFleetDebug"/>
                                        <set_value name="$specAdd2"  />
                                    </do_else>
                                </do_else>
                                
                                
                                <debug_text text="'\n
                                new RM Commander : &lt;%s&gt; %s %s  \n
                                is RFM Commander : %s  (RFMKey : %s)
                                '.[
                                $new_RMCommander, $new_RMCommander.knownname, $new_RMCommander.idcode,
                                if $new_RFMKey > 0 then 'YES' else 'NO',
                                if $new_RFMKey? then $new_RFMKey  else 'none'
                                ]"  chance="Main.$ChangesOnFleetDebug"/>
                                <remove_value name="$new_RFMKey" />

                                <do_if value="$specAdd2?">
                                    <debug_text text="'  SPECADD 2. Kullanıcı ekleme yapıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                                    <run_actions ref="SpecAdd2_ApplyRecorFleet">
                                        <param name="RFMKey" value="$RFMKey" />
                                        <param name="RMCommander" value="$new_RMCommander" />
                                        <param name="Commander" value="event.param" />
                                        <param name="oldCommander" value="event.object" />
                                    </run_actions>
                                    <debug_text text="'  SPECADD 2 GÜNCELLE. Fleet Record güncellendi ..'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                                </do_if>

                                <remove_value name="$specAdd2" />
                                <remove_value name="$new_RMCommander" />
                                
                            </actions>
                        </cue>
                    </cues>
                </cue>

            </cues>
        </cue>



        <library name="SetRecord_DestroyedObject" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
            </params>
            <actions>
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="null"/>
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="''"/>
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyed" exact="true"/>
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$destroyedtime" exact="player.age"/>
            </actions>
        </library>


        <!-- YAPILACAK -->
        <!-- RFM_A RFM_C ye bağlanıyor -->
        <library name="SpecAdd3_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RMCommander"   comment="C fleetcommander"/>
                <param name="Commander"     comment="C ye Bağlanılan gemi"/>
                <param name="ship"          comment="A daki bağlanan gemi"/>
                <param name="C_RFMKey"      comment="C RFM"/>
                <param name="A_RFMKey"      comment="A RFM"/>
            </params>
            <actions>

                <do_if value="$C_RFMKey gt 0 and $A_RFMKey gt 0">

                    <set_value name="$C_RFMCue" exact="Main.$RM_Fleets.{$C_RFMKey}.$cue" />
                    <set_value name="$A_RFMCue" exact="Main.$RM_Fleets.{$A_RFMKey}.$cue" />
                    <set_value name="$A_FleetRecords" exact="Main.$FleetRecords.{$A_RFMKey}" />
                    <set_value name="$A_Loadouts" exact="Main.$Loadouts.{$A_RFMKey}" />
                    <set_value name="$A_RebuildCues" exact="Main.$RebuildCues.{$A_RFMKey}" />

                    <!-- 
                    <include_actions ref="Let_RFM_LogFileNames" />
                    -->
                    <do_if value="Main.$RM_Fleets.{$A_RFMKey}.$isLockedFleet">
                        <debug_text text="'Dikkat !!! RFM_%s Filoda kayıp gemiler var. Bu gemiler yeni kayda aktarılmayacak.'.[$A_RFMKey]" chance="Main.$ChangesOnFleetDebug"/>    
                    </do_if>
                    <substitute_text text="$endBy" source="Main.$RMShipCaptionTag">
                        <replace string="'$KEY$'" with="$C_RFMKey" />
                    </substitute_text>
                    <set_value name="$endBy" exact="'Added to %sFleet.'.[$endBy]"/>
                    
                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
                    <signal_cue_instantly cue="Disable__RFM" param="[ $A_RFMKey, $endBy ]" />

                    <debug_text text="'Kayıplar aktarılmadan kapatıldı. Disabled Fleet %s %s'.[$A_RFMKey, $endBy]" chance="Main.$ChangesOnFleetDebug"/>

                    <debug_text text="'SPEC GÜNCELLE Yapılıyor.'" chance="Main.$ChangesOnFleetDebug"/>
                    <run_actions ref="SpecAdd_ApplyRecorFleet">
                        <param name="RFMKey" value="$C_RFMKey" />
                        <param name="ship" value="$ship" />
                    </run_actions>
                    <debug_text text="'SPEC GÜNCELLE. Fleet %s Record Güncellendi ..'.[$C_RFMKey]"  chance="Main.$ChangesOnFleetDebug"/>


                </do_if>
                <do_else>
                    <debug_text text="'WRONG CODE SpecAdd3 uygunsuz RFM. C_RFMKey %s , A_RFMKey %s'.[$C_RFMKey, $A_RFMKey]" />
                </do_else>
            </actions>
        </library>


        <!-- RFM olan bir Commandera dışardan bir fleet ya da gemi eklendi.
            ?Eklenen Fleet, RFM de olabilir. 
                SPECADD3 yazılmalı ?RFM ise mevcut gemi aktarımını kayıttan yaparken patlayan gemiler de dahil commanderidx ler düzenlenmeli (SPECADD2 deki gibi) 
                    ?İŞlem bitince Eski RFM ye ait kayıt ve cue ler temizlenecek
        -->
        <library name="SpecAdd_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
            </params>
            <actions>
                <!-- Add olayı için gelindi. 
                        FleetRecors yapısında ilk boş shipkey bulunarak ship ve altındaki gemiler FleetRecors a eklenecek.
                        Boş kayıt yoksa kaydın sonuna eklenecek
                 -->
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <set_value name="$addShipsByKeys" exact="table[]" />
                <set_value name="$rShip" exact="$ship" />

                <!-- Gelen Fleet ya da ship Eklenecek -->
                <!-- Gelen Filodaki Ship (kendisi commander de olabilir) RFMcue nin HeaderDatasına ekleme yapılacak-->
                <run_actions ref="Get_FirstFreeShipKey_From_FleetRecord" result="$shipKey">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                </run_actions>
               
                <debug_text text="'%s &lt;%s&gt; Eklenecek, Yeni Ship Key %s
                '.[
                if $rShip.allsubordinates.count gt 0 then 'Commander' else 'Ship',
                $rShip,
                $shipKey
                ]" chance="Main.$ChangesOnFleetDebug"/>

                <set_value name="$RFMCue.$fleetshipsByComp.{$rShip}" exact="$shipKey" />
                <set_value name="$RFMCue.$fleetshipsByIdx.{$shipKey}" exact="$rShip" />
                <add_to_group groupname="$RFMCue.$Subordinates" object="$rShip"  />
                <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}" exact="table[]"/>

                <set_value name="$addShipsByKeys.{$shipKey}" exact="$rShip" />
                
                 <!-- Gelen Shipe bağlı Sub gemiler için RFMcue nin HeaderDatasına ekleme yapılacak -->
                <do_for_each name="$sub" in="$rShip.allsubordinates">
                    <do_if value="not $sub.isunit and not $sub.isclass.ship_xs">
                        <run_actions ref="Get_FirstFreeShipKey_From_FleetRecord" result="$shipKey">
                            <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                        </run_actions>
                        <debug_text text="'Sub %s Eklenecek, Yeni Ship Key %s'.[$sub, $shipKey]" chance="Main.$ChangesOnFleetDebug"/>

                        <set_value name="$RFMCue.$fleetshipsByComp.{$sub}" exact="$shipKey" />
                        <set_value name="$RFMCue.$fleetshipsByIdx.{$shipKey}" exact="$sub" />
                        <add_to_group groupname="$RFMCue.$Subordinates" object="$sub"  />
                        <!-- $FleetRecords.{$RFMKey}.{$shipKey} daha sonra dolduracağız-->
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}" exact="table[]"/>

                        <set_value name="$addShipsByKeys.{$shipKey}" exact="$sub" />
                    </do_if>
                </do_for_each>

                <include_actions ref="Let_RFM_LogFileNames" />

                <debug_text text="'$addShipsByKeys.keys.list = %s'.[$addShipsByKeys.keys.list]" chance="Main.$ChangesOnFleetDebug"/>

                <!-- Eklenen gemileri record tablosuna işle -->
                <do_for_each name="$shipKey" in="$addShipsByKeys.keys.list"  >
                    <set_value name="$rShip" exact="$addShipsByKeys.{$shipKey}" />
                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$rShip" />
                    </run_actions>
                    
                    <run_actions ref="Set_ShipPropertiesToFleetRec">
                        <param name="FleetRec" value="Main.$FleetRecords.{$RFMKey}.{$shipKey}" />
                        <param name="Ship" value="$rShip" />
                        <param name="ShipKey" value="$shipKey" />
                        <param name="name" value="$name" />
                        <param name="commanderidx" value="if $rShip.commander then $RFMCue.$fleetshipsByComp.{$rShip.commander} else -1" />
                    </run_actions>

                    <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                        <param name="Ship" value="$rShip"/>
                    </run_actions>

                    <set_value name="Main.$Loadouts.{$RFMKey}.{$shipKey}" exact="$NewLoadout.{1}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tWare" exact="$NewLoadout.{2}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tPilot" exact="$NewLoadout.{3}"/>
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$tBulkCrew" exact="$NewLoadout.{4}"/>


                    <do_if value="not $PlanData?">
                        <create_list name="$PlanData" />
                    </do_if>
                    <run_actions ref="AppendTo_PlanData" >
                        <param name="RFMKey"    value="$RFMKey" />
                        <param name="ShipKey"   value="$shipKey"/>
                        <param name="Object"        value="$rShip"/>
                        <param name="issupplyship"      value="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$issupplyship"/>
                        <param name="macro"             value="Main.$FleetRecords.{$RFMKey}.{$shipKey}.$macro"/>
                        <param name="PlanData"              value="$PlanData" />
                        <param name="getShipPlan"               value="true"/>
                        <param name="getIndividualInstructions" value="true"/>

                    </run_actions>


                    <remove_value name="$NewLoadout"/>

                    <set_value name="$pText" exact="'( %s ) Fleet Record Spec Added &lt;%s&gt; Age: %s, %s'
                    .[$shipKey, $rShip, player.age, player.systemtime.{'%F-%X'}]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                </do_for_each>


                <!-- ShipPlan ataması istenecek -->
                <do_if value="$PlanData? and @$PlanData.count > 0">
                    <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                    <signal_cue_instantly cue="Get_PlanData_FromLua" param="$PlanData" />
                </do_if>
                <remove_value name="$PlanData" />


                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="''" />
                </run_actions>

            </actions>
        </library>


        <!-- RFM olmayan bir  commandera  RFM olan filo eklendi  NewCommanderSet
            eklenen filonun hali hazırdaki kayıp gemileri de dikkate alınacak
            Bu iş oyunun yaptığı ekleme ile oluşan fleet yapısı üzerinden çalışmaya başlayacak
        -->
        <library name="SpecAdd2_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="RMCommander" />
                <param name="Commander" />
                <param name="oldCommander" />
            </params>
            <actions>
                <!-- RFM Kapatılmadan üstğnde düzenleme yapacağız-->
                <!-- mevcut RFM (A), RFM olmayan bir gemiye (C Old) bağlandı 
                        Oluşturulacak FleetRecord daki ShipKey ler üzerinden çalışacağız.
                    A           : Eski rfm (yeni commandera eklenen) filo yapısı
                    Old_A       : A nın orijinal kaydı (patlamış gemiler de dahil)
                    Görünen_A   : A nın patlamış gemiler yüzünden düzen yapısı bozulmuş Yaşayan A yapısı
                    Kayıp_A     : A nın varsa patlamış gemileri
                    C           : C Yeni commandere  A eklendikten sonraki görünen filo yapısı
                    C Old       : A, C ye bağlanmadan önceki C filo yapısı
                    Kırpık_C    : C Yeni commanderin orijinal (bağlanma olmadan önceki) filo yapısı
                -->
                
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />

                <include_actions ref="Let_RFM_LogFileNames" />

                <!-- Filoyu yeni bir filoya eklediğimizde eklenilen yerden itibaren ekranda listeleniyor. 
                    Yeni filo, eski filonun patlamış gemilerini ve orijinal düzenini bilmiyor. 

                -->


                <!-- Yeni Filonun kaydını çıkartalım ( C )
                    C kaydı A nın sadece görünen (patlamışlar hariç) gemilerini ve şu anki düzenini kapsayacaktır
                    (* $FleetRec ve $Loadouts değişkenlerini C nin kaydı için hazırlayacağız, düzenlemelerden sonra Main. kayıtlarına ekleyeceğiz.)
                 -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]"/>
                <set_value name="$fleetshipsByIdx" exact="table[]"/>
                <create_group groupname="$Subordinates" />

                <!-- Sanal FleetRecords kaydı açacağız, tShipPlan aktarabilmek için  -->
                <run_actions ref="Get_New_RFMKey" result="$TemplateRFMKey"/>

                <!-- result="$Data  = [$HeaderData, $FleetRec, $Loadouts]"-->
                <!-- SendPlanData true yaparsak buradan çıkarken tabloalrı sileceğiz ve luadan cevap geç geleceği için fleetrec tablosunu bulamayacak 
                    bu yüzden işimiz bitince en son luadan Plandatayı isteyeceğiz -->
                <run_actions ref="CreateAndGet_Records_By_Commander" result="$Data">
                    <param name="RFMKey" value="$TemplateRFMKey" />
                    <param name="Commander" value="$RMCommander" />
                    <param name="SendPlanData" value="false" />
                </run_actions>
                <set_value name="$HeaderData" exact="$Data.{1}"/>
                <!-- $HeaderData içindekileri al (grp $Promoted , tbl $fleetshipsByComp, tbl $fleetshipsByIdx, grp $Subordinates ) -->
                <include_actions ref="Let_HeaderData_To_HeaderValues" />
                <set_value name="$FleetRec" exact="$Data.{2}" />
                <set_value name="$Loadouts" exact="$Data.{3}" />


                <set_value name="$pText" exact="'Setting to New Commander &lt;%s&gt; Old Commander &lt;%s&gt;  Age: %s, %s  [Spec2]'
                .[$RMCommander, $oldCommander, player.age, player.systemtime.{'%F-%X'}]" />
                <debug_to_file text="'RFM_%s %s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                <!-- C içindeki Görünen_A yı bulacağız. 
                        (* Henüz A sadece görünen gemileri kapsıyor )
                        (* Kayıp_A gemi record bilgilerini daha sonra orijinal A kaydından alacağız )
                -->
                <!--   C nin oluşturulan FleetRec tablosundan eski commander ve ona bağlı görünen tüm gemilerin (içinde patlamış olanlar yoktur)
                    listesini bulalım (Görünen_A) = $Old_Added_FleetShipKeys -->
                <set_value name="$oldCommanderKey"  exact="$fleetshipsByComp.{$oldCommander}" />
                <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$Old_Added_FleetShipKeys">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$TemplateRFMKey}" />
                    <param name="CommanderKey" value="$oldCommanderKey" />
                </run_actions>
                <debug_text text="'Eski Commander subordinateleri, shipKey list = %s'.[$Old_Added_FleetShipKeys]" chance="Main.$ChangesOnFleetDebug"/>

                <!-- Kırpık_C oluşturalım; 
                        (C şu hali ile hem kendi C_Old hem de Görünen_A yı kapsıyor.
                        Bu yüzden eklenen fleetin (Görünen_A) mevcut kayıtlarını C içinden temizlememiz gerekiyor. 
                        ( Yeni commanderin orijinal yapısı Kırpık_C yi bulacağız)
                            ( Sonra, eski RFM deki kaydı (Old_A ölülerle birlikte olan kayıt) elimizdeki kaydın (Kırpık_C) sonuna ekleyeceğiz.)
                -->
                <debug_text text="'Main.$FleetRecords.{$TemplateRFMKey}.keys.list = %s'.[Main.$FleetRecords.{$TemplateRFMKey}.keys.list]" chance="Main.$ChangesOnFleetDebug"/>
                <do_for_each name="$tShipKey" in="Main.$FleetRecords.{$TemplateRFMKey}.keys.list"  >
                    <set_value name="$tShip" exact="@$fleetshipsByIdx.{$tShipKey}" />
                    <do_if value="$Old_Added_FleetShipKeys.indexof.{$tShipKey}">
                        <remove_value name="$fleetshipsByComp.{$tShipKey}" />
                        <remove_value name="$fleetshipsByIdx.{$tShipKey}" />
                        <remove_from_group group="$Subordinates" object="$tShip" />
                        <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}" />
                        <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}" />
                        <remove_value name="$tShip" />
                    </do_if>
                    <do_else>
                        <set_value name="$pText" exact="'( %s ) of the new commanders fleet ships ShipKey value in the new RecordFleet  &lt;%s&gt;  [%s %s]'
                        .[$tShipKey, if $tShip != null then $tShip else 'DEAD',
                        Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}.$name, 
                        Main.$FleetRecords.{$TemplateRFMKey}.{$tShipKey}.$idcode
                        ]" />
                        <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_else>
                </do_for_each>



                <!-- Old_A RFM kaydını, Kırpık_C ye ekleyeceğiz,
                        (* Aktarılacak olan Old_A RFM kaydı  Kırpık_C nin Son kaydından 1 sonraya eklenecek )
                -->
                <debug_text text="'Main.$FleetRecords.{$TemplateRFMKey}.keys.list = %s'.[Main.$FleetRecords.{$TemplateRFMKey}.keys.list]" chance="Main.$ChangesOnFleetDebug"/>

                <set_value name="$startShipKey" exact="Main.$FleetRecords.{$TemplateRFMKey}.keys.list.last" />
                <set_value name="$newShipKey" exact="$startShipKey" />
                <set_value name="$destroyedShipKeys" exact="[]" />
                <set_value name="$rebuildcues" exact="table[]" />

                <do_for_each name="$tShipKey" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                    <set_value name="$tShip" exact="@$RFMCue.$fleetshipsByIdx.{$tShipKey}"/>
                    
                    <set_value name="$newShipKey" operation="add" exact="1" />
                    <set_value name="$pText" exact="'    [%s] Changed Key = = = = = New ShipKey [%s]'
                    .[$tShipKey, $newShipKey]" />

                    <do_if value="$tShip != null">
                        <set_value name="$fleetshipsByComp.{$tShip}" exact="$newShipKey" />
                        <set_value name="$fleetshipsByIdx.{$newShipKey}" exact="$tShip" />
                        <add_to_group groupname="$Subordinates" object="$tShip"/>
                        <!-- commander zaten direk add olacak. daha sonra remove add olaylarında sadece sublar için skipp yapacak -->
                    </do_if>

                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}" exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}" />
                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$id" exact="$newShipKey" />
                    <set_value name="Main.$Loadouts.{$TemplateRFMKey}.{$newShipKey}" exact="Main.$Loadouts.{$RFMKey}.{$tShipKey}" />
                    

                    <!-- Güncellenmesi Gerekenler-->
                    <!--    eklenen gemilerin commanderidx Keyleri ve ilgili assignment, subordinategroupid bilgileri değişecek-->
                    <set_value name="$CommanderKey"  exact="Main.$FleetRecords.{$RFMKey}.{$tShipKey}.$commanderidx" />
                    <set_value name="$newCommanderKey"  exact="$CommanderKey + $startShipKey" />
                    <do_if value="$tShipKey == 1">
                        <set_value name="$newCommanderKey"  exact="$fleetshipsByComp.{$Commander}" />
                        <set_value name="$oldCommanderNewKey" exact="$newShipKey" />
                        <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                            <param name="subordinategroupid" value="$oldCommander.subordinategroupid" />
                        </run_actions>
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$assignment" exact="$oldCommander.assignment" />
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$subordinategroupid" exact="$oldCommander.subordinategroupid" />
                        <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$subordinategrouptext" exact="$subordinategrouptext" />
                    </do_if>
                    <set_value name="Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$commanderidx" exact="$newCommanderKey" />

                    <!-- Destroyed Ships-->
                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$tShipKey}">
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$tShipKey" />
                        <append_to_list name="$destroyedShipKeys" exact="$newShipKey" />
                        <debug_text text="$pText + ' for destroyedShipKeys'"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_if>
                    
                    <!-- Rebuild takibi yapan cuenin içindekini eski key değerini yeni key değeri ile değişiyoruz-->
                    <do_if value="Main.$RebuildCues.{$RFMKey}.keys.list.indexof.{$tShipKey}">
                        <set_value name="$rebuildcues.{$newShipKey}" exact="Main.$RebuildCues.{$RFMKey}.{$tShipKey}" />
                        <set_value name="$rebuildCue" exact="Main.$RebuildCues.{$RFMKey}.{$tShipKey}.$cue"/>
                        <set_value name="$rebuildCue.$ShipIDX" exact="$newShipKey" />
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$tShipKey}" />
                        <debug_to_file text="'%s'.[$pText]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    </do_if>

                    <set_value name="$eText" exact="' ( %s ) OldShipKey[%s] &lt;%s&gt;  Changed to NewShipKey[%s]  [%s %s]'
                    .[$newShipKey, $tShipKey, 
                    if $tShip != null then $tShip else 'DEAD', $newShipKey, 
                    Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$name, 
                    Main.$FleetRecords.{$TemplateRFMKey}.{$newShipKey}.$idcode
                    ]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $eText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_to_file text="$eText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_text text="$eText"  chance="Main.$ChangesOnFleetDebug"/>

                </do_for_each>

                <!-- Veriler Aktarım için Hazır. -->
                <!--    Destroy edilmiş gemi listesi ve rebuilds tablolarını güncelliyoruz-->
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$destroyedShipKeys" />
                <set_value name="Main.$RebuildCues.{$RFMKey}" exact="$rebuildcues" />
                <!--    Fleets tablosu güncelleniyor-->
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$name" exact="$RMCommander.name" />
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="$RMCommander" />
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$sectorid" exact="$RMCommander.sector" />
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$sector" exact="$RMCommander.sector.knownname" />
                
                <!--    düzenlenmiş C kaydı sisteme ekleniyor-->
                <set_value name="Main.$FleetRecords.{$RFMKey}" exact="Main.$FleetRecords.{$TemplateRFMKey}" />
                <set_value name="Main.$Loadouts.{$RFMKey}" exact="Main.$Loadouts.{$TemplateRFMKey}"/>
                <!-- record yapısı .tShipPlan propertysi için denetlenecek -->
                
                <debug_text text="'Fixing tShipPlan on RFM_%s Record Table '.[$RFMKey]" />
                <run_actions ref="Fix_tShipPlan_ToFleetRec">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="FleetRec" value="Main.$FleetRecords.{$RFMKey}" />
                    <param name="excludeshipkeys" value="[]" />
                    <param name="debug" value="false" />
                </run_actions>
                
                <!-- Eski Commander Individual bilgileri Yeni Commander a aktarılacak mı?
                    Fix_tShipPlan_ToFleetRec den veriler geç gelecek ve birazdan promote içinde ship 1 e okuma ve atama yapılacak
                    <set_value name="Main.$FleetRecords.{$RFMKey}.{1}.$tIndividualInstructions" exact="Main.$FleetRecords.{$RFMKey}.{$oldCommanderNewKey}.$tIndividualInstructions"/>                    
                -->

                <!-- Template tablolarını siliyoruz -->
                <remove_value name="Main.$FleetRecords.{$TemplateRFMKey}" />
                <remove_value name="Main.$Loadouts.{$TemplateRFMKey}" />

                <!-- Çalışan cue nin Eski RFM Header değerlerini güncelliyoruz -->
                <clear_group group="$RFMCue.$Promoted" />
                <add_to_group groupname="$RFMCue.$Promoted" object="$Promoted.list.{1}"/>
                
                <set_value name="$RFMCue.$fleetshipsByComp" exact="$fleetshipsByComp" />
                <set_value name="$RFMCue.$fleetshipsByIdx" exact="$fleetshipsByIdx" />

                <clear_group group="$RFMCue.$Subordinates" />
                <do_all exact="$Subordinates.count" counter="$i">
                    <add_to_group groupname="$RFMCue.$Subordinates" object="$Subordinates.list.{$i}" />
                </do_all>
                
                <debug_text text="'Yeni Commander Promote edilecek..%s %s %s'.[$Commander.knownname, $Commander.idcode, $Commander]" />
                <!-- Yeni Commander Promote ediliyor-->
                <run_actions ref="PromoteToCommander">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="Commander" value="$RMCommander" />
                    <param name="oldCommander" value="$oldCommander" />
                </run_actions>
                <set_value name="$RFMCue.$RMCommander" exact="$RMCommander" />

                <!-- Yeni fleetin kilit sistemi kontrol ediliyor-->
                <!-- Promote commander rutini içinde check ediliyor
                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                -->

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

                <!-- DEBUG :  -->
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- REBUILD CUES -->
                <set_value name="$pText" exact="'    SET NEW Commander,    Age: %s, %s'.[player.age, player.systemtime.{'%F-%X'}]" />
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>
            </actions>
        </library>
        



        <!-- FleetRecord dan istenen CommanderKey e bağlı mainsub gemilerin (1.seviye subordinatlar) keylerini toplar-->
        <library name="Get_SubKeys_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="FleetRecord" />
                <param name="CommanderKey" />
            </params>
            <actions>
                <set_value name="$result" exact="[]" />
                <do_for_each name="$recKey" in="$FleetRecord.keys.list">
                    <do_if value="$FleetRecord.{$recKey}.$commanderidx == $CommanderKey">
                        <append_to_list name="$result" exact="$recKey" />
                    </do_if>
                </do_for_each>
                <return value="$result"/>
            </actions>
        </library>
        <!-- FleetRecord dan belirlenen ship key e bağlı tüm sub gemilerin (alt sublar da dahil) keylerini toplar-->
        <library name="Get_AllSubKeys_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="FleetRecord" />
                <param name="CommanderKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$collectedKeys" exact="[]" />
                <set_value name="$searchKeys" exact="[]" />
                <set_value name="$AllSubKeys" exact="[]" />

                <append_to_list name="$collectedKeys" exact="$CommanderKey" />
                <debug_text text="'appended start $collectedKeys:%s'.[$collectedKeys]" chance="$debugchance"/>
                <do_while value="$collectedKeys.count gt 0" >
                    <debug_text text="'started while $collectedKeys:%s (count:%s)'.[$collectedKeys, $collectedKeys.count]" chance="$debugchance"/>
                    <set_value name="$searchKeys" exact="$collectedKeys"/>
                    <debug_text text="'set $searchKeys:%s (count:%s)'.[$searchKeys, $searchKeys.count]" chance="$debugchance"/>
                    <do_for_each name="$sKey" in="$searchKeys">
                        <debug_text text="'$sKey=%s'.[$sKey]" chance="$debugchance"/>
                        <append_to_list name="$AllSubKeys" exact="$sKey" />
                        <debug_text text="'append %s , now $AllSubKeys:%s'.[$sKey, $AllSubKeys]" chance="$debugchance"/>
                        <remove_from_list name="$collectedKeys" exact="$sKey"/>
                        <debug_text text="'removed %s, now $collectedKeys:%s'.[$sKey, $collectedKeys]" chance="$debugchance"/>
                        <run_actions ref="Get_SubKeys_From_FleetRecord" result="$resultKeys">
                            <param name="FleetRecord" value="$FleetRecord" />
                            <param name="CommanderKey" value="$sKey"/>
                        </run_actions>
                        <debug_text text="'returned $resultKeys:%s'.[$resultKeys]" chance="$debugchance"/>

                        <do_all exact="$resultKeys.count" counter="$i">
                            <append_to_list name="$collectedKeys" exact="$resultKeys.{$i}"/>
                        </do_all>
                        <debug_text text="'appended result:%s to now $collectedKeys:%s'.[$resultKeys, $collectedKeys]" chance="$debugchance"/>
                    </do_for_each>
                </do_while>

                <return value="$AllSubKeys"/>
            </actions>
        </library>

        <!-- Verilen sayısal liste verilerini table key yaparak sıralar ve sıralı key listesini geri verir.
            IN  : list
            OUT : sorted list
        -->
        <library name="Sort_ListKeys" purpose="run_actions">
            <params>
                <param name="list" />
            </params>
            <actions>
                <set_value name="$result"  exact="$list"/>
                <set_value name="$tListKeys"  exact="table[]"/>

                <do_for_each name="$value" in="$list">
                    <set_value name="$tListKeys.{$value}" exact="1" />
                </do_for_each>

                <do_if value="$tListKeys.keys.count">
                    <set_value name="$result" exact="$tListKeys.keys.sorted" />
                </do_if>

                <return value="$result"/>
            </actions>
        </library>

        <library name="SpecRemove_ApplyRecorFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <run_actions ref="Get_AllSubKeys_From_FleetRecord" result="$AllSubKeys">
                    <param name="FleetRecord" value="Main.$FleetRecords.{$RFMKey}" />
                    <param name="CommanderKey" value="$RFMCue.$fleetshipsByComp.{$ship}"/>
                </run_actions>
                
                <run_actions ref="Sort_ListKeys" result="$AllSubKeys">
                    <param name="list" value="$AllSubKeys" />
                </run_actions>

                <include_actions ref="Let_RFM_LogFileNames" />

                <do_for_each name="$removeKey" in="$AllSubKeys" reverse="true" >
                    <set_value name="$removeShip" exact="@$RFMCue.$fleetshipsByIdx.{$removeKey}" />
                    <do_if value="$removeShip != null">
                        <remove_from_group group="$RFMCue.$Subordinates" object="$removeShip" />
                        <remove_value name="$RFMCue.$fleetshipsByComp.{$removeShip}" />
                        <remove_value name="$RFMCue.$fleetshipsByIdx.{$removeKey}" />
                    </do_if>
                    <remove_value name="Main.$FleetRecords.{$RFMKey}.{$removeKey}" />
                    <remove_value name="Main.$Loadouts.{$RFMKey}.{$removeKey}" />

                    <set_value name="$pText" exact="'( %s ) Fleet Record Spec Removed &lt;%s&gt; Age: %s, %s'
                    .[$removeKey, if $removeShip != null then $removeShip else 'DEAD', player.age, player.systemtime.{'%F-%X'}]" />
                    <debug_to_file text="'RFM_%s_%s'.[$RFMKey, $pText]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_to_file text="$pText" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>

                    <!-- Güncellenecek Olan Değişkenler-->
                    <!-- Destroyed Ships-->
                    <do_if value="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys.indexof.{$removeKey}">
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$removeKey" />
                    </do_if>
                    <!-- Rebuild takibi yapan cuenin içindekini key i yeni key değeri ile değişiyoruz-->
                    <do_if value="Main.$RebuildCues.{$RFMKey}.keys.list.indexof.{$removeKey}">
                        <set_value name="$rebuildCue" exact="Main.$RebuildCues.{$RFMKey}.{$removeKey}.$cue"/>
                        <set_value name="$rebuildCue.$ShipIDX" exact="-1" comment="filo kaydından çıkarma anlamında rebuildship cue içinde takip edilecek"/>
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$removeKey}" />
                        <set_value name="$pText" exact="'( %s ) Filo kaydından çıkarıldığı için Üretim Kaydı Silindi. Fleet Record Spec Changed   Age: %s, %s'
                        .[$removeKey, player.age, player.systemtime.{'%F-%X'}]" />
                        <debug_to_file text="'%s'.[$pText]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <debug_text text="$pText"  chance="Main.$ChangesOnFleetDebug"/>
                    </do_if>

                </do_for_each>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />
                
                <!-- DEBUG :  -->
                <!-- FLEET RECORD TABLE -->
                <run_actions ref="Debug_FleetRecord">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- REBUILD CUES -->
                <set_value name="$pText" exact="'    Spec Remove &lt;%s&gt;,  Age: %s, %s'.[$ship, player.age, player.systemtime.{'%F-%X'}]" />
                <run_actions ref="Debug_RebuildCue">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="inserttext" value="$pText" />
                </run_actions>
                <!-- ALL REBUILD CUES -->
                <run_actions ref="Debug_AllRebuildCues"/>

            </actions>
        </library>

        <library name="Get_FirstFreeShipKey_From_FleetRecord" purpose="run_actions">
            <params>
                <param name="FleetRecord" />
            </params>
            <actions>
                <set_value name="$retKey" exact="$FleetRecord.keys.list.last + 1" />
                <set_value name="$counter" exact="0" />
                <do_for_each name="$shipKey" in="$FleetRecord.keys.list"  >
                    <set_value name="$counter" operation="add" />
                    <do_if value="$counter != $shipKey">
                        <set_value name="$retKey" exact="$counter" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$retKey" />
            </actions>
        </library>


        <!-- IN :   ship          , RM Fleet  promoted commander objec ti
            OUT :   RFMKey          , RM Fleet numarası
        -->
        <library name="Get_RFMKey_From_ShipObject" purpose="run_actions">
            <params>
                <param name="ship" />
            </params>
            <actions>
                <set_value name="$RFMKey" exact="0" />
                <do_for_each name="$xRFMKey" in="Main.$RM_Fleets.keys.list" >
                    <do_if value="Main.$RM_Fleets.{$xRFMKey}.$object == $ship">
                        <set_value name="$RFMKey" exact="$xRFMKey" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$RFMKey"/>
            </actions>
        </library>


        <!-- IN :   RFMKey          , RM Fleet numarası
                    Entity       , promote si kaldırılacak rmcommander entity si
        -->
        <library name="PromoteEntity" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Entity" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$Entity.$RFM" exact="true"/>
                
                <set_value name="$RFMCue.$Entity" exact="$Entity"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="$Entity" />

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
                    Entity       , promote si kaldırılacak rmcommander entity si
        -->
        <library name="UnPromoteEntity" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Entity" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <do_if value="$Entity != $RFMCue.$Entity">
                    <remove_value name="$Entity.$RFM" />
                </do_if>
                <do_if value="$RFMCue.$Entity.$RFM?">
                    <remove_value name="$RFMCue.$Entity.$RFM" />
                </do_if>

                <set_value name="$RFMCue.$Entity" exact="null"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="null" />

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
                    Commander         , Promote edilecek obje
                    oldCommander         , Promote durumu elinden alınacak  obje
        -->
        <library name="PromoteToCommander" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="Commander" />
                <param name="oldCommander" default="null" />
            </params>
            <actions>
                <!-- -->
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <do_if value="$oldCommander != null">
                    <set_value name="$oShipId" exact="0" />
                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$entry.$object == $oldCommander">
                            <set_value name="$oShipId" exact="$entryKey" />
                            <break />
                        </do_if>
                    </do_for_each>
                    <debug_text text="'  Old Commander  have in Fleets.shipid : %s , now found in records.ID : %s'.[Main.$RM_Fleets.{$RFMKey}.$shipid, $oShipId]" chance="Main.$DeepDebug"/>
                    <run_actions ref="Clear_ShipCaption">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$oldCommander" />
                        <param name="ShipKey" value="$oShipId" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                    <do_if value="$RFMCue.$Entity != null">
                        <remove_value name="$RFMCue.$Entity.$RFM" />
                    </do_if>

                    <!-- eski promoted commanderin individual resupply ayarını objeye geri setleyeceğiz -->
                    <run_actions ref="Set_IndividualInstuctions_To">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="object" value="$oldCommander" />
                        <param name="itself" value="true" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>

                </do_if>
                
                <set_value name="$Entity" exact="null"/>
                <set_value name="$xShipId" exact="0" />
                <do_if value="$Commander != null">
                    <do_for_each name="$entryKey" valuename="$entry" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$entry.$object == $Commander">
                            <set_value name="$xShipId" exact="$entryKey" />
                            <break />
                        </do_if>
                    </do_for_each>
    
                    <do_if value="$Commander.isrealclass.station">
                        <do_if value="$Commander.tradenpc.exists">
                            <set_value name="$Entity" exact="$Commander.tradenpc"/>
                        </do_if>
                    </do_if>
                    <do_else>
                        <do_if value="$Commander.pilot == player.entity">
                            <set_value name="$Entity" exact="$Commander.assignedcontrolentity.{controlpost.aipilot}"/>
                        </do_if>
                        <do_else>
                            <set_value name="$Entity" exact="$Commander.assignedpilot"/>
                        </do_else>
                    </do_else>
                    <do_if value="$Entity != null">
                        <set_value name="$Entity.$RFM" exact="true"/>
                    </do_if>
                </do_if>

                <set_value name="$RFMCue.$Entity" exact="$Entity"/>
                <set_value name="$RFMCue.$PromotedCommander" exact="$Commander"/>
                <clear_group group="$RFMCue.$Promoted" />
                <do_if value="$Commander != null">
                    <add_to_group groupname="$RFMCue.$Promoted" object="$Commander"/>
                </do_if>
                <debug_text text="'new Commander is found in records ID : %s'.[$xShipId]" chance="100"/>
                
                <run_actions ref="Get_NoneColor_ShipName" result="$name">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ship" value="$Commander" />
                    <param name="ShipKey" value="$xShipId" />
                </run_actions>
                <set_value name="$RFMCue.$RMCommanderName" exact="$name"/>
                

                <set_value name="Main.$RM_Fleets.{$RFMKey}.$object" exact="$Commander"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$name" exact="$name"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$shipid" exact="$xShipId"/>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$entity" exact="$Entity"/>

                <do_if value="$Commander != null">
                    <!-- Yeni commandera  rfmcommanderdan setleyeceğiz -->
                    <!-- Yeni commandera order bilgisini -->
                    <do_if value="$Commander.isrealclass.ship">
                        <run_actions ref="Let_DefaultOrder_To_RMCommander">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                    </do_if>
                    <!-- yeni commandera individual resupply ayarını ata -->
                    <run_actions ref="Set_IndividualInstuctions_To">
                        <param name="object" value="$Commander" />
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="itself" value="false" />
                        <param name="debugchance" value="Main.$DeepDebug" />
                    </run_actions>
                </do_if>

                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <debug_text text="'RFM_%s  Promoted new Commander'.[$RFMKey]" chance="Main.$DeepDebug"/>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

                <!-- DEBUG : MainLog File-->
                <set_value name="$pText" exact="'  RFM_%s_ PROMOTED TopLevelCommander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, $Commander, @$Commander.name, @$Commander.idcode, @$Commander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" />
                <debug_to_file text="$pText" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DebugChance" />
                <!-- DEBUG : RM_FLEETS File-->
                <run_actions ref="Debug_RM_Fleets">
                    <param name="inserttext" value="$pText" />
                </run_actions>
                        
            </actions>
        </library>





        <!-- Promote olaylarında RFM içindeki object den okunan IndividualInstuctions kaydı 
            itself = true   ise kendine aktarılacak, 
                            değilse recorddaki 1 nolu gemiye
                            aktarılacak. !!! Record datasına kayıt aktarılmayacak
        -->
        <library name="Set_IndividualInstuctions_To" purpose="run_actions">
            <params>
                <param name="RFMKey"        />
                <param name="object"        />
                <param name="itself"        default="true"/>
                <param name="debugchance"   default="0" />
            </params>
            <actions>
                <do_if value="$object != null">
                    
                    <do_for_each name="$key" valuename="$record" in="Main.$FleetRecords.{$RFMKey}">
                        <do_if value="$record.$object == $object">
                            <set_value name="$readShipKey" exact="$key" />
                            <set_value name="$writeShipKey" exact="$key" />
                            <!-- objecte ait kaydı al, RFM başka bir gemiye bağlandığı esnada henüz table oluşmamıştır. skipp edilecek-->
                            <do_if value="$record.$tIndividualInstructions?">
                                <set_value name="$tIndividualInstructions"  exact="$record.$tIndividualInstructions"/>
                            </do_if>
                            <!-- Kendi değilse aktarılacak gemi 1 nolu gemi olacak-->
                            <do_if value="not $itself">
                                <set_value name="$writeShipKey" exact="1" />
                            </do_if>
                            <break />
                        </do_if>
                    </do_for_each>

                    <!-- bulunan kayıt içinde aktarmak istemediklerimizi kaldıracağız. record kaydının bozulmaması için yeni bir değişkene aktarıyoruz-->
                    <do_if value="$tIndividualInstructions?">
                        <set_value name="$Send_IndividualInstructions" exact="[]" />
                        <!-- Aktarmak istediklerimiz -->
                        <!-- 'orders_resupply' -->
                        <run_actions ref="Find_IndividualInstruction" result="$retentry">
                            <param name="IndividualInstructions" value="$tIndividualInstructions" />
                            <param name="rowdata" value="'orders_resupply'" />
                        </run_actions>
                        <do_if value="$retentry != null">
                            <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                        </do_if>

                        <!-- 'orders_blacklist_' ...  -->
                        <do_for_each name="$bl_type" in="lookup.blacklisttype.list">
                            <run_actions ref="Find_IndividualInstruction" result="$retentry">
                                <param name="IndividualInstructions" value="$tIndividualInstructions" />
                                <param name="rowdata" value="'orders_blacklist_' + $bl_type" />
                            </run_actions>
                            <do_if value="$retentry != null">
                                <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                            </do_if>
                        </do_for_each>
                        
                        <!-- 'orders_fightrule_attack' -->
                        <run_actions ref="Find_IndividualInstruction" result="$retentry">
                            <param name="IndividualInstructions" value="$tIndividualInstructions" />
                            <param name="rowdata" value="'orders_fightrule_attack'" />
                        </run_actions>
                        <do_if value="$retentry != null">
                            <append_to_list name="$Send_IndividualInstructions" exact="$retentry" />
                        </do_if>
                        
                        <do_if value="$Send_IndividualInstructions.count gt 0">
                            <debug_text text="'(%s) RFM.{%s}.{%s} record setting to {%s} = %s %s&lt;%s&gt; Send_IndividualInstructions = %s'.[(if $itself then 'itself' else 'RFMCommander'), $RFMKey, $readShipKey, $writeShipKey, $object.idcode, $object.knownname, $object, $Send_IndividualInstructions]" chance="$debugchance" />

                            <do_if value="not player.entity.$IIStack?">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>
                            <!-- 
                            <debug_text text="'2- %s player.entity.$IIStack = %s'.[(typeof player.entity.$IIStack),  player.entity.$IIStack]" />
                            -->
                            <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                            <do_if value="typeof player.entity.$IIStack == datatype.table">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>

                            <set_value name="$IndividualInstructions" exact="table[
                                $controllable = $object,
                                $RFMKey = $RFMKey,
                                $ShipKey = $writeShipKey,
                                $tIndividualInstructions = $Send_IndividualInstructions,
                                $isdebug = (if $debugchance == 100 then true else false)
                            ]" />
                            <append_to_list name="player.entity.$IIStack" exact="$IndividualInstructions" />
                            <raise_lua_event name="'Set_IndividualInstructions'" />
                        </do_if>
                        <do_else>
                            <debug_text text="'RFM.{%s}, no have %s any Set_IndividualInstructions data. Skipping...'.[$RFMKey, (if $itself then 'itSelf' else '1')]" chance="$debugchance" />    
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'RFM.{%s}.{%s}.tIndividualInstructions record not found. Skipping...'.[$RFMKey, (if $itself then 'itself' else 'RFMCommander')]" chance="$debugchance" />
                    </do_else>
                </do_if>
                <do_else>
                    <debug_text text="'RFM.{%s} Ship object is NULL. cant set to loadout level.. [@fikret chack param object] '.[$RFMKey]" chance="$debugchance" />
                </do_else>
            </actions>
        </library>

        <!-- IndividualInstructions listeleri içindeki tablolardaki rowdata ile uyuşan veri tablosunu geri döndürür-->
        <library name="Find_IndividualInstruction" purpose="run_actions">
            <params>
                <param name="IndividualInstructions" />
                <param name="rowdata" />
            </params>
            <actions>
                <set_value name="$result" exact="null" />
                <do_for_each name="$entry" in="$IndividualInstructions">
                    <do_if value="$entry.$a_rowdata == $rowdata">
                        <set_value name="$result" exact="$entry" />
                        <break />
                    </do_if>
                </do_for_each>
                <return value="$result"/>
            </actions>
        </library>

        <!-- YAPILACAK : md içinden orders_blacklist, orders_fight_rule listelerini okuma ve set etme yöntemini bulamadım, 
            bunun yerine lua üzerinden set ettireceğim
            KULLANILMIYOR :
            RFMKey Record içindeki objenin individual tablosundaki değeri bulup objeye setleyeceğiz
            itself true ise rfmkey.record tablosundaki kendi ayarlarını kullanacağız
            itself false ise rfmkey.record tablosundaki shipkey 1 ayarlarını kullanacağız
        -->
        <!-- 
        <library name="Set_IndividualInstuctions_From" purpose="run_actions">
            <params>
                <param name="object"        />
                <param name="RFMKey"        />
                <param name="itself"        default="true"/>
                <param name="debugchance"   default="0" />
            </params>
            <actions>
                <do_if value="$object != null">
                    <do_for_each name="$key" valuename="$record" in="Main.$FleetRecords.{$RFMKey}">
                        <set_value name="$ShipKey" exact="$key" />
                        <do_if value="$itself">
                            <do_if value="$record.$object == $object">
                                <set_value name="$tIndividualInstructions"  exact="$record.$tIndividualInstructions"/>
                                <break />
                            </do_if>
                        </do_if>
                        <do_else>
                            <do_if value="$key == 1">
                                <set_value name="$tIndividualInstructions"  exact="$record.$tIndividualInstructions"/>
                                <break />
                            </do_if>
                        </do_else>
                    </do_for_each>
                    <do_if value="$tIndividualInstructions?">
                        <do_for_each name="$entry" in="$tIndividualInstructions">
                            
                            <do_if value="$entry.$a_rowdata == 'orders_resupply'">
                                <set_value name="$loadoutlevel" exact="-1" />
                                <do_if value="$entry.$hasOwn">
                                    <set_value name="$loadoutlevel" exact="$entry.$LoadoutLevel" />
                                </do_if>
                                <break />
                            </do_if>


                            
                            <do_if value="$entry.$a_rowdata == 'orders_fightrule_attack'">

                            </do_if>
                        </do_for_each>
                    </do_if>

                    <do_if value="$loadoutlevel?">
                        <set_loadout_level object="$object" exact="$loadoutlevel"/>
                        <debug_text text="'RFM.{%s}.{%s} Ship %s %s&lt;%s&gt; loadoutlevel value set to %s from %s record'.[$RFMKey, $ShipKey, $object.idcode, $object.knownname, $object, $loadoutlevel, (if $itself then 'itself' else 'RFMCommander')]" chance="$debugchance" />
                    </do_if>
                    <do_else>
                        <debug_text text="'RFM.{%s} no have %s loadoutlevel record. cant set to loadout level..'.[$RFMKey, (if $itself then 'itself' else 'RFMCommander')]" chance="$debugchance" />
                    </do_else>

                </do_if>
                <do_else>
                    <debug_text text="'RFM.{%s} Ship is null. cant set to loadout level..'.[$RFMKey]" chance="$debugchance" />
                </do_else>
            </actions>
        </library>
        -->




        <!-- HeaderData değişkenlerinden filodaki kayıp gemi durumuna bakar ve lock durumu fleetin önceki kaydından farklı ise filo adını günceller
                *** $isLockedFleet ataması Sadece burda yapılmalı
            IN : RFMKey
            OUT: return value islocked status (gerekli ise kullanmak için)-->
        <library name="Check_FleetLockStatus" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>
            <actions>

                <set_value name="$testdebugchance" exact="0" />
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$FRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>

                <set_value name="$FComp" exact="$RFMCue.$fleetshipsByComp.clone"/>
                <set_value name="$FIndx" exact="$RFMCue.$fleetshipsByIdx.clone"/>
                
                <set_value name="$oldLockStatus" exact="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet"/>
                

                <!-- Önce Hızlı bir kontrol yapalım -->
                <do_if value="$FIndx.keys.count == $FRec.keys.count">
                    <set_value name="$islocked" exact="false" />
                </do_if>
                <do_else>
                    <set_value name="$islocked" exact="true" />
                </do_else>
                
                <!-- Geni commanderları üzerinden check ediyoruz -->
                <do_if value="not $islocked">
                    <do_for_each name="$idx" in="$FRec.keys.list">
                        <do_if value="$idx gt 1">
                            <set_value name="$rCommIdx" exact="$FRec.{$idx}.$commanderidx" />
                            <set_value name="$rComm" exact="@$FIndx.{$rCommIdx}" />
                            <set_value name="$ship" exact="@$FIndx.{$idx}" />
                            
                            <debug_text text="'\n
                            [ %s ] Checked RFM[%s] subs[%s] [&lt;%s&gt;%s %s] commanders..       \n
                                Ship.commander    : &lt;%s&gt;%s %s   \n
                                recCommander (%s)  : &lt;%s&gt;%s %s   
                            '.[
                            (if @$ship.commander == null or $rComm == null then 'Locked' else
                                if $ship.commander != $rComm then 'Locked' else 'Pass'),
                            $RFMKey, $idx, @$ship, @$ship.knownname, @$ship.idcode,
                            @$ship.commander, @$ship.commander.knownname, @$ship.commander.idcode,
                            @$rCommIdx, @$rComm, @$rComm.knownname, @$rComm.idcode
                            ]" chance="$testdebugchance"/>
                            
                            <do_if value="@$ship.commander == null or $rComm == null">
                                <set_value name="$islocked" exact="true" />
                                <debug_text text="'        RFM_%s LOCK  Status Locked  (   none  )  %s.commander : %s, $rComm = %s'.[$RFMKey, $ship, $ship.commander, $rComm]" chance="Main.$FleetLockStatusDebug"/>
                                <break />
                            </do_if>
                            <do_if value="$ship.commander != $rComm">
                                <set_value name="$islocked" exact="true" />
                                <debug_text text="'        RFM_%s LOCK  Status Locked  (Different)  %s.commander : %s, $rComm = %s'.[$RFMKey, $ship, $ship.commander, $rComm]" chance="Main.$FleetLockStatusDebug"/>
                                <break />
                            </do_if>
                        </do_if>
                    </do_for_each>
                    <do_if value="not $islocked">
                        <debug_text text="'        RFM_%s LOCK  Status Open                old = %s, new = %s'.[$RFMKey, $oldLockStatus, $islocked]" chance="Main.$FleetLockStatusDebug"/>
                    </do_if>
                </do_if>
                <do_else>
                    <debug_text text="'        RFM_%s LOCK  Status Locked                old = %s, new = %s'.[$RFMKey, $oldLockStatus, $islocked]" chance="Main.$FleetLockStatusDebug"/>
                </do_else>
                
                <!-- RFM Alert durum testi yapıalcak
                    alert seviyesi 1-Sarı, 2-Turuncu 3-Kırmızı
                    3 den 1 e doğru kontrol yapacağız , aldığımız herhangi bir değerde kontrolü bırakacağız
                    (LOCKED = FALSE)
                    0 - normal 
                    (LOCKED = TRUE)
                    * patlamış gemiler için alert durumu ortaya çıkacak 
                    1 - istasyon bulup, istasyonda sırada bekleyenler
                        rebuild cue kaydı var build.isprocessing = false
                    2 - İstasyon bulamayanlar 
                        rebuild cue kaydı var ve build null
                    3 - lost ships 
                        rebuildcue kaydı yok
                -->
                
                
                <set_value name="$alertstatus" exact="Main.$alertstatues.$normal" />

                <!-- RFM Entity var mı-->
                <do_if value="not $RFMCue.$Entity.isclass.entity">
                    <set_value name="$alertstatus" exact="Main.$alertstatues.$nopilot" />
                </do_if>

                <do_if value="$islocked">
                    <do_for_each name="$idx" valuename="$entry" in="$FRec">
                        <do_if value="$entry.$destroyed">
                            <!-- 3 -->
                            <do_if value="not Main.$RebuildCues.{$RFMKey}.{$entry.$id}?">
                                <do_if value="$alertstatus.$level le Main.$alertstatues.$rebuild.$level">
                                    <set_value name="$alertstatus" exact="Main.$alertstatues.$rebuild" />
                                </do_if>
                            </do_if>
                            <!-- 2, 1-->
                            <do_else>
                                <!-- 2 -->
                                <do_if value="Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$build == null">
                                    <do_if value="$alertstatus.$level le Main.$alertstatues.$noshipyard.$level">
                                        <set_value name="$alertstatus" exact="Main.$alertstatues.$noshipyard" />
                                    </do_if>
                                </do_if>
                                <!-- 1 -->
                                <do_else>
                                    <do_if value="not Main.$RebuildCues.{$RFMKey}.{$entry.$id}.$build.isprocessing">
                                        <do_if value="$alertstatus.$level le Main.$alertstatues.$queuedship.$level">
                                            <set_value name="$alertstatus" exact="Main.$alertstatues.$queuedship" />
                                        </do_if>
                                    </do_if>
                                </do_else>
                            </do_else>
                        </do_if>
                    </do_for_each>
                </do_if>

                <set_value name="Main.$RM_Fleets.{$RFMKey}.$alertstatus" exact="$alertstatus" />
                <debug_text text="'        RFM_%s ALERT Status %s %s'.[$RFMKey, $alertstatus.$level, $alertstatus.$text]" chance="Main.$FleetLockStatusDebug"/>

                <set_value name="Main.$RM_Fleets.{$RFMKey}.$isLockedFleet" exact="$islocked" />
                <run_actions ref="Update_RFMCaption">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>

                <set_value name="player.entity.$RM_Fleets" exact="Main.$RM_Fleets" />

                <debug_text text="'       RFM_' + $RFMKey + '_ Filo KİLİT : ' + if $islocked then 'KAPALI' else 'AÇIK'"  chance="Main.$FleetLockStatusDebug"/>

                <remove_value name="$FComp" />
                <remove_value name="$FIndx" />
                <remove_value name="$FRec" />
                <remove_value name="$RFMCue" />

                <return value="$islocked"/>
            </actions>
        </library>
    
        <!-- IN :   RFMKey      , fleet number
                    Ship , who is changed to original name in fleet -->
        <library name="Clear_ShipCaption" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship" />
                <param name="ShipKey" default="0" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$name" exact="''" />
                <do_if value="$RFMKey > 0">
                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$ship" />
                        <param name="ShipKey" value="$ShipKey" />
                    </run_actions>
                </do_if>
                <do_if value="$name == ''">
                    <set_value name="$name" exact="$ship.macro.name" />    
                </do_if>
                <set_object_name object="$ship" name="$name"/>
                <debug_text text="'Cleared ShipCaption object = &lt;%s&gt; name = %s , idcode = %s'.[$ship, $name, @$ship.idcode]" chance="$debugchance"/>
            </actions>
        </library>

        <!-- default olarak Record yapısındaki name bilgisini okuyup renk tagını düzenleyerek gemi adını setleyecek
            RM_Fleets deki obje ve shipid sini kullanarak temiz isim bulacak , RM_Fleets lock durumuna göre renk tagını ekleyecek
            IN : RFMKey 
        -->
        <library name="Update_RFMCaption" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>
            <actions>
                <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object"/>
                <set_value name="$ShipKey" exact="Main.$RM_Fleets.{$RFMKey}.$shipid" />
                <run_actions ref="Get_NoneColor_ShipName" result="$CommanderName">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="ship" value="$Commander" />
                    <param name="ShipKey" value="$ShipKey" />
                </run_actions>
                <debug_text text="'               :Get_NoneColor_ShipName:   $Commander = &lt;%s&gt; %s'.[@$Commander, @$CommanderName]" chance="Main.$FleetLockStatusDebug"/>
                <do_if value="$Commander != null">
                    
                    <run_actions ref="GetCaptionStamp" result="$CaptionStamp">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    
                    <set_object_name object="$Commander" name="$CommanderName + $CaptionStamp " />
                </do_if>
                <debug_text text="'               :GetCaptionStamp:          isLockedFleet = %s, return $CaptionStamp = %s'.[Main.$RM_Fleets.{$RFMKey}.$isLockedFleet, @$CaptionStamp]" chance="Main.$FleetLockStatusDebug"/>
                <debug_text text="'             RFM_%s  Caption Updated'.[$RFMKey]" chance="Main.$DeepDebug"/>
                <remove_value name="$CommanderName" />
                <remove_value name="$Commander" />
            </actions>
        </library>
        <!--IN : Object adını bulma işini yapar ve getirir.
                ShipKey ile ulaşabiliyorsa ise record yapısındaki adı
                Shipkey yoksa ; 
                    1- obje null ise macro.adı 
                    2- obje varsa obje.adı 
                        renk tagı varsa temizlenmiş .name
                ship as object 
                RFMKey for caption tag
                ShipKey default 0
            OUT : ship's name  
        -->
        <library name="Get_NoneColor_ShipName" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ship"  default="null" />
                <param name="ShipKey" default="0"/>
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <!-- <set_value name="$name" exact="$ship.macro.name"/> 
                <debug_text text="'$RFMKey = %s ,  $ship = %s , $ShipKey = %s'.[$RFMKey, $ship, $ShipKey]" />
                -->
                <do_if value="Main.$FleetRecords.{$RFMKey}.{$ShipKey}?">
                    <set_value name="$name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                </do_if>
                <do_else>
                    <do_if value="$ship == null">
                        <set_value name="$name" exact="''"/>
                    </do_if>
                    <do_else>
                        <set_value name="$sname" exact="$ship.name"/>
                        <debug_text text="' Source Object Name = &lt;%s&gt; '.[$sname]" chance="$debugchance"/>
                        <substitute_text text="$name" source="$sname">
                            <replace string="'\033'" with="''" comment="ismi temizle"/>
                        </substitute_text>
                        <do_if value="$sname != $name">
                            <!-- Renk tagı var-->
                            <substitute_text text="$CaptionStamp" source="Main.$RMShipCaptionTag">
                                <replace string="'$KEY$'" with="$RFMKey"/>
                            </substitute_text>
                            <debug_text text="'  substitute_text name = &lt;%s&gt;'.[$name]" chance="$debugchance"/>
                            <substitute_text text="$sname" source="$name">
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$oldN + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$oldA + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
    
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$normal} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$low} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$medium} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                                <replace string="' ' + global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$high} + $CaptionStamp + 'X'" with="''" comment="ismi temizle"/>
                            </substitute_text>
                        </do_if>
                        <set_value name="$name" exact="$sname"/>
                        <debug_text text="' None Color Object Name = &lt;%s&gt;'.[$sname]" chance="$debugchance"/>
                    </do_else>
                </do_else>

                <return value="$name"/>
            </actions>
        </library>
        <!-- IN : isLockedFleet durumuna göre RFMKey değerinin renkli çıktısını verir
                    RFMKey 
                    isLockedFleet value 
                OUT : CaptionStamp  (CaptionSource   'colorcode (RFM_$KEY$_) colorcodeend' and chenged $KEY$) 
        -->
        <library name="GetCaptionStamp" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>
            <actions>
                <do_if value="not Main.$RM_Fleets.{$RFMKey}.$alertstatus?">
                    <set_value name="$alertstatus" exact="table[ 
                        $level = Main.$alertlevels.$normal , 
                        $text = 'Normal', 
                        $color = global.$upbRF_DATA.$Editing.$alertcolors.{Main.$alertlevels.$normal}
                    ]" />
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$alertstatus" exact="$alertstatus" />
                </do_if>
                <set_value name="$alertstatus" exact="Main.$RM_Fleets.{$RFMKey}.$alertstatus" />
                <set_value name="$alertcolor" exact="$alertstatus.$color" />
                <set_value name="$CaptionSource" exact="' \033' + $alertcolor + Main.$RMShipCaptionTag + '\033X'"/>
            
                <substitute_text text="$CaptionStamp" source="$CaptionSource">
                    <replace string="'$KEY$'" with="$RFMKey"/>
                </substitute_text>
                <return value="$CaptionStamp"/>
            </actions>
        </library>





        <!-- IN :   RFMKey          , RM Fleet numarası
        -->
        <library name="Save_DefaultOrder_To_RMFleet" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object" />
                <set_value name="$result" exact="['', $Commander.sector]" />
                <do_if value="$Commander.isrealclass.ship">
                    <run_actions ref="Get_OrderTable_From_Ship" result="$result">
                        <param name="ship" value="$Commander" />
                    </run_actions>
                </do_if>
                <set_value name="Main.$RM_Fleets.{$RFMKey}.$order" exact="$result.{1}"/>

                <do_if value="$result.{2} == null">
                    <set_value name="$sector" exact="if player.sector == null then player.zone else player.sector" />
                    <debug_text text="'Sektör bilgisi okunamadı. default değer olarak player.sector atanacak. RFMKey = %s , Commander = %s %s&lt;%s&gt; Order = %s '.[$RFMKey, $Commander.idcode, $Commander.knownname, $Commander, $result.{1}.$id ]" chance="$debugchance"/>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$sectorid" exact="$sector" />
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$sector" exact="$sector.knownname" />
                </do_if>
                <do_else>
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$sectorid" exact="$result.{2}" />
                    <set_value name="Main.$RM_Fleets.{$RFMKey}.$sector" exact="$result.{2}.knownname" />
                </do_else>

                <set_value name="player.entity.$RM_Fleets" exact="Main.$RM_Fleets" />
                <set_value name="player.entity.$RebuildCues" exact="Main.$RebuildCues" />

                <debug_text text="'  RFM_%s  Default Order &lt;%s&gt; Saved'.[$RFMKey, Main.$RM_Fleets.{$RFMKey}.$order]" chance="$debugchance"/>

            </actions>
        </library>
        <!-- IN :   RFMKey          , RM Fleet numarası
        -->
        <library name="Let_DefaultOrder_To_RMCommander" purpose="run_actions">
            <params>
                <param name="RFMKey" />
            </params>            
            <actions>
                <set_value name="$Commander" exact="Main.$RM_Fleets.{$RFMKey}.$object" />
                <set_value name="$result" exact="''" />
                <do_if value="$Commander != null and $Commander.isclass.ship">
                    <set_value name="$orderTable"  exact="Main.$RM_Fleets.{$RFMKey}.$order"/>
                    <!-- RFMCommander istasyon olabilir-->
                    <do_if value="typeof $orderTable == datatype.table and $orderTable.$id?">
                        <run_actions ref="Add_OrderTable_To_Ship" result="$result">
                            <param name="orderT" value="$orderTable" />
                            <param name="ship" value="$Commander" />
                        </run_actions>
                    </do_if>
                </do_if>
                <return value="$result"/>
            </actions>
        </library>


        <!-- Belirtilen geminin order bilgisini dtayını Ordertable ye çevirerek geri verir 
            IN :   orderi istenen obje
                    defaultOrder ( default true )
            OUT : $result [ order table, sector ]     -->
        <library name="Get_OrderTable_From_Ship" purpose="run_actions">
            <params>
                <param name="ship" />
                <param name="defaultOrder" default="true" />
            </params>
            <actions>
                <set_value name="$orderT" exact="''" />
                <set_value name="$sector" exact="null" />
                <do_if value="$ship.isclass.ship">
                    <set_value name="$order" exact="if $defaultOrder then $ship.defaultorder else $ship.order" />
                    <set_value name="$orderT" exact="table[]" />
                    <set_value name="$orderT.$id" exact="$order.id" />

                    <do_if value="$order.id == 'AssignCommander'">
                        <set_value name="$sector" exact="$order.$commander.sector" />
                        <set_value name="$orderT.$commander" exact="$order.$commander"/>
                        <set_value name="$orderT.$assignment" exact="$order.$assignment"/>
                        <set_value name="$orderT.$subordinategroup" exact="$order.$subordinategroup"/>
                        <set_value name="$orderT.$setgroupassignment" exact="$order.$setgroupassignment"/>
                        <set_value name="$orderT.$cancelorders" exact="$order.$cancelorders"/>
                        <set_value name="$orderT.$response" exact="$order.$response"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_if>
                    <do_elseif value="$order.id == 'SectorExplorer'">
                        <set_value name="$orderT.$fs_usecore" exact="$order.$fs_usecore"/>
                        <set_value name="$orderT.$fs_skiphexagon" exact="$order.$fs_skiphexagon"/>
                        <set_value name="$orderT.$fs_lockbox" exact="$order.$fs_lockbox"/>
                        <set_value name="$orderT.$fs_abandoned" exact="$order.$fs_abandoned"/>
                        <set_value name="$orderT.$fs_vaults" exact="$order.$fs_vaults"/>
                        <set_value name="$orderT.$fs_continue" exact="$order.$fs_continue"/>
                        <set_value name="$orderT.$fs_stations" exact="$order.$fs_stations"/>
                        <set_value name="$orderT.$fs_radius" exact="$order.$fs_radius"/>
                        <set_value name="$orderT.$fs_delta" exact="$order.$fs_delta"/>
                        <set_value name="$orderT.$fs_satscan" exact="$order.$fs_satscan"/>
                        <set_value name="$orderT.$fs_reset" exact="$order.$fs_reset"/>
                        <set_value name="$orderT.$fs_notify" exact="$order.$fs_notify"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'InventoryCollector'">
                        <set_value name="$orderT.$fs_small_ships" exact="$order.$fs_small_ships"/>
                        <set_value name="$orderT.$fs_medium_ships" exact="$order.$fs_medium_ships"/>
                        <set_value name="$orderT.$fs_capital_ships" exact="$order.$fs_capital_ships"/>
                        <set_value name="$orderT.$fs_globalbl" exact="$order.$fs_globalbl"/>
                        <set_value name="$orderT.$fs_blacklist" exact="$order.$fs_blacklist"/>
                        <set_value name="$orderT.$fs_deposit_to_hq" exact="$order.$fs_deposit_to_hq"/>
                        <set_value name="$orderT.$fs_deposit_to_player" exact="$order.$fs_deposit_to_player"/>
                        <set_value name="$orderT.$fs_revisit_interval" exact="$order.$fs_revisit_interval"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SectorPatrol'">
                        <set_value name="$orderT.$fs_space" exact="$order.$fs_space"/>
                        <set_value name="$orderT.$fs_attack_stations" exact="$order.$fs_attack_stations"/>
                        <set_value name="$orderT.$fs_attack_xl" exact="$order.$fs_attack_xl"/>
                        <set_value name="$orderT.$fs_attack_l" exact="$order.$fs_attack_l"/>
                        <set_value name="$orderT.$fs_attack_m" exact="$order.$fs_attack_m"/>
                        <set_value name="$orderT.$fs_attack_s" exact="$order.$fs_attack_s"/>
                        <set_value name="$orderT.$fs_pirates" exact="$order.$fs_pirates"/>
                        <set_value name="$orderT.$fs_pursue" exact="$order.$fs_pursue"/>
                        <set_value name="$orderT.$fs_noboost" exact="$order.$fs_noboost"/>
                        <set_value name="$orderT.$fs_disable" exact="$order.$fs_disable"/>
                        <set_value name="$orderT.$fs_park" exact="$order.$fs_park"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'ReactionForce'">
                        <set_value name="$sector" exact="$order.$home" />
                        <set_value name="$orderT.$homePos" exact="$order.$homePos"/>
                        <set_value name="$orderT.$home" exact="$order.$home"/>
                        <set_value name="$orderT.$whenIdle" exact="$order.$whenIdle"/>
                        <set_value name="$orderT.$assignToHome" exact="$order.$assignToHome"/>
                        <set_value name="$orderT.$responseRange" exact="$order.$responseRange"/>
                        <set_value name="$orderT.$allowedRisk" exact="$order.$allowedRisk"/>
                        <set_value name="$orderT.$shipResponse" exact="$order.$shipResponse"/>
                        <set_value name="$orderT.$shipFightResponse" exact="$order.$shipFightResponse"/>
                        <set_value name="$orderT.$hpCutoffShipFight" exact="$order.$hpCutoffShipFight"/>
                        <set_value name="$orderT.$stationResponse" exact="$order.$stationResponse"/>
                        <set_value name="$orderT.$hpCutoffStation" exact="$order.$hpCutoffStation"/>
                        <set_value name="$orderT.$def_timeout" exact="$order.$def_timeout"/>
                        <set_value name="$orderT.$playerResponse" exact="$order.$playerResponse"/>
                        <set_value name="$orderT.$distressResponse" exact="$order.$distressResponse"/>
                        <set_value name="$orderT.$notifyMe" exact="$order.$notifyMe"/>
                        <set_value name="$orderT.$attS" exact="$order.$attS"/>
                        <set_value name="$orderT.$attM" exact="$order.$attM"/>
                        <set_value name="$orderT.$attL" exact="$order.$attL"/>
                        <set_value name="$orderT.$attXL" exact="$order.$attXL"/>
                        <set_value name="$orderT.$reactionSubordinate" exact="$order.$reactionSubordinate"/>
                        <set_value name="$orderT.$activeResponse" exact="$order.$activeResponse"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DeadTater'">
                        <set_value name="$sector" exact="$order.$range" />
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$distancecheck" exact="$order.$distancecheck"/>
                        <set_value name="$orderT.$distancecheckpercent" exact="$order.$distancecheckpercent"/>
                        <set_value name="$orderT.$preferownfaction" exact="$order.$preferownfaction"/>
                        <set_value name="$orderT.$preferownfactionsell" exact="$order.$preferownfactionsell"/>
                        <set_value name="$orderT.$preferownfactionbuy" exact="$order.$preferownfactionbuy"/>
                        <set_value name="$orderT.$ignoretraderules" exact="$order.$ignoretraderules"/>
                        <set_value name="$orderT.$autowares" exact="$order.$autowares"/>
                        <set_value name="$orderT.$illegalwares" exact="$order.$illegalwares"/>
                        <set_value name="$orderT.$minfill" exact="$order.$minfill"/>
                        <set_value name="$orderT.$minfillpercent" exact="$order.$minfillpercent"/>
                        <set_value name="$orderT.$ignoreshipbuyers" exact="$order.$ignoreshipbuyers"/>
                        <set_value name="$orderT.$enablelogbook" exact="$order.$enablelogbook"/>
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TaterTrade'">
                        <set_value name="$sector" exact="$order.$home" />
                        <set_value name="$orderT.$home" exact="$order.$home"/>
                        <set_value name="$orderT.$returnhome" exact="$order.$returnhome"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$distancecheck" exact="$order.$distancecheck"/>
                        <set_value name="$orderT.$distancecheckpercent" exact="$order.$distancecheckpercent"/>
                        <set_value name="$orderT.$discount" exact="$order.$discount"/>
                        <set_value name="$orderT.$discount2" exact="$order.$discount2"/>
                        <set_value name="$orderT.$bypass" exact="$order.$bypass"/>
                        <set_value name="$orderT.$fasttrade" exact="$order.$fasttrade"/>
                        <set_value name="$orderT.$stationmode" exact="$order.$stationmode"/>
                        <set_value name="$orderT.$blackmarket" exact="$order.$blackmarket"/>
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$usepresets" exact="$order.$usepresets"/>
                        <set_value name="$orderT.$allwares" exact="$order.$allwares"/>
                        <set_value name="$orderT.$legalwares" exact="$order.$legalwares"/>
                        <set_value name="$orderT.$illegalwares" exact="$order.$illegalwares"/>
                        <set_value name="$orderT.$shipbuildingwares" exact="$order.$shipbuildingwares"/>
                        <set_value name="$orderT.$stationbuildingwares" exact="$order.$stationbuildingwares"/>
                        <set_value name="$orderT.$hightechwares" exact="$order.$hightechwares"/>
                        <set_value name="$orderT.$refinedwares" exact="$order.$refinedwares"/>
                        <set_value name="$orderT.$biowares" exact="$order.$biowares"/>
                        <set_value name="$orderT.$largelegalwares" exact="$order.$largelegalwares"/>
                        <set_value name="$orderT.$mediumlegalwares" exact="$order.$mediumlegalwares"/>
                        <set_value name="$orderT.$smalllegalwares" exact="$order.$smalllegalwares"/>
                        <set_value name="$orderT.$excludedsectors" exact="$order.$excludedsectors"/>
                        <set_value name="$orderT.$includedsectors" exact="$order.$includedsectors"/>
                        <set_value name="$orderT.$enablebans" exact="$order.$enablebans"/>
                        <set_value name="$orderT.$playerban" exact="$order.$playerban"/>
                        <set_value name="$orderT.$argonban" exact="$order.$argonban"/>
                        <set_value name="$orderT.$antigoneban" exact="$order.$antigoneban"/>
                        <set_value name="$orderT.$teladiban" exact="$order.$teladiban"/>
                        <set_value name="$orderT.$ministryban" exact="$order.$ministryban"/>
                        <set_value name="$orderT.$paranidban" exact="$order.$paranidban"/>
                        <set_value name="$orderT.$holyorderban" exact="$order.$holyorderban"/>
                        <set_value name="$orderT.$allianceban" exact="$order.$allianceban"/>
                        <set_value name="$orderT.$trinityban" exact="$order.$trinityban"/>
                        <set_value name="$orderT.$splitban" exact="$order.$splitban"/>
                        <set_value name="$orderT.$freesplitban" exact="$order.$freesplitban"/>
                        <set_value name="$orderT.$courtban" exact="$order.$courtban"/>
                        <set_value name="$orderT.$buccaneersban" exact="$order.$buccaneersban"/>
                        <set_value name="$orderT.$fallensplitban" exact="$order.$fallensplitban"/>
                        <set_value name="$orderT.$hatikvahban" exact="$order.$hatikvahban"/>
                        <set_value name="$orderT.$scaleplateban" exact="$order.$scaleplateban"/>
                        <set_value name="$orderT.$pioneersban" exact="$order.$pioneersban"/>
                        <set_value name="$orderT.$terranban" exact="$order.$terranban"/>
                        <set_value name="$orderT.$scanspeed" exact="$order.$scanspeed"/>
                        <set_value name="$orderT.$enablelogbook" exact="$order.$enablelogbook"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Assist'">
                        <set_value name="$orderT.$baseorder" exact="$order.$baseorder"/>
                        <set_value name="$orderT.$orderobject" exact="$order.$orderobject"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DeployToStation'">
                        <set_value name="$sector" exact="$order.$station.sector" />
                        <set_value name="$orderT.$station" exact="$order.$station"/>
                        <set_value name="$orderT.$waitduration" exact="$order.$waitduration"/>
                        <set_value name="$orderT.$abandonbuildtime" exact="$order.$abandonbuildtime"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Equip'">
                        <set_value name="$orderT.$build" exact="$order.build"/>
                        <set_value name="$orderT.$subordinateorders" exact="$order.$subordinateorders"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'FindBuildTasks'">
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$maxjumps" exact="$order.$maxjumps"/>
                        <set_value name="$orderT.$playeronly" exact="$order.$playeronly"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Recycle'">
                        <set_value name="$orderT.$build" exact="$order.$build"/>
                        <set_value name="$orderT.$usecover" exact="$order.$usecover"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'CollectDeployables'">
                        <set_value name="$orderT.$targetlist" exact="$order.$targetlist"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'CollectLockbox'">
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'CollectDropsInRadius'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Collect'">
                        <set_value name="$orderT.$targetlist" exact="$order.$targetlist"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DeployStaticDefenseStrategy'">
                        <set_value name="$orderT.$staticdefensestrategy" exact="$order.$staticdefensestrategy"/>
                        <set_value name="$orderT.$isminesonly" exact="$order.$isminesonly"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DeployObjectAtPosition'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$objectstodeploy" exact="$order.$objectstodeploy"/>
                        <set_value name="$orderT.$amountstodeploy" exact="$order.$amountstodeploy"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DeployObjectsAtGates'">
                        <set_value name="$sector" exact="$order.$targetsector" />
                        <set_value name="$orderT.$targetsector" exact="$order.$targetsector"/>
                        <set_value name="$orderT.$deployablecategory" exact="$order.$deployablecategory"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Player_DockToTrade'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$waittime" exact="$order.$waittime"/>
                        <set_value name="$orderT.$dockfollowers" exact="$order.$dockfollowers"/>
                        <set_value name="$orderT.$subordinateorders" exact="$order.$subordinateorders"/>
                        <set_value name="$orderT.$dockorder" exact="$order.$dockorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DockAndWait'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$building" exact="$order.$building"/>
                        <set_value name="$orderT.$trading" exact="$order.$trading"/>
                        <set_value name="$orderT.$allowplayeronly" exact="$order.$allowplayeronly"/>
                        <set_value name="$orderT.$ventureplatform" exact="$order.$ventureplatform"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$waittime" exact="$order.$waittime"/>
                        <set_value name="$orderT.$dockfollowers" exact="$order.$dockfollowers"/>
                        <set_value name="$orderT.$releasesignal" exact="$order.$releasesignal"/>
                        <set_value name="$orderT.$subordinateorders" exact="$order.$subordinateorders"/>
                        <set_value name="$orderT.$dockorder" exact="$order.$dockorder"/>
                        <set_value name="$orderT.$callerid" exact="$order.$callerid"/>
                        <set_value name="$orderT.$undockhandler" exact="$order.$undockhandler"/>
                        <set_value name="$orderT.$isdockfollower" exact="$order.$isdockfollower"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$noboost" exact="$order.$noboost"/>
                        <set_value name="$orderT.$uselocalhighways" exact="$order.$uselocalhighways"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DockAt'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$building" exact="$order.$building"/>
                        <set_value name="$orderT.$trading" exact="$order.$trading"/>
                        <set_value name="$orderT.$allowplayeronly" exact="$order.$allowplayeronly"/>
                        <set_value name="$orderT.$ventureplatform" exact="$order.$ventureplatform"/>
                        <set_value name="$orderT.$useentrypos" exact="$order.$useentrypos"/>
                        <set_value name="$orderT.$dockfollowers" exact="$order.$dockfollowers"/>
                        <set_value name="$orderT.$abouttofinish" exact="$order.$abouttofinish"/>
                        <set_value name="$orderT.$waittime" exact="$order.$waittime"/>
                        <set_value name="$orderT.$store" exact="$order.$store"/>
                        <set_value name="$orderT.$dockandwaitid" exact="$order.$dockandwaitid"/>
                        <set_value name="$orderT.$callerid" exact="$order.$callerid"/>
                        <set_value name="$orderT.$isdockfollower" exact="$order.$isdockfollower"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$noboost" exact="$order.$noboost"/>
                        <set_value name="$orderT.$uselocalhighways" exact="$order.$uselocalhighways"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'AttackInRange'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$pursuetargets" exact="$order.$pursuetargets"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Attack'">
                        <set_value name="$sector" exact="$order.$primarytarget.sector" />
                        <set_value name="$orderT.$primarytarget" exact="$order.$primarytarget"/>
                        <set_value name="$orderT.$secondarytargets" exact="$order.$secondarytargets"/>
                        <set_value name="$orderT.$escort" exact="$order.$escort"/>
                        <set_value name="$orderT.$pursuedistance" exact="$order.$pursuedistance"/>
                        <set_value name="$orderT.$pursuetargets" exact="$order.$pursuetargets"/>
                        <set_value name="$orderT.$allowothertargets" exact="$order.$allowothertargets"/>
                        <set_value name="$orderT.$checkrelation" exact="$order.$checkrelation"/>
                        <set_value name="$orderT.$disable" exact="$order.$disable"/>
                        <set_value name="$orderT.$disablehullpercentagethreshold" exact="$order.$disablehullpercentagethreshold"/>
                        <set_value name="$orderT.$disabletargets" exact="$order.$disabletargets"/>
                        <set_value name="$orderT.$minrange" exact="$order.$minrange"/>
                        <set_value name="$orderT.$maxrange" exact="$order.$maxrange"/>
                        <set_value name="$orderT.$maintaindistance" exact="$order.$maintaindistance"/>
                        <set_value name="$orderT.$squad_attack" exact="$order.$squad_attack"/>
                        <set_value name="$orderT.$boardingbehavior" exact="$order.$boardingbehavior"/>
                        <set_value name="$orderT.$behaviortargetclasses" exact="$order.$behaviortargetclasses"/>
                        <set_value name="$orderT.$uncover" exact="$order.$uncover"/>
                        <set_value name="$orderT.$targetclasses" exact="$order.$targetclasses"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$radiusanchorpos" exact="$order.$radiusanchorpos"/>
                        <set_value name="$orderT.$radiusanchorspace" exact="$order.$radiusanchorspace"/>
                        <set_value name="$orderT.$allowboost" exact="$order.$allowboost"/>
                        <set_value name="$orderT.$forceprimarytarget" exact="$order.$forceprimarytarget"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Board'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$boardingoperation" exact="$order.$boardingoperation"/>
                        <set_value name="$orderT.$pursuedistance" exact="$order.$pursuedistance"/>
                        <set_value name="$orderT.$pursuetargets" exact="$order.$pursuetargets"/>
                        <set_value name="$orderT.$squad_attack" exact="$order.$squad_attack"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Escort'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$formation" exact="$order.$formation"/>
                        <set_value name="$orderT.$formationparam" exact="$order.$formationparam"/>
                        <set_value name="$orderT.$rollmembers" exact="$order.$rollmembers"/>
                        <set_value name="$orderT.$rollformation" exact="$order.$rollformation"/>
                        <set_value name="$orderT.$maxshipsperline" exact="$order.$maxshipsperline"/>
                        <set_value name="$orderT.$pursuedistance" exact="$order.$pursuedistance"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$overrideformationskill" exact="$order.$overrideformationskill"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$releasesignal" exact="$order.$releasesignal"/>
                        <set_value name="$orderT.$subordinateorders" exact="$order.$subordinateorders"/>
                        <set_value name="$orderT.$endontargetdeath" exact="$order.$endontargetdeath"/>
                        <set_value name="$orderT.$thresholdbreak" exact="$order.$thresholdbreak"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Lasertower'">
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Patrol'">
                        <set_value name="$sector" exact="$order.$space" />
                        <set_value name="$orderT.$space" exact="$order.$space"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$pursuetargets" exact="$order.$pursuetargets"/>
                        <set_value name="$orderT.$pursuedistance" exact="$order.$pursuedistance"/>
                        <set_value name="$orderT.$includeroute" exact="$order.$includeroute"/>
                        <set_value name="$orderT.$allowothertargets" exact="$order.$allowothertargets"/>
                        <set_value name="$orderT.$targetpurposes" exact="$order.$targetpurposes"/>
                        <set_value name="$orderT.$stayinspace" exact="$order.$stayinspace"/>
                        <set_value name="$orderT.$usebasket" exact="$order.$usebasket"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$engageonlyonline" exact="$order.$engageonlyonline"/>
                        <set_value name="$orderT.$targetclasses" exact="$order.$targetclasses"/>
                        <set_value name="$orderT.$stayhidden" exact="$order.$stayhidden"/>
                        <set_value name="$orderT.$organizesubordinates" exact="$order.$organizesubordinates"/>
                        <set_value name="$orderT.$defences_maxgatedistance" exact="$order.$defences_maxgatedistance"/>
                        <set_value name="$orderT.$defences_includedassignments" exact="$order.$defences_includedassignments"/>
                        <set_value name="$orderT.$checkrelation" exact="$order.$checkrelation"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'ProtectPosition'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$pursuetargets" exact="$order.$pursuetargets"/>
                        <set_value name="$orderT.$attackonsight" exact="$order.$attackonsight"/>
                        <set_value name="$orderT.$reinforcefleet" exact="$order.$reinforcefleet"/>
                        <set_value name="$orderT.$resupplyatfleet" exact="$order.$resupplyatfleet"/>
                        <set_value name="$orderT.$flagship" exact="$order.$flagship"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'ProtectShip'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$pursuedistance" exact="$order.$pursuedistance"/>
                        <set_value name="$orderT.$untilclaimed" exact="$order.$untilclaimed"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'ProtectStation'">
                        <set_value name="$sector" exact="$order.$station.sector" />
                        <set_value name="$orderT.$station" exact="$order.$station"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TacticalOrder'">
                        <set_value name="$sector" exact="$order.$selectedtarget.sector" />
                        <set_value name="$orderT.$selectedtarget" exact="$order.$selectedtarget"/>
                        <set_value name="$orderT.$aggressiveness" exact="$order.$aggressiveness"/>
                        <set_value name="$orderT.$weakfirst" exact="$order.$weakfirst"/>
                        <set_value name="$orderT.$xdistance" exact="$order.$xdistance"/>
                        <set_value name="$orderT.$zdistance" exact="$order.$zdistance"/>
                        <set_value name="$orderT.$allowothertargets" exact="$order.$allowothertargets"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$releasemove" exact="$order.$releasemove"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningCollect'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$ware" exact="$order.$ware"/>
                        <set_value name="$orderT.$secwares" exact="$order.$secwares"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$time_started" exact="$order.$time_started"/>
                        <set_value name="$orderT.$debug_eco" exact="$order.$debug_eco"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningPlayer'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$ware" exact="$order.$ware"/>
                        <set_value name="$orderT.$secwares" exact="$order.$secwares"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningRoutine_Advanced'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningRoutine_Basic'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningRoutine_Expert'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MiningRoutine'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$deepspace" exact="$order.$deepspace"/>
                        <set_value name="$orderT.$resourcescout" exact="$order.$resourcescout"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$endtime" exact="$order.$endtime"/>
                        <set_value name="$orderT.$effectiveskill" exact="$order.$effectiveskill"/>
                        <set_value name="$orderT.$preferownspace" exact="$order.$preferownspace"/>
                        <set_value name="$orderT.$warebasket_override" exact="$order.$warebasket_override"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MoveDie'">
                        <set_value name="$orderT.$mintime" exact="$order.$mintime"/>
                        <set_value name="$orderT.$atstation" exact="$order.$atstation"/>
                        <set_value name="$orderT.$byhighway" exact="$order.$byhighway"/>
                        <set_value name="$orderT.$byhostile" exact="$order.$byhostile"/>
                        <set_value name="$orderT.$byidle" exact="$order.$byidle"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Follow'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$commandaction" exact="$order.$commandaction"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MoveToPlanet'">
                        <set_value name="$orderT.$direction" exact="$order.$direction"/>
                        <set_value name="$orderT.$distance" exact="$order.$distance"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Explore'">
                        <set_value name="$sector" exact="$order.$targetspace" />
                        <set_value name="$orderT.$targetspace" exact="$order.$targetspace"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$deploysatellites" exact="$order.$deploysatellites"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Police'">
                        <set_value name="$sector" exact="$order.$targetspace" />
                        <set_value name="$orderT.$targetspace" exact="$order.$targetspace"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$hq" exact="$order.$hq"/>
                        <set_value name="$orderT.$targetclasses" exact="$order.$targetclasses"/>
                        <set_value name="$orderT.$targetpurposes" exact="$order.$targetpurposes"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$deploysatellites" exact="$order.$deploysatellites"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'ExploreUpdate'">
                        <set_value name="$sector" exact="$order.$targetspace" />
                        <set_value name="$orderT.$targetspace" exact="$order.$targetspace"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$targetclasses" exact="$order.$targetclasses"/>
                        <set_value name="$orderT.$deploysatellites" exact="$order.$deploysatellites"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Recon'">
                        <set_value name="$sector" exact="$order.$targetspace" />
                        <set_value name="$orderT.$targetspace" exact="$order.$targetspace"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$hq" exact="$order.$hq"/>
                        <set_value name="$orderT.$targetclasses" exact="$order.$targetclasses"/>
                        <set_value name="$orderT.$targetpurposes" exact="$order.$targetpurposes"/>
                        <set_value name="$orderT.$police" exact="$order.$police"/>
                        <set_value name="$orderT.$exploreupdate" exact="$order.$exploreupdate"/>
                        <set_value name="$orderT.$resourcescout" exact="$order.$resourcescout"/>
                        <set_value name="$orderT.$blindtourist" exact="$order.$blindtourist"/>
                        <set_value name="$orderT.$deploysatellites" exact="$order.$deploysatellites"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Taxi'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MoveToObject'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$fidget" exact="$order.$fidget"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'MoveWait'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$withdraw" exact="$order.$withdraw"/>
                        <set_value name="$orderT.$precise" exact="$order.$precise"/>
                        <set_value name="$orderT.$playerprecise" exact="$order.$playerprecise"/>
                        <set_value name="$orderT.$waitforatgate" exact="$order.$waitforatgate"/>
                        <set_value name="$orderT.$recallsubordinates" exact="$order.$recallsubordinates"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$lookat" exact="$order.$lookat"/>
                        <set_value name="$orderT.$fidget" exact="$order.$fidget"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'PlayerAttack'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$secondarytargets" exact="$order.$secondarytargets"/>
                        <set_value name="$orderT.$escort" exact="$order.$escort"/>
                        <set_value name="$orderT.$squad_attack" exact="$order.$squad_attack"/>
                        <set_value name="$orderT.$allowothertargets" exact="$order.$allowothertargets"/>
                        <set_value name="$orderT.$checkrelation" exact="$order.$checkrelation"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Plunder'">
                        <set_value name="$sector" exact="$order.$space" />
                        <set_value name="$orderT.$space" exact="$order.$space"/>
                        <set_value name="$orderT.$base" exact="$order.$base"/>
                        <set_value name="$orderT.$returntobase" exact="$order.$returntobase"/>
                        <set_value name="$orderT.$findbaseowner" exact="$order.$findbaseowner"/>
                        <set_value name="$orderT.$basebasket" exact="$order.$basebasket"/>
                        <set_value name="$orderT.$forcetransfer" exact="$order.$forcetransfer"/>
                        <set_value name="$orderT.$deepspace" exact="$order.$deepspace"/>
                        <set_value name="$orderT.$checkrelation" exact="$order.$checkrelation"/>
                        <set_value name="$orderT.$plundermode" exact="$order.$plundermode"/>
                        <set_value name="$orderT.$range_internal" exact="$order.$range_internal"/>
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$module" exact="$order.$module"/>
                        <set_value name="$orderT.$movetomodule" exact="$order.$movetomodule"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'RecallSubordinates'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$activepatrol" exact="$order.$activepatrol"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$safetodockat" exact="$order.$safetodockat"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'RecycleDefault'">
                        <set_value name="$orderT.$preferredstation" exact="$order.$preferredstation"/>
                        <set_value name="$orderT.$stationstoavoid" exact="$order.$stationstoavoid"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Repair'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$hullpercent" exact="$order.$hullpercent"/>
                        <set_value name="$orderT.$damagedcomponents" exact="$order.$damagedcomponents"/>
                        <set_value name="$orderT.$repairall" exact="$order.$repairall"/>
                        <set_value name="$orderT.$acceptedcost" exact="$order.$acceptedcost"/>
                        <set_value name="$orderT.$urgent" exact="$order.$urgent"/>
                        <set_value name="$orderT.$blacklist_stations" exact="$order.$blacklist_stations"/>
                        <set_value name="$orderT.$subordinaterepairorders" exact="$order.$subordinaterepairorders"/>
                        <set_value name="$orderT.$subordinateorders" exact="$order.$subordinateorders"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'GetSupplies'">
                        <set_value name="$orderT.$maxsearchrange" exact="$order.$maxsearchrange"/>
                        <set_value name="$orderT.$anchorsector" exact="$order.$anchorsector"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'RestockSubordinates'">
                        <set_value name="$orderT.$init" exact="$order.$init"/>
                        <set_value name="$orderT.$jumps" exact="$order.$jumps"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Resupply'">
                        <set_value name="$orderT.$repair" exact="$order.$repair"/>
                        <set_value name="$orderT.$hullpercent" exact="$order.$hullpercent"/>
                        <set_value name="$orderT.$damagedcomponents" exact="$order.$damagedcomponents"/>
                        <set_value name="$orderT.$repairall" exact="$order.$repairall"/>
                        <set_value name="$orderT.$repaircost" exact="$order.$repaircost"/>
                        <set_value name="$orderT.$resupply_ammo" exact="$order.$resupply_ammo"/>
                        <set_value name="$orderT.$resupply_units" exact="$order.$resupply_units"/>
                        <set_value name="$orderT.$restock_subordinates" exact="$order.$restock_subordinates"/>
                        <set_value name="$orderT.$param_station" exact="$order.$param_station"/>
                        <set_value name="$orderT.$urgent" exact="$order.$urgent"/>
                        <set_value name="$orderT.$blacklist_stations" exact="$order.$blacklist_stations"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$onlyuseresupplierships" exact="$order.$onlyuseresupplierships"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageCollect'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageCrush'">
                        <set_value name="$sector" exact="$order.$target.sector" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageDeliver_NoTrade'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageDeliver'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageInRadius'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SalvageRoutine'">
                        <set_value name="$sector" exact="$order.$anchorspace" />
                        <set_value name="$orderT.$anchorspace" exact="$order.$anchorspace"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SupplyFleet'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$target" exact="$order.$target"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$formation" exact="$order.$formation"/>
                        <set_value name="$orderT.$formationparam" exact="$order.$formationparam"/>
                        <set_value name="$orderT.$rollmembers" exact="$order.$rollmembers"/>
                        <set_value name="$orderT.$rollformation" exact="$order.$rollformation"/>
                        <set_value name="$orderT.$maxshipsperline" exact="$order.$maxshipsperline"/>
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$overrideformationskill" exact="$order.$overrideformationskill"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$releasesignal" exact="$order.$releasesignal"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'CrewExchangePassive'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$overridepassive" exact="$order.$overridepassive"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'CrewExchange'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$overridepassive" exact="$order.$overridepassive"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'DepositInventory'">
                        <set_value name="$sector" exact="$order.$destination.{1}" />
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'Middleman'">
                        <set_value name="$sector" exact="$order.$anchorspace" />
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$anchorspace" exact="$order.$anchorspace"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$tradeware" exact="$order.$tradeware"/>
                        <set_value name="$orderT.$relprice_purchase" exact="$order.$relprice_purchase"/>
                        <set_value name="$orderT.$supplier" exact="$order.$supplier"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$endtime" exact="$order.$endtime"/>
                        <set_value name="$orderT.$aggressiveness" exact="$order.$aggressiveness"/>
                        <set_value name="$orderT.$holdbuyprice" exact="$order.$holdbuyprice"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradePerform'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeRoutine_Advanced'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$tradeforbuildstorage" exact="$order.$tradeforbuildstorage"/>
                        <set_value name="$orderT.$usecover" exact="$order.$usecover"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeRoutine_Basic'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$tradeforbuildstorage" exact="$order.$tradeforbuildstorage"/>
                        <set_value name="$orderT.$usecover" exact="$order.$usecover"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeRoutine'">
                        <set_value name="$orderT.$warebasket" exact="$order.$warebasket"/>
                        <set_value name="$orderT.$range" exact="$order.$range"/>
                        <set_value name="$orderT.$minbuy" exact="$order.$minbuy"/>
                        <set_value name="$orderT.$maxbuy" exact="$order.$maxbuy"/>
                        <set_value name="$orderT.$minsell" exact="$order.$minsell"/>
                        <set_value name="$orderT.$maxsell" exact="$order.$maxsell"/>
                        <set_value name="$orderT.$duration" exact="$order.$duration"/>
                        <set_value name="$orderT.$endtime" exact="$order.$endtime"/>
                        <set_value name="$orderT.$tradeforbuildstorage" exact="$order.$tradeforbuildstorage"/>
                        <set_value name="$orderT.$usecover" exact="$order.$usecover"/>
                        <set_value name="$orderT.$preferredcoverfactions" exact="$order.$preferredcoverfactions"/>
                        <set_value name="$orderT.$buyfromfactions" exact="$order.$buyfromfactions"/>
                        <set_value name="$orderT.$selltofactions" exact="$order.$selltofactions"/>
                        <set_value name="$orderT.$warebasket_override" exact="$order.$warebasket_override"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                        <set_value name="$orderT.$debugchance2" exact="$order.$debugchance2"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SingleBuy'">
                        <set_value name="$orderT.$ware" exact="$order.$ware"/>
                        <set_value name="$orderT.$centerpos" exact="$order.$centerpos"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$locations" exact="$order.$locations"/>
                        <set_value name="$orderT.$maxamount" exact="$order.$maxamount"/>
                        <set_value name="$orderT.$minamount" exact="$order.$minamount"/>
                        <set_value name="$orderT.$pricethreshold" exact="$order.$pricethreshold"/>
                        <set_value name="$orderT.$unbundle" exact="$order.$unbundle"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$gotrade" exact="$order.$gotrade"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SingleSell'">
                        <set_value name="$orderT.$ware" exact="$order.$ware"/>
                        <set_value name="$orderT.$centerpos" exact="$order.$centerpos"/>
                        <set_value name="$orderT.$radius" exact="$order.$radius"/>
                        <set_value name="$orderT.$locations" exact="$order.$locations"/>
                        <set_value name="$orderT.$maxamount" exact="$order.$maxamount"/>
                        <set_value name="$orderT.$minamount" exact="$order.$minamount"/>
                        <set_value name="$orderT.$pricethreshold" exact="$order.$pricethreshold"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$gotrade" exact="$order.$gotrade"/>
                        <set_value name="$orderT.$salvage" exact="$order.$salvage"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'SingleTrade'">
                        <set_value name="$orderT.$ware" exact="$order.$ware"/>
                        <set_value name="$orderT.$locations" exact="$order.$locations"/>
                        <set_value name="$orderT.$maxamount" exact="$order.$maxamount"/>
                        <set_value name="$orderT.$minamount" exact="$order.$minamount"/>
                        <set_value name="$orderT.$pricethreshold" exact="$order.$pricethreshold"/>
                        <set_value name="$orderT.$sell" exact="$order.$sell"/>
                        <set_value name="$orderT.$unbundle" exact="$order.$unbundle"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$gotrade" exact="$order.$gotrade"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeExchangeNonShip'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$internalorder" exact="$order.$internalorder"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeExchangePassive'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TradeExchange'">
                        <set_value name="$orderT.$tradedeal" exact="$order.$tradedeal"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TransferWorkersRoutine'">
                        <set_value name="$orderT.$targetsector" exact="$order.$targetsector"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'TransferWorkers'">
                        <set_value name="$orderT.$origin" exact="$order.$origin"/>
                        <set_value name="$orderT.$destination" exact="$order.$destination"/>
                        <set_value name="$orderT.$numpeople" exact="$order.$numpeople"/>
                        <set_value name="$orderT.$species" exact="$order.$species"/>
                        <set_value name="$orderT.$cannotdock" exact="$order.$cannotdock"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'WaitForSignal'">
                        <set_value name="$orderT.$timeout" exact="$order.$timeout"/>
                        <set_value name="$orderT.$allowdocked" exact="$order.$allowdocked"/>
                        <set_value name="$orderT.$allowparked" exact="$order.$allowparked"/>
                        <set_value name="$orderT.$releasesignal" exact="$order.$releasesignal"/>
                        <set_value name="$orderT.$signaller" exact="$order.$signaller"/>
                        <set_value name="$orderT.$alignwithecliptic" exact="$order.$alignwithecliptic"/>
                        <set_value name="$orderT.$noattackresponse" exact="$order.$noattackresponse"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_elseif value="$order.id == 'WaitForVenture'">
                        <set_value name="$orderT.$ventureplatform" exact="$order.$ventureplatform"/>
                        <set_value name="$orderT.$debugchance" exact="$order.$debugchance"/>
                    </do_elseif>
                    <do_else comment="id='Wait'">
                        <!-- MoveWait gibi davrandıracağız ancak idsini değişmeyeceğiz-->
                        <set_value name="$sector" exact="if $ship.sector == null then $ship.zone else $ship.sector" />
                        <set_value name="$orderT.$destination" exact="[$sector, $ship.position]"/>
                    </do_else>
                </do_if>

                <do_if value="$sector == null">
                    <set_value name="$sector" exact="if $ship.sector == null then $ship.zone else $ship.sector" />
                </do_if>

                <return value="[$orderT, $sector]"/>
            </actions>
        </library>
        <!-- OrderTable'yi belirtilen gemiye setler
            IN  :  order paarametrelerini içeren table
                    ship : order aktarılacak gemi
                    defaultorder a mı aktarılacak (default = false)
            OUT : none  -->
        <library name="Add_OrderTable_To_Ship" purpose="run_actions">
            <params>
                <param name="orderT" />
                <param name="ship" />
                <param name="defaultorder" default="true" />
            </params>
            <actions>
                <do_if value="$orderT.$id == 'AssignCommander'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="commander" value="$orderT.$commander" />
                        <param name="assignment" value="$orderT.$assignment" />
                        <param name="subordinategroup" value="$orderT.$subordinategroup" />
                        <param name="setgroupassignment" value="$orderT.$setgroupassignment" />
                        <param name="cancelorders" value="$orderT.$cancelorders" />
                        <param name="response" value="$orderT.$response" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_if>
                <do_elseif value="$orderT.$id == 'SectorExplorer'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="fs_usecore" value="$orderT.$fs_usecore" />
                        <param name="fs_skiphexagon" value="$orderT.$fs_skiphexagon" />
                        <param name="fs_lockbox" value="$orderT.$fs_lockbox" />
                        <param name="fs_abandoned" value="$orderT.$fs_abandoned" />
                        <param name="fs_vaults" value="$orderT.$fs_vaults" />
                        <param name="fs_continue" value="$orderT.$fs_continue" />
                        <param name="fs_stations" value="$orderT.$fs_stations" />
                        <param name="fs_radius" value="$orderT.$fs_radius" />
                        <param name="fs_delta" value="$orderT.$fs_delta" />
                        <param name="fs_satscan" value="$orderT.$fs_satscan" />
                        <param name="fs_reset" value="$orderT.$fs_reset" />
                        <param name="fs_notify" value="$orderT.$fs_notify" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'InventoryCollector'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="fs_small_ships" value="$orderT.$fs_small_ships" />
                        <param name="fs_medium_ships" value="$orderT.$fs_medium_ships" />
                        <param name="fs_capital_ships" value="$orderT.$fs_capital_ships" />
                        <param name="fs_globalbl" value="$orderT.$fs_globalbl" />
                        <param name="fs_blacklist" value="$orderT.$fs_blacklist" />
                        <param name="fs_deposit_to_hq" value="$orderT.$fs_deposit_to_hq" />
                        <param name="fs_deposit_to_player" value="$orderT.$fs_deposit_to_player" />
                        <param name="fs_revisit_interval" value="$orderT.$fs_revisit_interval" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SectorPatrol'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="fs_space" value="$orderT.$fs_space" />
                        <param name="fs_attack_stations" value="$orderT.$fs_attack_stations" />
                        <param name="fs_attack_xl" value="$orderT.$fs_attack_xl" />
                        <param name="fs_attack_l" value="$orderT.$fs_attack_l" />
                        <param name="fs_attack_m" value="$orderT.$fs_attack_m" />
                        <param name="fs_attack_s" value="$orderT.$fs_attack_s" />
                        <param name="fs_pirates" value="$orderT.$fs_pirates" />
                        <param name="fs_pursue" value="$orderT.$fs_pursue" />
                        <param name="fs_noboost" value="$orderT.$fs_noboost" />
                        <param name="fs_disable" value="$orderT.$fs_disable" />
                        <param name="fs_park" value="$orderT.$fs_park" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'ReactionForce'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="homePos" value="$orderT.$homePos" />
                        <param name="home" value="$orderT.$home" />
                        <param name="whenIdle" value="$orderT.$whenIdle" />
                        <param name="assignToHome" value="$orderT.$assignToHome" />
                        <param name="responseRange" value="$orderT.$responseRange" />
                        <param name="allowedRisk" value="$orderT.$allowedRisk" />
                        <param name="shipResponse" value="$orderT.$shipResponse" />
                        <param name="shipFightResponse" value="$orderT.$shipFightResponse" />
                        <param name="hpCutoffShipFight" value="$orderT.$hpCutoffShipFight" />
                        <param name="stationResponse" value="$orderT.$stationResponse" />
                        <param name="hpCutoffStation" value="$orderT.$hpCutoffStation" />
                        <param name="def_timeout" value="$orderT.$def_timeout" />
                        <param name="playerResponse" value="$orderT.$playerResponse" />
                        <param name="distressResponse" value="$orderT.$distressResponse" />
                        <param name="notifyMe" value="$orderT.$notifyMe" />
                        <param name="attS" value="$orderT.$attS" />
                        <param name="attM" value="$orderT.$attM" />
                        <param name="attL" value="$orderT.$attL" />
                        <param name="attXL" value="$orderT.$attXL" />
                        <param name="reactionSubordinate" value="$orderT.$reactionSubordinate" />
                        <param name="activeResponse" value="$orderT.$activeResponse" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DeadTater'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <param name="distancecheck" value="$orderT.$distancecheck" />
                        <param name="distancecheckpercent" value="$orderT.$distancecheckpercent" />
                        <param name="preferownfaction" value="$orderT.$preferownfaction" />
                        <param name="preferownfactionsell" value="$orderT.$preferownfactionsell" />
                        <param name="preferownfactionbuy" value="$orderT.$preferownfactionbuy" />
                        <param name="ignoretraderules" value="$orderT.$ignoretraderules" />
                        <param name="autowares" value="$orderT.$autowares" />
                        <param name="illegalwares" value="$orderT.$illegalwares" />
                        <param name="minfill" value="$orderT.$minfill" />
                        <param name="minfillpercent" value="$orderT.$minfillpercent" />
                        <param name="ignoreshipbuyers" value="$orderT.$ignoreshipbuyers" />
                        <param name="enablelogbook" value="$orderT.$enablelogbook" />
                        <param name="warebasket" value="$orderT.$warebasket" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TaterTrade'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="home" value="$orderT.$home" />
                        <param name="returnhome" value="$orderT.$returnhome" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <param name="distancecheck" value="$orderT.$distancecheck" />
                        <param name="distancecheckpercent" value="$orderT.$distancecheckpercent" />
                        <param name="discount" value="$orderT.$discount" />
                        <param name="discount2" value="$orderT.$discount2" />
                        <param name="bypass" value="$orderT.$bypass" />
                        <param name="fasttrade" value="$orderT.$fasttrade" />
                        <param name="stationmode" value="$orderT.$stationmode" />
                        <param name="blackmarket" value="$orderT.$blackmarket" />
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="usepresets" value="$orderT.$usepresets" />
                        <param name="allwares" value="$orderT.$allwares" />
                        <param name="legalwares" value="$orderT.$legalwares" />
                        <param name="illegalwares" value="$orderT.$illegalwares" />
                        <param name="shipbuildingwares" value="$orderT.$shipbuildingwares" />
                        <param name="stationbuildingwares" value="$orderT.$stationbuildingwares" />
                        <param name="hightechwares" value="$orderT.$hightechwares" />
                        <param name="refinedwares" value="$orderT.$refinedwares" />
                        <param name="biowares" value="$orderT.$biowares" />
                        <param name="largelegalwares" value="$orderT.$largelegalwares" />
                        <param name="mediumlegalwares" value="$orderT.$mediumlegalwares" />
                        <param name="smalllegalwares" value="$orderT.$smalllegalwares" />
                        <param name="excludedsectors" value="$orderT.$excludedsectors" />
                        <param name="includedsectors" value="$orderT.$includedsectors" />
                        <param name="enablebans" value="$orderT.$enablebans" />
                        <param name="playerban" value="$orderT.$playerban" />
                        <param name="argonban" value="$orderT.$argonban" />
                        <param name="antigoneban" value="$orderT.$antigoneban" />
                        <param name="teladiban" value="$orderT.$teladiban" />
                        <param name="ministryban" value="$orderT.$ministryban" />
                        <param name="paranidban" value="$orderT.$paranidban" />
                        <param name="holyorderban" value="$orderT.$holyorderban" />
                        <param name="allianceban" value="$orderT.$allianceban" />
                        <param name="trinityban" value="$orderT.$trinityban" />
                        <param name="splitban" value="$orderT.$splitban" />
                        <param name="freesplitban" value="$orderT.$freesplitban" />
                        <param name="courtban" value="$orderT.$courtban" />
                        <param name="buccaneersban" value="$orderT.$buccaneersban" />
                        <param name="fallensplitban" value="$orderT.$fallensplitban" />
                        <param name="hatikvahban" value="$orderT.$hatikvahban" />
                        <param name="scaleplateban" value="$orderT.$scaleplateban" />
                        <param name="pioneersban" value="$orderT.$pioneersban" />
                        <param name="terranban" value="$orderT.$terranban" />
                        <param name="scanspeed" value="$orderT.$scanspeed" />
                        <param name="enablelogbook" value="$orderT.$enablelogbook" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Assist'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="baseorder" value="$orderT.$baseorder" />
                        <param name="orderobject" value="$orderT.$orderobject" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DeployToStation'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="station" value="$orderT.$station" />
                        <param name="waitduration" value="$orderT.$waitduration" />
                        <param name="abandonbuildtime" value="$orderT.$abandonbuildtime" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Equip'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="build" value="$orderT.$build" />
                        <param name="subordinateorders" value="$orderT.$subordinateorders" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'FindBuildTasks'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="range" value="$orderT.$range" />
                        <param name="maxjumps" value="$orderT.$maxjumps" />
                        <param name="playeronly" value="$orderT.$playeronly" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Recycle'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="build" value="$orderT.$build" />
                        <param name="usecover" value="$orderT.$usecover" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'CollectDeployables'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetlist" value="$orderT.$targetlist" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'CollectLockbox'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'CollectDropsInRadius'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Collect'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetlist" value="$orderT.$targetlist" />
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DeployStaticDefenseStrategy'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="staticdefensestrategy" value="$orderT.$staticdefensestrategy" />
                        <param name="isminesonly" value="$orderT.$isminesonly" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DeployObjectAtPosition'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="objectstodeploy" value="$orderT.$objectstodeploy" />
                        <param name="amountstodeploy" value="$orderT.$amountstodeploy" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DeployObjectsAtGates'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetsector" value="$orderT.$targetsector" />
                        <param name="deployablecategory" value="$orderT.$deployablecategory" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Player_DockToTrade'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="waittime" value="$orderT.$waittime" />
                        <param name="dockfollowers" value="$orderT.$dockfollowers" />
                        <param name="subordinateorders" value="$orderT.$subordinateorders" />
                        <param name="dockorder" value="$orderT.$dockorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DockAndWait'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="building" value="$orderT.$building" />
                        <param name="trading" value="$orderT.$trading" />
                        <param name="allowplayeronly" value="$orderT.$allowplayeronly" />
                        <param name="ventureplatform" value="$orderT.$ventureplatform" />
                        <!-- <param name="timeout" value="$orderT.$timeout" /> -->
                        <param name="waittime" value="$orderT.$waittime" />
                        <param name="dockfollowers" value="$orderT.$dockfollowers" />
                        <param name="releasesignal" value="$orderT.$releasesignal" />
                        <param name="subordinateorders" value="$orderT.$subordinateorders" />
                        <param name="dockorder" value="$orderT.$dockorder" />
                        <param name="callerid" value="$orderT.$callerid" />
                        <param name="undockhandler" value="$orderT.$undockhandler" />
                        <param name="isdockfollower" value="$orderT.$isdockfollower" />
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="noboost" value="$orderT.$noboost" />
                        <param name="uselocalhighways" value="$orderT.$uselocalhighways" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DockAt'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="building" value="$orderT.$building" />
                        <param name="trading" value="$orderT.$trading" />
                        <param name="allowplayeronly" value="$orderT.$allowplayeronly" />
                        <param name="ventureplatform" value="$orderT.$ventureplatform" />
                        <param name="useentrypos" value="$orderT.$useentrypos" />
                        <param name="dockfollowers" value="$orderT.$dockfollowers" />
                        <param name="abouttofinish" value="$orderT.$abouttofinish" />
                        <param name="waittime" value="$orderT.$waittime" />
                        <param name="store" value="$orderT.$store" />
                        <param name="dockandwaitid" value="$orderT.$dockandwaitid" />
                        <param name="callerid" value="$orderT.$callerid" />
                        <param name="isdockfollower" value="$orderT.$isdockfollower" />
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="noboost" value="$orderT.$noboost" />
                        <param name="uselocalhighways" value="$orderT.$uselocalhighways" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'AttackInRange'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="pursuetargets" value="$orderT.$pursuetargets" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Attack'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="primarytarget" value="$orderT.$primarytarget" />
                        <param name="secondarytargets" value="$orderT.$secondarytargets" />
                        <param name="escort" value="$orderT.$escort" />
                        <param name="pursuedistance" value="$orderT.$pursuedistance" />
                        <param name="pursuetargets" value="$orderT.$pursuetargets" />
                        <param name="allowothertargets" value="$orderT.$allowothertargets" />
                        <param name="checkrelation" value="$orderT.$checkrelation" />
                        <param name="disable" value="$orderT.$disable" />
                        <param name="disablehullpercentagethreshold" value="$orderT.$disablehullpercentagethreshold" />
                        <param name="disabletargets" value="$orderT.$disabletargets" />
                        <param name="minrange" value="$orderT.$minrange" />
                        <param name="maxrange" value="$orderT.$maxrange" />
                        <param name="maintaindistance" value="$orderT.$maintaindistance" />
                        <param name="squad_attack" value="$orderT.$squad_attack" />
                        <param name="boardingbehavior" value="$orderT.$boardingbehavior" />
                        <param name="behaviortargetclasses" value="$orderT.$behaviortargetclasses" />
                        <param name="uncover" value="$orderT.$uncover" />
                        <param name="targetclasses" value="$orderT.$targetclasses" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="radiusanchorpos" value="$orderT.$radiusanchorpos" />
                        <param name="radiusanchorspace" value="$orderT.$radiusanchorspace" />
                        <param name="allowboost" value="$orderT.$allowboost" />
                        <param name="forceprimarytarget" value="$orderT.$forceprimarytarget" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Board'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="boardingoperation" value="$orderT.$boardingoperation" />
                        <param name="pursuedistance" value="$orderT.$pursuedistance" />
                        <param name="pursuetargets" value="$orderT.$pursuetargets" />
                        <param name="squad_attack" value="$orderT.$squad_attack" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Escort'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="formation" value="$orderT.$formation" />
                        <param name="formationparam" value="$orderT.$formationparam" />
                        <param name="rollmembers" value="$orderT.$rollmembers" />
                        <param name="rollformation" value="$orderT.$rollformation" />
                        <param name="maxshipsperline" value="$orderT.$maxshipsperline" />
                        <param name="pursuedistance" value="$orderT.$pursuedistance" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />  * infinite values cant set to default order-->
                        <param name="overrideformationskill" value="$orderT.$overrideformationskill" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="releasesignal" value="$orderT.$releasesignal" />
                        <param name="subordinateorders" value="$orderT.$subordinateorders" />
                        <param name="endontargetdeath" value="$orderT.$endontargetdeath" />
                        <param name="thresholdbreak" value="$orderT.$thresholdbreak" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Lasertower'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Patrol'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="space" value="$orderT.$space" />
                        <param name="range" value="$orderT.$range" />
                        <param name="pursuetargets" value="$orderT.$pursuetargets" />
                        <param name="pursuedistance" value="$orderT.$pursuedistance" />
                        <param name="includeroute" value="$orderT.$includeroute" />
                        <param name="allowothertargets" value="$orderT.$allowothertargets" />
                        <param name="targetpurposes" value="$orderT.$targetpurposes" />
                        <param name="stayinspace" value="$orderT.$stayinspace" />
                        <param name="usebasket" value="$orderT.$usebasket" />
                        <param name="engageonlyonline" value="$orderT.$engageonlyonline" />
                        <param name="targetclasses" value="$orderT.$targetclasses" />
                        <param name="stayhidden" value="$orderT.$stayhidden" />
                        <param name="organizesubordinates" value="$orderT.$organizesubordinates" />
                        <param name="defences_maxgatedistance" value="$orderT.$defences_maxgatedistance" />
                        <param name="defences_includedassignments" value="$orderT.$defences_includedassignments" />
                        <param name="checkrelation" value="$orderT.$checkrelation" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'ProtectPosition'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="pursuetargets" value="$orderT.$pursuetargets" />
                        <param name="attackonsight" value="$orderT.$attackonsight" />
                        <param name="reinforcefleet" value="$orderT.$reinforcefleet" />
                        <param name="resupplyatfleet" value="$orderT.$resupplyatfleet" />
                        <param name="flagship" value="$orderT.$flagship" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />  * infinite values cant set to default order-->
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'ProtectShip'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="radius" value="$orderT.$radius" />
                        <!-- <param name="timeout" value="$orderT.$timeout" /> -->
                        <param name="pursuedistance" value="$orderT.$pursuedistance" />
                        <param name="untilclaimed" value="$orderT.$untilclaimed" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'ProtectStation'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="station" value="$orderT.$station" />
                        <param name="radius" value="$orderT.$radius" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />  * infinite values cant set to default order-->
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TacticalOrder'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="selectedtarget" value="$orderT.$selectedtarget" />
                        <param name="aggressiveness" value="$orderT.$aggressiveness" />
                        <param name="weakfirst" value="$orderT.$weakfirst" />
                        <param name="xdistance" value="$orderT.$xdistance" />
                        <param name="zdistance" value="$orderT.$zdistance" />
                        <param name="allowothertargets" value="$orderT.$allowothertargets" />
                        <param name="timeout" value="$orderT.$timeout" />
                        <param name="releasemove" value="$orderT.$releasemove" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningCollect'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="ware" value="$orderT.$ware" />
                        <param name="secwares" value="$orderT.$secwares" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="time_started" value="$orderT.$time_started" />
                        <param name="debug_eco" value="$orderT.$debug_eco" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningPlayer'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="ware" value="$orderT.$ware" />
                        <param name="secwares" value="$orderT.$secwares" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningRoutine_Advanced'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />   * infinite values cant set to default order-->
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningRoutine_Basic'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />   * infinite values cant set to default order-->
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningRoutine_Expert'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />   * infinite values cant set to default order-->
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MiningRoutine'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <param name="deepspace" value="$orderT.$deepspace" />
                        <param name="resourcescout" value="$orderT.$resourcescout" />
                        <!-- <param name="duration" value="$orderT.$duration" />   * infinite values cant set to default order-->
                        <param name="endtime" value="$orderT.$endtime" />
                        <param name="effectiveskill" value="$orderT.$effectiveskill" />
                        <param name="preferownspace" value="$orderT.$preferownspace" />
                        <param name="warebasket_override" value="$orderT.$warebasket_override" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MoveDie'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="mintime" value="$orderT.$mintime" />
                        <param name="atstation" value="$orderT.$atstation" />
                        <param name="byhighway" value="$orderT.$byhighway" />
                        <param name="byhostile" value="$orderT.$byhostile" />
                        <param name="byidle" value="$orderT.$byidle" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Follow'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="commandaction" value="$orderT.$commandaction" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MoveToPlanet'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="direction" value="$orderT.$direction" />
                        <param name="distance" value="$orderT.$distance" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Explore'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetspace" value="$orderT.$targetspace" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="timeout" value="$orderT.$timeout" />
                        <param name="deploysatellites" value="$orderT.$deploysatellites" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Police'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetspace" value="$orderT.$targetspace" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="hq" value="$orderT.$hq" />
                        <param name="targetclasses" value="$orderT.$targetclasses" />
                        <param name="targetpurposes" value="$orderT.$targetpurposes" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="deploysatellites" value="$orderT.$deploysatellites" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'ExploreUpdate'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetspace" value="$orderT.$targetspace" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="radius" value="$orderT.$radius" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="targetclasses" value="$orderT.$targetclasses" />
                        <param name="deploysatellites" value="$orderT.$deploysatellites" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Recon'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetspace" value="$orderT.$targetspace" />
                        <param name="radius" value="$orderT.$radius" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="hq" value="$orderT.$hq" />
                        <param name="targetclasses" value="$orderT.$targetclasses" />
                        <param name="targetpurposes" value="$orderT.$targetpurposes" />
                        <param name="police" value="$orderT.$police" />
                        <param name="exploreupdate" value="$orderT.$exploreupdate" />
                        <param name="resourcescout" value="$orderT.$resourcescout" />
                        <param name="blindtourist" value="$orderT.$blindtourist" />
                        <param name="deploysatellites" value="$orderT.$deploysatellites" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Taxi'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MoveToObject'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="fidget" value="$orderT.$fidget" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'MoveWait'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="withdraw" value="$orderT.$withdraw" />
                        <param name="precise" value="$orderT.$precise" />
                        <param name="playerprecise" value="$orderT.$playerprecise" />
                        <param name="waitforatgate" value="$orderT.$waitforatgate" />
                        <param name="recallsubordinates" value="$orderT.$recallsubordinates" />
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="lookat" value="$orderT.$lookat" />
                        <param name="fidget" value="$orderT.$fidget" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'PlayerAttack'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="secondarytargets" value="$orderT.$secondarytargets" />
                        <param name="escort" value="$orderT.$escort" />
                        <param name="squad_attack" value="$orderT.$squad_attack" />
                        <param name="allowothertargets" value="$orderT.$allowothertargets" />
                        <param name="checkrelation" value="$orderT.$checkrelation" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Plunder'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="space" value="$orderT.$space" />
                        <param name="base" value="$orderT.$base" />
                        <param name="returntobase" value="$orderT.$returntobase" />
                        <param name="findbaseowner" value="$orderT.$findbaseowner" />
                        <param name="basebasket" value="$orderT.$basebasket" />
                        <param name="forcetransfer" value="$orderT.$forcetransfer" />
                        <param name="deepspace" value="$orderT.$deepspace" />
                        <param name="checkrelation" value="$orderT.$checkrelation" />
                        <param name="plundermode" value="$orderT.$plundermode" />
                        <param name="range_internal" value="$orderT.$range_internal" />
                        <param name="target" value="$orderT.$target" />
                        <param name="module" value="$orderT.$module" />
                        <param name="movetomodule" value="$orderT.$movetomodule" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'RecallSubordinates'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="timeout" value="$orderT.$timeout" />
                        <param name="activepatrol" value="$orderT.$activepatrol" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="safetodockat" value="$orderT.$safetodockat" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'RecycleDefault'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="preferredstation" value="$orderT.$preferredstation" />
                        <param name="stationstoavoid" value="$orderT.$stationstoavoid" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Repair'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="hullpercent" value="$orderT.$hullpercent" />
                        <param name="damagedcomponents" value="$orderT.$damagedcomponents" />
                        <param name="repairall" value="$orderT.$repairall" />
                        <param name="acceptedcost" value="$orderT.$acceptedcost" />
                        <param name="urgent" value="$orderT.$urgent" />
                        <param name="blacklist_stations" value="$orderT.$blacklist_stations" />
                        <param name="subordinaterepairorders" value="$orderT.$subordinaterepairorders" />
                        <param name="subordinateorders" value="$orderT.$subordinateorders" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'GetSupplies'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="maxsearchrange" value="$orderT.$maxsearchrange" />
                        <param name="anchorsector" value="$orderT.$anchorsector" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'RestockSubordinates'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="init" value="$orderT.$init" />
                        <param name="jumps" value="$orderT.$jumps" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Resupply'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="repair" value="$orderT.$repair" />
                        <param name="hullpercent" value="$orderT.$hullpercent" />
                        <param name="damagedcomponents" value="$orderT.$damagedcomponents" />
                        <param name="repairall" value="$orderT.$repairall" />
                        <param name="repaircost" value="$orderT.$repaircost" />
                        <param name="resupply_ammo" value="$orderT.$resupply_ammo" />
                        <param name="resupply_units" value="$orderT.$resupply_units" />
                        <param name="restock_subordinates" value="$orderT.$restock_subordinates" />
                        <param name="param_station" value="$orderT.$param_station" />
                        <param name="urgent" value="$orderT.$urgent" />
                        <param name="blacklist_stations" value="$orderT.$blacklist_stations" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="onlyuseresupplierships" value="$orderT.$onlyuseresupplierships" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageCollect'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageCrush'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageDeliver_NoTrade'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageDeliver'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageInRadius'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SalvageRoutine'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="anchorspace" value="$orderT.$anchorspace" />
                        <param name="range" value="$orderT.$range" />
                        <!-- <param name="duration" value="$orderT.$duration" />    * infinite values cant set to default order-->
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SupplyFleet'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="target" value="$orderT.$target" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="formation" value="$orderT.$formation" />
                        <param name="formationparam" value="$orderT.$formationparam" />
                        <param name="rollmembers" value="$orderT.$rollmembers" />
                        <param name="rollformation" value="$orderT.$rollformation" />
                        <param name="maxshipsperline" value="$orderT.$maxshipsperline" />
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to default order-->
                        <param name="overrideformationskill" value="$orderT.$overrideformationskill" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="releasesignal" value="$orderT.$releasesignal" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'CrewExchangePassive'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="overridepassive" value="$orderT.$overridepassive" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'CrewExchange'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="overridepassive" value="$orderT.$overridepassive" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'DepositInventory'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'Middleman'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="anchorspace" value="$orderT.$anchorspace" />
                        <param name="range" value="$orderT.$range" />
                        <param name="tradeware" value="$orderT.$tradeware" />
                        <param name="relprice_purchase" value="$orderT.$relprice_purchase" />
                        <param name="supplier" value="$orderT.$supplier" />
                        <!-- <param name="duration" value="$orderT.$duration" />    * infinite values cant set to default order-->
                        <param name="endtime" value="$orderT.$endtime" />
                        <param name="aggressiveness" value="$orderT.$aggressiveness" />
                        <param name="holdbuyprice" value="$orderT.$holdbuyprice" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradePerform'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeRoutine_Advanced'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />    * infinite values cant set to default order-->
                        <param name="tradeforbuildstorage" value="$orderT.$tradeforbuildstorage" />
                        <param name="usecover" value="$orderT.$usecover" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeRoutine_Basic'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />    * infinite values cant set to default order-->
                        <param name="tradeforbuildstorage" value="$orderT.$tradeforbuildstorage" />
                        <param name="usecover" value="$orderT.$usecover" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeRoutine'">
                    
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="warebasket" value="$orderT.$warebasket" />
                        <param name="range" value="$orderT.$range" />
                        <param name="minbuy" value="$orderT.$minbuy" />
                        <param name="maxbuy" value="$orderT.$maxbuy" />
                        <param name="minsell" value="$orderT.$minsell" />
                        <param name="maxsell" value="$orderT.$maxsell" />
                        <!-- <param name="duration" value="$orderT.$duration" />    * infinite values cant set to default order-->
                        <param name="endtime" value="$orderT.$endtime" />
                        <param name="tradeforbuildstorage" value="$orderT.$tradeforbuildstorage" />
                        <param name="usecover" value="$orderT.$usecover" />
                        <param name="preferredcoverfactions" value="$orderT.$preferredcoverfactions" />
                        <param name="buyfromfactions" value="$orderT.$buyfromfactions" />
                        <param name="selltofactions" value="$orderT.$selltofactions" />
                        <param name="warebasket_override" value="$orderT.$warebasket_override" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                        <param name="debugchance2" value="$orderT.$debugchance2" />
                    </create_order>

                </do_elseif>
                <do_elseif value="$orderT.$id == 'SingleBuy'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="ware" value="$orderT.$ware" />
                        <param name="centerpos" value="$orderT.$centerpos" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="locations" value="$orderT.$locations" />
                        <param name="maxamount" value="$orderT.$maxamount" />
                        <param name="minamount" value="$orderT.$minamount" />
                        <param name="pricethreshold" value="$orderT.$pricethreshold" />
                        <param name="unbundle" value="$orderT.$unbundle" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="gotrade" value="$orderT.$gotrade" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SingleSell'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="ware" value="$orderT.$ware" />
                        <param name="centerpos" value="$orderT.$centerpos" />
                        <param name="radius" value="$orderT.$radius" />
                        <param name="locations" value="$orderT.$locations" />
                        <param name="maxamount" value="$orderT.$maxamount" />
                        <param name="minamount" value="$orderT.$minamount" />
                        <param name="pricethreshold" value="$orderT.$pricethreshold" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="gotrade" value="$orderT.$gotrade" />
                        <param name="salvage" value="$orderT.$salvage" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'SingleTrade'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="ware" value="$orderT.$ware" />
                        <param name="locations" value="$orderT.$locations" />
                        <param name="maxamount" value="$orderT.$maxamount" />
                        <param name="minamount" value="$orderT.$minamount" />
                        <param name="pricethreshold" value="$orderT.$pricethreshold" />
                        <param name="sell" value="$orderT.$sell" />
                        <param name="unbundle" value="$orderT.$unbundle" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="gotrade" value="$orderT.$gotrade" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeExchangeNonShip'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="internalorder" value="$orderT.$internalorder" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeExchangePassive'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TradeExchange'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="tradedeal" value="$orderT.$tradedeal" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TransferWorkersRoutine'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="targetsector" value="$orderT.$targetsector" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'TransferWorkers'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="origin" value="$orderT.$origin" />
                        <param name="destination" value="$orderT.$destination" />
                        <param name="numpeople" value="$orderT.$numpeople" />
                        <param name="species" value="$orderT.$species" />
                        <param name="cannotdock" value="$orderT.$cannotdock" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'WaitForSignal'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <!-- <param name="timeout" value="$orderT.$timeout" />    * infinite values cant set to defaultorder-->
                        <param name="allowdocked" value="$orderT.$allowdocked" />
                        <param name="allowparked" value="$orderT.$allowparked" />
                        <param name="releasesignal" value="$orderT.$releasesignal" />
                        <param name="signaller" value="$orderT.$signaller" />
                        <param name="alignwithecliptic" value="$orderT.$alignwithecliptic" />
                        <param name="noattackresponse" value="$orderT.$noattackresponse" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_elseif value="$orderT.$id == 'WaitForVenture'">
                    <create_order id="$orderT.$id" object="$ship" default="$defaultorder" name="$result">
                        <param name="ventureplatform" value="$orderT.$ventureplatform" />
                        <param name="debugchance" value="$orderT.$debugchance" />
                    </create_order>
                </do_elseif>
                <do_else>

                    <create_order id="'MoveWait'" object="$ship" default="$defaultorder" name="$result">
                        <param name="destination" value="$orderT.$destination" />
                    </create_order>

                </do_else>
                <return value="$result"/>
            </actions>
        </library>





        <!-- ! ! !    YAPILACAK     ! ! !
            equipmentleri özelikle de silah ve turretları olması gereken yerlerine taktırmak için araştırmak gerekiyordu.
                (md komutları ile hangi silah hangi slota, group bilgisi vb.. bilgiler için araştırmak gerekiyor)
            bu yüzden ship.loadout bilgisini direk kullanacağız.
            loadout<...> bilgisini tam açamadığımız(okuyamadım) için ilgili değerleri değiştiremiyeceğiz. 
                    loadout.wares.list okuyabildiğimiz tek property. geri kalan bilgi new.("UILoadout2") komutu ile lua içinde ancak okunabiliyor.
                Md içinden bu işin karşılığı yok gibi, öğrenirsek içindeki bilgileri kontrol edebiliriz..
                * Lua içinden okuyabilecek ve yapıyı md içinde kullanabileceğimiz değişkenler üretmek için bir event yazılabilir.
                YAPILANLAR :
                    lua içinden gemiye ait shipplanını okuyup aldık
                    veriyi record yapısına ShipPlan propertysi olarak ekledik
                YAPILACAK:
                    1-shipplanı luadan alırken loadout bilgisini nasıl alacağız  lua-md arasındaki datatipi için uyumsuz bir veri tipi
                        bu yüzden ilerde sadece ship.loadout değişme durumunda ShipPlan çıkaracağız
                    2- ya da shipplanını tamamen md içinde çıkaracak bir kod yazmamız gerekiyor. yapılabilir.(lua içinde işler çok kolay)
                * lua içinde gerek ship üzerinden gerekse plan üzerinden loadout çıkarabiliyoruz, burdan planı gönderip luadan loadout geri alabiliriz.
        --> 
        <!-- IN :   Ship Obje     , kaydı çıkarılacak gemi
                    Commander Obje, debug gemi dosyası içinde geminin commander bilgisi için yazılacak, gerekli değil
            OUT : Loadout table, 
            Table [
                1-  Ship.loadout, loaduot
                2-  allWares, table
                3-  Pilot , Table[ $Macro = string, $Skill = table [ {skilltypes } = value ]
                4-  Peoples table [ {entityrole} = list [ $Macro = string, $Skill = table [ {skilltypes } = value ] ]
                skipped others
                5-  Engines, table
                6- Weapons, table
                7- Shields, table
                8- Turrets, table
                9- CounterMeasures, table
                10- Missiles, table
                11- Deployables, table
                12- Softwares, table
                13- Thrusters, table
                14- Ammo, table
                15- Units, table
            ]
        -->
        <library name="Get_ShipLoadouts" purpose="run_actions" >
            <params>
                <param name="Ship" />
                <param name="usedammobay" default="false" />
            </params>
            <actions>
                <!-- bu modulül ware tabloları şeklinde geri veriyor, -->
                <!-- ilerde yapılacak, veri tablosunu macro tabloları şeklinde dönmesi seçenek olarak sunulacak -->
                <set_value name="$Engines" exact="table[]"/>
                <set_value name="$Weapons" exact="table[]"/>
                <set_value name="$Shields" exact="table[]"/>
                <set_value name="$Turrets" exact="table[]"/>
                <set_value name="$CounterMeasures" exact="table[]"/>
                <set_value name="$Missiles" exact="table[]"/>
                <set_value name="$Deployables" exact="table[]"/>
                <set_value name="$Softwares" exact="table[]"/>
                <set_value name="$Thrusters" exact="table[]"/>
                <set_value name="$Ammo" exact="table[]"/>
                <set_value name="$Units" exact="table[]"/>

                <set_value name="$allWares" exact="table[]"/>

                <!--        FIND  ENGINE EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Engines">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.engine]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   WEAPONS  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Weapons">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.weapon]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   SHIELD  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Shields">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.shieldgenerator]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <!--        FIND   TURRET  EQUIPMENTS-->
                <run_actions ref="GetEquipments" result="$Turrets">
                    <param name="Ship" value="$Ship" />
                    <param name="Class" value="[class.turret]" />
                    <param name="addTable" value="$allWares"/>
                </run_actions>

                <do_if value="$Ship.isclass.ship">
                    <!--                AMMO STORAGE        -->
                    <debug_text text="'name %s   MISSILE STORAGE        %s'.[$Ship.name, $Ship.ammostorage.missile.table]" chance="0"/>
                    <debug_text text="'name %s   DEPLOYABLE STORAGE     %s'.[$Ship.name, $Ship.ammostorage.deployable.table]" chance="0"/>
                    <debug_text text="'name %s   COUNTERMEASURE STORAGE %s'.[$Ship.name, $Ship.ammostorage.countermeasure.table]" chance="0"/>
                    <do_if value="not $usedammobay">
                        <!--        MISSILES    -->
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.missile.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <set_value name="$Missiles.{$Item}" exact="$amount"/>
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                        <!--        DEPLOYABLES    -->
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.deployable.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <set_value name="$Deployables.{$Item}" exact="$amount"/>
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                        <!--        COUNTER MEASURE    -->
                        <do_for_each name="$macro" valuename="$amount" in="$Ship.ammostorage.countermeasure.table">
                            <set_value name="$Item" exact="$macro.ware" />
                            <set_value name="$CounterMeasures.{$Item}" exact="$amount"/>
                            <set_value name="$Ammo.{$Item}" exact="$amount"/>
                            <set_value name="$allWares.{$Item}" exact="$amount"/>
                        </do_for_each>
                    </do_if>
                    <!-- AKTİF KULLANDIKLARI (sadece MISSILES için geçerli olacaktır, diğerleri yine kargoda olanları verecektir) -->
                    <do_else>
                        <!--        MISSILES    -->
                        <evaluate_ammo_storage object="$Ship" type="missile" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <debug_text text="'$Item = %s $Item.objectmacro = %s , loop.index = %s , %s , %s'.[$Item, $Item.objectmacro, loop.index, $AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count]" />
                            <set_value name="$Missiles.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$Ammo.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                        </do_for_each>
                        <!--        DEPLOYABLES    -->
                        <evaluate_ammo_storage object="$Ship" type="deployable" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <set_value name="$Deployables.{$Item}" exact="[$Ship.ammostorage.{$Item.objectmacro}.count, 1].max"/>
                            <set_value name="$Ammo.{$Item}" exact="[$Ship.ammostorage.{$Item.objectmacro}.count, 1].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$Ship.ammostorage.{$Item.objectmacro}.count, 1].max"/>
                        </do_for_each>
                        <!--        COUNTER MEASURE    -->
                        <evaluate_ammo_storage object="$Ship" type="countermeasure" wares="$AmmoT" amounts="$AmmoAmt" />
                        <do_for_each name="$Item" in="$AmmoT">
                            <set_value name="$CounterMeasures.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$Ammo.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                            <set_value name="$allWares.{$Item}" exact="[$AmmoAmt.{loop.index}, $Ship.ammostorage.{$Item.objectmacro}.count].max"/>
                        </do_for_each>

                    </do_else>
                    <!--             INTSTALLED  SOFTWARES -->
                    <!-- Flight Assist Her Mobil objede kesinlikle olan bir software-->
                    <set_value name="$Softwares.{ware.software_flightassistmk1}" exact="1" />
                    <set_value name="$allWares.{ware.software_flightassistmk1}" exact="1" />
                    <!-- Targeting Computer Extension 1 varsa listede Al-->
                    <do_if value="$Ship.software.installed.list.indexof.{ware.software_targetmk1}" >
                        <set_value name="$Softwares.{ware.software_targetmk1}" exact="1" />
                        <set_value name="$allWares.{ware.software_targetmk1}" exact="1" />
                    </do_if>
                    <!-- Trading Computer Extension 1 varsa listede Al-->
                    <do_if value="$Ship.software.installed.list.indexof.{ware.software_trademk1}" >
                        <set_value name="$Softwares.{ware.software_trademk1}" exact="1" />
                        <set_value name="$allWares.{ware.software_trademk1}" exact="1" />
                    </do_if>
                    <!-- Docking Softwers, Long Range Scanners ve Obje Scanners lardan hangisi takılıysa Al-->
                    <do_for_each name="$Item" in="$Ship.software.installed.list">
                        <do_if value="$Item == $Ship.software.dock">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_if>
                        <do_elseif value="$Item == $Ship.software.longrange">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_elseif>
                        <do_elseif value="$Item == $Ship.software.police">
                            <set_value name="$Softwares.{$Item}" exact="1" />
                            <set_value name="$allWares.{$Item}" exact="1" />
                        </do_elseif>
                    </do_for_each>

                    <!--                  GET THRUSTER-->
                    <get_ware_definition result="$AllThrusters" group="'thrusters'" />
                    <do_for_each name="$Item" in="$AllThrusters">
                        <check_object result="$GotIt" object="$Ship">
                            <match_loadout wares="[$Item]"/>
                        </check_object>
                        <do_if value="$GotIt">
                            <set_value name="$Thrusters.{$Item}" exact="1"/>
                            <set_value name="$allWares.{$Item}" exact="1"/>
                            <break/>
                        </do_if>
                    </do_for_each>

                </do_if>

                <!--                  GET UNIT DRONES          -->
                <do_for_each name="$Category" in="[unitcategory.attack, unitcategory.build, unitcategory.defence, unitcategory.repair, unitcategory.transport, unitcategory.gascollector, unitcategory.orecollector]">
                    <do_for_each name="$Item" in="$Ship.units.{$Category}.list">
                        <do_if value="$Item.ware and $Units.keys.list.indexof.{$Item} == 0 and $Ship.units.{$Item}.count">
                            <set_value name="$Units.{$Item.ware}" exact="$Ship.units.{$Item}.count"/>
                            <set_value name="$allWares.{$Item.ware}" exact="$Ship.units.{$Item}.count"/>
                        </do_if>
                    </do_for_each>
                </do_for_each>

                <do_if value="$Ship.isclass.station">
                    <set_value name="$xPilot" exact="$Ship.tradenpc" />
                    <set_value name="$Pilot" exact="table[]"/>
                    <do_if value="$xPilot != null">
                        <set_value name="$Pilot" exact="table
                        [
                            $macro = $xPilot.macro,
                            $skill = table
                                [
                                {skilltype.management} = $xPilot.skill.{skilltype.management},
                                {skilltype.morale} = $xPilot.skill.{skilltype.morale},
                                {skilltype.piloting} = $xPilot.skill.{skilltype.piloting},
                                {skilltype.engineering} = $xPilot.skill.{skilltype.engineering},
                                {skilltype.boarding} = $xPilot.skill.{skilltype.boarding}
                                ]
                        ]"/>
                    </do_if>
                    <set_value name="$Peoples" exact="table[
                        {entityrole.service} = table[], 
                        {entityrole.marine} = table[]
                    ]" />
                </do_if>
                <do_else>
                    <set_value name="$Pilot" exact="table[]"/>
                    <do_if value="$Ship.pilot != null">
                        <set_value name="$xPilot" exact="$Ship.pilot" />
                        <set_value name="$Pilot" exact="table
                        [
                                        $macro = $xPilot.macro,
                                        $skill = table
                                            [
                                            {skilltype.management} = $xPilot.skill.{skilltype.management},
                                            {skilltype.morale} = $xPilot.skill.{skilltype.morale},
                                            {skilltype.piloting} = $xPilot.skill.{skilltype.piloting},
                                            {skilltype.engineering} = $xPilot.skill.{skilltype.engineering},
                                            {skilltype.boarding} = $xPilot.skill.{skilltype.boarding}
                                            ]
                        ]"/>
                    </do_if>
                    <!--                  PEOPLES          -->
                    <set_value name="$Peoples" exact="table[]" />
                    <do_for_each in="[entityrole.service, entityrole.marine]" name="$Role">
                        <set_value name="$Peoples.{$Role}" exact="[]" />
                        <do_for_each in="$Ship.people.{$Role}.list" name="$Crew">
                            <append_to_list name="$Peoples.{$Role}" exact="table
                            [
                            $macro = $Ship.people.{$Crew}.macro,
                            $skill = table[
                                {skilltype.management} = $Ship.people.{$Crew}.skill.{skilltype.management},
                                {skilltype.morale} = $Ship.people.{$Crew}.skill.{skilltype.morale},
                                {skilltype.piloting} = $Ship.people.{$Crew}.skill.{skilltype.piloting},
                                {skilltype.engineering} = $Ship.people.{$Crew}.skill.{skilltype.engineering},
                                {skilltype.boarding} = $Ship.people.{$Crew}.skill.{skilltype.boarding}
                                ]
                            ]" />
                        </do_for_each>
                    </do_for_each>
                </do_else>


                <set_value name="$Loadout" exact="[
                $Ship.loadout, 
                $allWares,
                $Pilot,
                $Peoples
                ]" />
                <!-- 
                <set_value name="$Loadout" exact="[
                $Ship.loadout, 
                $allWares,
                $Pilot,
                $Peoples,
                $Engines, 
                $Weapons,
                $Shields,
                $Turrets,
                $CounterMeasures,
                $Missiles,
                $Deployables,
                $Softwares,
                $Thrusters,
                $Ammo,
                $Units
                ]" />
                -->

                <remove_value name="$Engines" />
                <remove_value name="$Weapons" />
                <remove_value name="$Shields" />
                <remove_value name="$Turrets" />
                <remove_value name="$CounterMeasures" />
                <remove_value name="$Missiles" />
                <remove_value name="$Deployables" />
                <remove_value name="$Softwares" />
                <remove_value name="$Thrusters" />
                <remove_value name="$Ammo" />
                <remove_value name="$Units" />
                <remove_value name="$allWares" />
                <remove_value name="$Peoples" />
                <remove_value name="$Pilot" />

                <return value="$Loadout"/>
            </actions>
        </library>

        <!-- IN :   Ship            : as obje
		            Class           : as list like [class.engine] or [class.engine, class.weapon] 
					CollectTable    : as table, result tablasını buraya ekler, belirtilmezse eklemez
		    OUT :   Table : table[ {equipware1} = 3, {equipware2} = 3  ]
		-->
        <library name="GetEquipments" purpose="run_actions" namespace="this">
            <params>
                <param name="Ship"/>
                <param name="Class"/>
                <param name="addTable" default="null"/>
            </params>
            <actions>
                <set_value name="$Equipments" exact="table[]"/>
                <!--weapon equipmentları, hem weapon hem de turretları içerir.
                    turret equipmentları ise sadece turretları verir.
                    sadece weapon arıyacaksak turret listesini çıkarmamız gerkiyor.
                -->
                <!--        FIND  EQUIPMENTS-->
                <do_if value="$Class.indexof.{class.weapon} and not $Class.indexof.{class.turret}">
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false">
                        <match class="$Class" negate="false"/>
                        <match class="class.turret" negate="true"/>
                    </find_object_component>
                </do_if>
                <do_elseif value="$Class.indexof.{class.weapon} and $Class.indexof.{class.turret}">
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false" >
                        <match class="$Class" negate="false"/>
                        <match class="class.turret" negate="true"/>
                    </find_object_component>
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false" append="true">
                        <match class="class.turret" negate="false"/>
                    </find_object_component>
                </do_elseif>
                <do_else>
                    <find_object_component name="$Comps" multiple="true" object="$Ship" checkoperational="false">
                        <match class="$Class" negate="false"/>
                    </find_object_component>
                </do_else>
                <!--        COLLECT EQUIPMENTS-->
                <do_for_each name="$Obj" in="$Comps">
                    <do_if value="$Obj.macro.ware">
                        <set_value name="$Equipments.{$Obj.macro.ware}" exact="1" operation="add"/>
                        <do_if value="$addTable != null and typeof $addTable == datatype.table">
                            <set_value name="$addTable.{$Obj.macro.ware}" exact="1" operation="add"/>
                        </do_if>
                    </do_if>
                </do_for_each>
                <return value="$Equipments"/>
            </actions>
        </library>





        <!--Yalnızca shipbuild işlemlerini ve global.$BuildTaskIDs listesinde olan tasklar için çalıştıracağız 
            LUA içinden yaptığımız BuildTask Orderların işleyişini bu 2 foksiyon ile denetleyeceğiz
            lua içinde iken add yaptığımızdan dolayı add olayı luadan çıkmadan gerçekleşiyor, 
            md içindeki recevied_lua henüz başlamamış oluyor
            build_added deki tetiklemeyi kontrol edebilmek için bu cue yi geciktireceğiz.
            * Player_build_started lua dan çıktıktan sonra tetikleniyor ancak add ile uyumlu çalışması için
                ikisinin de delay sürelerini aynı şekilde geciktireceğiz
            * Böylece md içinde recevied den sonra bu cueler sırasıyla add ve started başlamış olacak
                Order shipbuild ile task almış ve global.$BuildTaskIDs listesinde de varsa denetimini ele alcağız 
                    a- bekleme sırası > 0  (malzeme eksikliği vb.. var) ship objesi ya da processors henüz oluşmamıştır.    ADD
                    b- bekeleme sırası = 0 (build_started) oluştuğunda ise bu takip cueyi sonlandıracağız                   STARTED
            (İstasyon task orderı; restock, shipmodification vb diğer işler için ise bu taskı direk atlayacağız)
        -->
        <cue name="Player_Build_Added" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <event_player_build_added />
                </check_any>
            </conditions>
            <actions>
                <set_value name="$build" exact="event.param"/>
                <set_value name="$shipyard" exact="event.param2"/>
                <set_value name="$buildprocessor" exact="@event.param.buildprocessor"/>
                <set_value name="$cue" exact="this" />
                <create_group groupname="$buildercomponents" />
                <set_value name="$price" exact="0"/>
                <set_value name="$RFMKey" exact="0"/>
                <set_value name="$ShipKey" exact="0"/>
                
                <set_value name="$cancell" exact="not (event.param.exists and event.param.isshipbuild)" />

                <set_value name="$testdebugchance" exact="0" />

            </actions>
            <delay exact="1ms"/>
            <!-- parente delay koyarak 2 parça yaptık ancak alt cueler 1. action başladığında etkin olacak
                alt cuelerin conditionlarını kontrolüne ekleme yapalım
            -->
            <actions>
                <debug_text text="'PLAYER     BUILD     ADD   buildtask = %s , buildingcontainer = %s'.[event.param, event.param2]" chance="$testdebugchance"/>

                <set_value name="$extrBuild" exact="table[
                    $base                           = $build.base,
                    $buildmodule                    = $build.buildmodule,
                    $buildobject	                = $build.buildobject,
                    $buildprocessor	                = $build.buildprocessor,
                    $construction	                = $build.construction,
                    $constructionsequence	        = $build.constructionsequence,
                    $consumables	                = $build.consumables,
                    $exists	                        = $build.exists,
                    $faction	                    = $build.faction,
                    $isexpansion	                = $build.isexpansion,
                    $isprocessing	                = $build.isprocessing,
                    $isrecycleshipbuild	            = $build.isrecycleshipbuild,
                    $isrestock	                    = $build.isrestock,
                    $isshipbuild	                = $build.isshipbuild,
                    $isshipmodification	            = $build.isshipmodification,
                    $issoftwareonlyupgrade	        = $build.issoftwareonlyupgrade,
                    $isupgrade	                    = $build.isupgrade,
                    $loadout	                    = $build.loadout,
                    $macro	                        = $build.macro,
                    $mayrequireconstructionvessel   = $build.mayrequireconstructionvessel,
                    $object	                        = $build.object,
                    $position	                    = $build.position,
                    $price	                        = $build.price,
                    $rotation	                    = $build.rotation,
                    $time	                        = $build.time,
                    $transferredamount	            = $build.transferredamount,
                    $zone                           = $build.zone
                ]" />
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$extrBuild" />
                    <param name="recursiondepth" value="2" />
                    <param name="DebugChance" value="$testdebugchance" />
                </run_actions>

                <do_if value="not $cancell">

                    <do_if value="global.$BuildTaskIDs? and (typeof global.$BuildTaskIDs == datatype.list)">
                        <!-- Debug-->
                        <debug_text text="'BEFORE global.$BuildTaskIDs = '.[]" chance="$testdebugchance"/>
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="global.$BuildTaskIDs" />
                            <param name="recursiondepth" value="2" />
                            <param name="DebugChance" value="$testdebugchance" />
                        </run_actions>

                        <do_for_each name="$entry" in="global.$BuildTaskIDs" counter="$i">
                            <set_value name="$a" exact="'&lt;%s&gt;'.[$build]"/>
                            <set_value name="$b" exact="'&lt;%s&gt;'.[$entry.$id]"/>
                            <do_if value="$a == $b">
                                <do_if value="$entry.$RFMKey?">
                                    <set_value name="$que" exact="$i" />
                                    <break />
                                </do_if>
                                <do_else>
                                    <debug_text text="'  BuildTaskIDs listesinde build %s için RFMKey propertysi bulunamadı'.[$a]" chance="Main.$DeepDebug"/>
                                </do_else>
                            </do_if>
                        </do_for_each>

                        <do_if value="$que?">

                            <set_value name="$shipyard" exact="event.param2"/>
                            <set_value name="$buildprocessor" exact="event.param.buildprocessor"/>
                            
                            <set_value name="$price" exact="$build.price"/>

                            <add_to_group groupname="$buildercomponents" object="$shipyard" chance="if $shipyard != null then 100 else 0"/>
                            <add_to_group groupname="$buildercomponents" object="$buildprocessor" chance="if $buildprocessor != null then 100 else 0"/>

                            <!-- taskı liteden, started içinde finish ya da cancel olduğundada sileceğiz -->
                            <set_value name="global.$BuildTaskIDs.{$que}.$build" exact="$build" />

                            <set_value name="$entry" exact="global.$BuildTaskIDs.{$que}" />
                            <set_value name="$RFMKey" exact="$entry.$RFMKey"/>
                            <set_value name="$ShipKey" exact="$entry.$ShipKey"/>

                            <debug_text text="'PLAYER     BUILD     ADD   RFM_%s_%s , buildtask = %s , buildingcontainer = %s'.[$RFMKey, $ShipKey, $build, $shipyard]" chance="Main.$DebugChance"/>
                            
                            <debug_text text="'  RFMKey_%s_%s  Cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$DeepDebug"/>
                            <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                            
                            <debug_text text="'  RFMKey_%s_%s  new Cue.%s Set ediliyor..'.[$RFMKey, $ShipKey, $cue]" chance="Main.$DeepDebug"/>
                            <run_actions ref="Set_RebuildCueTable">
                                <param name="RFMKey"                value="$RFMKey" />
                                <param name="ShipKey"               value="$ShipKey" />
                                <param name="cue"                   value="$cue" />
                                <param name="shipyard"              value="$shipyard" />
                                <param name="build"                 value="$build" />
                                <param name="isWaitingForRebuild"   value="false" />
                                <param name="respondMsg"            value="''" />
                                <param name="respond"               value="table[]" />
                            </run_actions>

                            <include_actions ref="Let_RFM_LogFileNames" />

                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
            
                            <!-- data change notification for OPEN LUA -->
                            <include_actions ref="Set_MDDataChanged" />
    
                            <!--  DEBUG -->
                            <debug_text text="'Build Task Added to RFM_%s_%s   build = %s , buildprocessor = %s , buildingcontainer = &lt;%s&gt; %s %s'.[$RFMKey, $ShipKey, $build, $buildprocessor, $shipyard, $shipyard.knownname, $shipyard.idcode]" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'    ( %s ) Build Task Added to RFM_%s_ $build = %s - , buildprocessor = %s , buildingcontainer = &lt;%s&gt; %s %s  Age: %s'.[$ShipKey, $RFMKey, $build, $buildprocessor, $shipyard, $shipyard.knownname, $shipyard.idcode, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
    
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
    
                        </do_if>
                        <do_else>
                            <set_value name="$cancell" exact="true" />
                        </do_else>

                    </do_if>
                    <do_else>
                        <set_value name="$cancell" exact="true" />
                    </do_else>

                </do_if>

                <do_if value="$cancell">
                    <debug_text text="'    MISMATCH TASK. CANCELLING THIS CUE. (RFM_%s_%s)'.[$RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                    <cancel_cue cue="this" />
                </do_if>

            </actions>
            <cues>
                
                <cue name="Player_Build_Added_Cancel_Build">
                    <conditions>
                        <check_all>
                            <check_any>
                                <event_player_build_cancelled build="$build"/>
                                <event_object_destroyed group="$buildercomponents"/>
                            </check_any>
                            <!-- oyun pausedeyken parentin 2.parçası etkin olmuyor ve alt cueler kontrole başlıyor
                                $que almış isek bu cue çalışsın 
                            -->
                            <check_value value="$que?" />
                        </check_all>
                    </conditions>
                    <actions>
                        <set_value name="$event"        exact="'Build    %s  was CANCELLED'.[$build]"/>
                        <do_if value="event.name == 'event_object_destroyed'">
                            <set_value name="$event"    exact="'Station %s was DESTROYED. %s'.[(if $buildprocessor != null then 'buildprocessor %s'.[$buildprocessor] else '') , $event]"/>
                        </do_if>
                        <debug_text text="'%s. Shipyard = &lt;%s&gt; %s %s (RFM_%s_%s)'.[$event, $shipyard, $shipyard.knownname, $shipyard.idcode, $RFMKey, $ShipKey]" chance="Main.$DebugChance"/>

                        <remove_value name="global.$BuildTaskIDs.{$que}" />

                        <!-- Lost Shipe çevireceğiz -->

                        <debug_text text="'  RFMKey_%s_%s  cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$DeepDebug"/>
                        <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                        
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" />

                        <!-- İstasyon destroy olduğunda oyunun normalinde parayı geri vermiyor, biz geri alacağız -->
                        <do_if value="event.name == 'event_object_destroyed'">
                            <set_value name="$finishStatus" exact="'the %s was destroyed'.[if not $shipyard.iswreck then 'Station build processor' else 'station']" />

                            <transfer_money from="$shipyard" to="faction.player" amount="$price"/>
                            
                            <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                <replace string="'$SHIP$'" with="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name + ' ( ' + $ShipKey + ' )' "/>
                                <replace string="'$STATUS$'" with="$finishStatus"/>
                            </substitute_text>
                            <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" money="$price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                        </do_if>

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
    
                        <!-- data change notification for OPEN LUA -->
                        <include_actions ref="Set_MDDataChanged" />

                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                        <cancel_cue cue="parent" />
                    </actions>
                </cue>


            </cues>
        </cue>
        
        <!--    Yalnızca shipbuild işlemlerini ve global.$BuildTaskIDs listesinde olan tasklar için çalıştıracağız
                bekleme sırası = 0  (malzeme sorunu yok, progress işliyor)s
        -->
        <cue name="Player_Build_Started" instantiate="true" namespace="this">
            <conditions>
                <check_any>
                    <event_player_build_started />
                </check_any>
            </conditions>
            <actions>
                <set_value name="$buildprocessor" exact="event.param" comment="ya da $build.buildprocessor"/>
                <set_value name="$build"    exact="event.param3"/>
                <set_value name="$shipyard" exact="if not $build.exists then (if $buildprocessor.build.exists then $buildprocessor.build.object else null) else $build.object" comment="ya da $buildprocessor.build.object"/>
                <set_value name="$RFMKey"   exact="0"/>
                <set_value name="$ShipKey"  exact="0"/>
                <set_value name="$ShipIDX"  exact="0"/>
                <set_value name="$cue"      exact="this" />
                <set_value name="$NewShip"  exact="@$buildprocessor.buildanchor" comment="ya da $build.buildobject ya da $build.construction"/>
                <set_value name="$cancell"  exact="not (event.param3.exists and event.param3.isshipbuild)" />

                <set_value name="$Ship_CommanderKey" exact="0"/>
                <set_value name="$Ship_Commander" exact="null"/>
                <set_value name="$Ship_Name"    exact="$NewShip.name" />
                <set_value name="$Ship_IdCode" exact="$NewShip.idcode"/>
                <set_value name="$price" exact="0"/>
            
                <set_value name="$testdebugchance" exact="0" />

            </actions>
            <delay exact="1ms"/>
            <actions>
                <debug_text text="'PLAYER   BUILD   STARTED buildtask = %s , buildprocessor = %s , constructionsequence = %s'.[event.param3, event.param, event.param2]" chance="$testdebugchance"/>

                <set_value name="$extrBuild" exact="table[
                    $base                           = @$build.base,
                    $buildmodule                    = @$build.buildmodule,
                    $buildobject	                = @$build.buildobject,
                    $buildprocessor	                = @$build.buildprocessor,
                    $construction	                = @$build.construction,
                    $constructionsequence	        = @$build.constructionsequence,
                    $consumables	                = @$build.consumables,
                    $exists	                        = @$build.exists,
                    $faction	                    = @$build.faction,
                    $isexpansion	                = @$build.isexpansion,
                    $isprocessing	                = @$build.isprocessing,
                    $isrecycleshipbuild	            = @$build.isrecycleshipbuild,
                    $isrestock	                    = @$build.isrestock,
                    $isshipbuild	                = @$build.isshipbuild,
                    $isshipmodification	            = @$build.isshipmodification,
                    $issoftwareonlyupgrade	        = @$build.issoftwareonlyupgrade,
                    $isupgrade	                    = @$build.isupgrade,
                    $loadout	                    = @$build.loadout,
                    $macro	                        = @$build.macro,
                    $mayrequireconstructionvessel   = @$build.mayrequireconstructionvessel,
                    $object	                        = @$build.object,
                    $position	                    = @$build.position,
                    $price	                        = @$build.price,
                    $rotation	                    = @$build.rotation,
                    $time	                        = @$build.time,
                    $transferredamount	            = @$build.transferredamount,
                    $zone                           = @$build.zone, 
                    $cancell                        = if $cancell then 'YES' or 'NO'
                    ]" />
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$extrBuild" />
                    <param name="recursiondepth" value="2" />
                    <param name="DebugChance" value="$testdebugchance" />
                </run_actions>

                <do_if value="not $cancell">
                    
                    <do_if value="global.$BuildTaskIDs? and (typeof global.$BuildTaskIDs == datatype.list)">
                        <debug_text text="'BEFORE global.$BuildTaskIDs = '.[]" chance="$testdebugchance"/>
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="global.$BuildTaskIDs" />
                            <param name="recursiondepth" value="2" />
                            <param name="DebugChance" value="$testdebugchance" />
                        </run_actions>

                        <do_for_each name="$entry" in="global.$BuildTaskIDs" counter="$i">
                            <set_value name="$a" exact="'&lt;%s&gt;'.[event.param3]"/>
                            <set_value name="$b" exact="'&lt;%s&gt;'.[$entry.$id]"/>
                            <do_if value="$a == $b">
                                <do_if value="$entry.$RFMKey?">
                                    <set_value name="$que" exact="$i" />
                                    <break />
                                </do_if>
                                <do_else>
                                    <debug_text text="'%s adet task listesinde build %s için RFMKey propertysi bulunamadı'.[global.$BuildTaskIDs.count, $a]" />
                                </do_else>
                            </do_if>
                        </do_for_each>
                    </do_if>

                    <do_if value="$que?">
                        <set_value name="$entry" exact="global.$BuildTaskIDs.{$que}" />
                        <set_value name="$RFMKey" exact="$entry.$RFMKey"/>
                        <set_value name="$ShipKey" exact="$entry.$ShipKey"/>

                        <set_value name="$price" exact="$build.price"/>

                        <debug_text text="'PLAYEROWNED SHIPS BUILD STARTED : param(buildprocessor) = %s, param2(constructionsquance) = %s, param3(buildtask) = %s, $build = %s'.[event.param, event.param2, event.param3, $build]" chance="Main.$DebugChance"/>

                        <debug_text text="'  RFMKey_%s_%s  cue.%s İptal ediliyor..'.[$RFMKey, $ShipKey, Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue]" chance="Main.$ChangesOnFleetDebug"/>
                        <cancel_cue cue="Main.$RebuildCues.{$RFMKey}.{$ShipKey}.$cue" />
                        
                        <debug_text text="'  RFMKey_%s_%s  New cue.%s Set ediliyor..'.[$RFMKey, $ShipKey, $cue]" chance="Main.$ChangesOnFleetDebug"/>
                        <run_actions ref="Set_RebuildCueTable">
                            <param name="RFMKey"                value="$RFMKey" />
                            <param name="ShipKey"               value="$ShipKey" />
                            <param name="cue"                   value="$cue" />
                            <param name="shipyard"              value="$shipyard" />
                            <param name="build"                 value="$build" />
                            <param name="isWaitingForRebuild"   value="false" />
                            <param name="respondMsg"            value="''" />
                            <param name="respond"               value="table[]" />
                        </run_actions>

                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="$NewShip"/>
                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="$NewShip.idcode"/>

                        
                        <debug_text text="'  RFM_%s_( %s ) = &lt;%s&gt; %s %s'.[$RFMKey, $ShipKey, @$NewShip, @$NewShip.knownname, @$NewShip.idcode]" chance="Main.$ChangesOnFleetDebug"/>

                        <debug_text text="'AFTER global.$BuildTaskIDs = '.[]" chance="$testdebugchance"/>
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="global.$BuildTaskIDs" />
                            <param name="recursiondepth" value="2" />
                            <param name="DebugChance" value="$testdebugchance" />
                        </run_actions>

                        <include_actions ref="Let_RFM_LogFileNames" />

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
        
                        <!-- data change notification for OPEN LUA -->
                        <include_actions ref="Set_MDDataChanged" />

                        <!--  DEBUG -->
                        <debug_to_file text="'    ( %s ) Build Started to RFM_%s_ $build = %s - Age: %s'.[$ShipKey, $RFMKey, $build, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                    </do_if>
                    <do_else>
                        <set_value name="$cancell" exact="true" />
                    </do_else>

                    <!-- burdan sonraki değişkenler alt culere için açıldı -->

                    <do_if value="$que?">
                        <set_value name="$ShipIDX" exact="$ShipKey" />
                        <set_value name="$Ship_CommanderKey" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$commanderidx"/>
                        <set_value name="$Ship_Commander" exact="@$RFMCue.$fleetshipsByIdx.{$Ship_CommanderKey}"/>
                        
                        <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$name"/>
                        <set_value name="$Ship_IdCode" exact="$NewShip.idcode"/>
    
                        <remove_value name="global.$BuildTaskIDs.{$que}" />
                        <remove_value name="$que" />
                    </do_if>
                    
                    <set_value name="$lastErrMsg" exact="''" />
                    <set_value name="$finishStatus" exact="''" />
                
                </do_if>
                
                <do_if value="$cancell">
                    <debug_text text="'  MISMATCH TASK. CANCELLING THIS CUE. (%s %s&lt;%s&gt; RFM_%s_%s)'.[$Ship_Name, @$NewShip.idcode, @$NewShip, $RFMKey, $ShipKey]" chance="Main.$DeepDebug"/>
                    <cancel_cue cue="this" />
                </do_if>
                
            </actions>
            <cues>
                <!-- Start almış bir gemi için dikkat edilecekler;
                    1 - bu esnada rfm kaydından çıkarılmış olabilir
                    3 - istasyon patlayabilir
                -->
                <cue name="Player_Build_Started_Build_Finished">
                    <conditions>
                        <check_any>
                            <event_player_build_finished build="$build"/>
                        </check_any>
                    </conditions>
                    <actions></actions>
                    <!-- üretildikten sonra istasyonun gemiye modifikasyon, pilot vs.. aktarma işi için bekliyoruz.
                        restock, shipmodification işlemleri için build_started build<0x0> ile tekrar başlayacak, beklemek yerine orda da yapzılabilirdi.
                    -->
                    <delay exact="1s" />
                    <actions>
                        
                        <debug_text text="'RFM_%s_%s  Build Finished.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DebugChance"/>
                        <!-- 1 -->
                        <set_object_name object="$NewShip" name="$Ship_Name"/>

                        <debug_to_file text="'    ( %s ) Build Finished.  %s %s&lt;%s&gt;'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                        <debug_to_file text="'    ( %s ) Build Finished.  %s %s&lt;%s&gt;'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        <debug_to_file text="'  ( %s ) Build Finished.  %s %s&lt;%s&gt;'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        <set_value name="$finishStatus" exact="'Build Finished'" />

                        <!-- transferring people, 
                            üretilen gemide pilot olacak ancak personel olmayacak, 
                            pilotu kaldırıp yerine ayarlardaki gibi oluşturacağız,
                            personel için de ayarlardaki kadar create edip atayacağız
                        -->
                        <set_value name="$Ship_Pilot" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPilot"/>
                        <set_value name="$Ship_BulkCrew" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tBulkCrew"/>

                        <debug_to_file text="'    ( %s ) Transfering People...'.[$ShipIDX]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        <!-- Pilot -->
                        <debug_text text="'  RFM_%s_%s  Changing pilot.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                        <destroy_object object="$NewShip.pilot" />
                        <create_control_entity object="$NewShip" post="controlpost.aipilot" macro="$Ship_Pilot.$macro">
                            <owner exact="faction.player"/>
                        </create_control_entity>
                        <set_skill type="skilltype.engineering" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.engineering}"/>
                        <set_skill type="skilltype.morale" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.morale}"/>
                        <set_skill type="skilltype.boarding" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.boarding}"/>
                        <set_skill type="skilltype.management" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.management}"/>
                        <set_skill type="skilltype.piloting" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.piloting}"/>

                        <debug_text text="'  RFM_%s_%s  Changing peoples.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                        <!-- Peoples-->
                        <set_value name="$Roles" exact="[entityrole.service, entityrole.marine]"/>
                        <do_all exact="$Roles.count" counter="$i">
                            <do_for_each name="$Crew" in="$Ship_BulkCrew.{$Roles.{$i}}">
                                <create_npc_template name="$NPC" object="$NewShip" role="$Roles.{$i}" macro="$Crew.$macro"/>
                                <do_if value="global.$upbRF_DATA.$Editing.$personnelcloning">
                                    <set_value name="$skillEngineering" exact="$Crew.$skill.{skilltype.engineering}" />
                                    <set_value name="$skillMorale" exact="$Crew.$skill.{skilltype.morale}" />
                                    <set_value name="$skillBoarding" exact="$Crew.$skill.{skilltype.boarding}" />
                                    <set_value name="$skillManagement" exact="$Crew.$skill.{skilltype.management}" />
                                    <set_value name="$skillPiloting" exact="$Crew.$skill.{skilltype.piloting}" />
                                </do_if>
                                <do_else>
                                    <set_value name="$skillEngineering" exact="[1, 2, 3, 4, 5].random" />
                                    <set_value name="$skillMorale" exact="[1, 2, 3, 4, 5].random" />
                                    <set_value name="$skillBoarding" exact="[1, 2, 3, 4, 5].random" />
                                    <set_value name="$skillManagement" exact="[1, 2, 3, 4, 5].random" />
                                    <set_value name="$skillPiloting" exact="[1, 2, 3, 4, 5].random" />
                                </do_else>
                                <set_skill type="skilltype.engineering" object="$NewShip" template="$NPC" exact="$skillEngineering"/>
                                <set_skill type="skilltype.morale" object="$NewShip" template="$NPC" exact="$skillMorale"/>
                                <set_skill type="skilltype.boarding" object="$NewShip" template="$NPC" exact="$skillBoarding"/>
                                <set_skill type="skilltype.management" object="$NewShip" template="$NPC" exact="$skillManagement"/>
                                <set_skill type="skilltype.piloting" object="$NewShip" template="$NPC" exact="$skillPiloting"/>
                            </do_for_each>
                        </do_all>

                        <do_if value="Main.$FleetRecords.{$RFMKey}.keys.list.indexof.{$ShipIDX}" comment="Filo kaydında mevcutsa bağla">
                            
                            <debug_text text="'  RFM_%s_%s  Records updating.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                            <!-- RFM Managere gemiyi ekle-->
                            <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>
                            <add_to_group groupname="$RFMCue.$Subordinates" object="$NewShip"/>
                            <set_value name="$RFMCue.$fleetshipsByIdx.{$ShipIDX}" exact="$NewShip"/>
                            <set_value name="$RFMCue.$fleetshipsByComp.{$NewShip}" exact="$ShipIDX"/>
                            <!-- Record tablosunu güncelle-->
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$object" exact="$NewShip"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$idcode" exact="$NewShip.idcode"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$destroyed" exact="false"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$destroyedtime" exact="null"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null"/>
                            <!-- RFM Fleet tablosunu güncelle -->
                            <!-- Add Remove olayları içinde yazıldı
                            <set_value name="$index" exact="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.indexof.{$ShipIDX}" />
                            <do_if value="$index > 0">
                                <remove_value name="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.{$index}" />
                            </do_if>
                            -->
                            <do_if value="$ShipIDX == 1">
                                <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="$NewShip"/>
                            </do_if>

                            <debug_text text="'  RFM_%s_%s  Checking tShipPlan.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>                            
                            <!-- patlamış gemilerin tShipPlan ve Individual kayıtları olmayabilir. üretimden çıkanı kontrol edelim -->
                            <run_actions ref="Fix_Ship_tShipPlan" >
                                <param name="RFMKey"        value="$RFMKey"     />
                                <param name="ShipKey"       value="$ShipIDX"    />
                                <param name="SendIt"        value="true"       />
                            </run_actions>

                            <debug_text text="'  RFM_%s_%s  Setting Individuals.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                            <!-- Gemiye ait Indivudual Kaydını Set edelim-->
                            <do_if value="not player.entity.$IIStack?">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>
                            <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                            <do_if value="typeof player.entity.$IIStack == datatype.table">
                                <set_value name="player.entity.$IIStack" exact="[]"/>
                            </do_if>

                            <set_value name="$IndividualInstructions" exact="table[
                                $controllable = $NewShip,
                                $RFMKey = $RFMKey,
                                $ShipKey = $ShipIDX,
                                $tIndividualInstructions = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tIndividualInstructions,
                                $isdebug = (if Main.$DeepDebug == 100 then true else false)
                            ]" />
                            <append_to_list name="player.entity.$IIStack" exact="$IndividualInstructions" />
                            <raise_lua_event name="'Set_IndividualInstructions'" />

                            <set_value name="player.entity.$RM_Fleets" exact="Main.$RM_Fleets" />
                            <set_value name="player.entity.$FleetRecords" exact="Main.$FleetRecords" />

                            <debug_text text="'  RFM_%s_%s  Check And Assign To Fleet.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'    ( %s ) Check and Assign to RFM_%s_'.[$ShipIDX, $RFMKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                            <signal_cue_instantly cue="CheckAndAssignToFleet" param="[$RFMKey, $ShipIDX, $NewShip]" />

                            <debug_text text="' RFM_%s_%s  DONE...  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>

                            <debug_to_file text="'RFM_%s_( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt;   Age: %s'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt; .   Age: %s'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            <debug_to_file text="'( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt; .   Age: %s'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                        </do_if>
                        <do_else>
                            <!-- 2 -->
                            <debug_to_file text="'    ( %s ) Fleet Kaydından çıkarılmış. oldShipIDX = %s'.[$ShipIDX, $ShipKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                            <do_if value="$Ship_Commander != null">
                                <do_if value="not $Ship_Commander.iswreck">
                                    <set_value name="$finishStatus" exact="'Removed from fleet registration. Connected to his commander.'" />
                                    <set_value name="$lastErrMsg" exact="''" />
                                    <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s (%s %s&lt;%s&gt;)'.[$ShipKey, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $Ship_Commander.knownname, $Ship_Commander.idcode, $Ship_Commander]" />
                                    <set_value name="$Ship_Assignment" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$assignment"/>
                                    <set_value name="$Ship_Subordinategroupid" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$subordinategroupid"/>
                                    <create_order object="$NewShip" id="'AssignCommander'" name="$order">
                                        <param name="commander" value="$Ship_Commander"/>
                                        <param name="assignment" value="$Ship_Assignment"/>
                                        <param name="subordinategroup" value="$Ship_Subordinategroupid"/>
                                        <param name="setgroupassignment" value="true"/>
                                        <param name="cancelorders" value="false" />
                                    </create_order>
                                </do_if>
                                <do_else>
                                    <set_value name="$finishStatus" exact="'Removed from fleet registration. The Commander it\'s attached to is dead.'" />
                                    <set_value name="$lastErrMsg" exact="'This ship is waiting on the shipyard.'" />
                                    <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s (%s %s&lt;%s&gt;) %s : %s %s'.[$oldShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $Ship_Commander.knownname, $Ship_Commander.idcode, $Ship_Commander, $lastErrMsg, $Shipyard.name, $Shipyard.idcode]" />
                                </do_else>
                            </do_if>
                            <do_else>
                                <set_value name="$finishStatus" exact="'Removed from fleet registration. There is no Commander attached to it.'" />
                                <set_value name="$lastErrMsg" exact="'This ship is waiting on the shipyard.'" />
                                <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s  %s : %s %s'.[$oldShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $lastErrMsg, $Shipyard.name, $Shipyard.idcode]" />
                            </do_else>
                            <debug_to_file text="'RFM_%s_%s  Age: %s'.[$RFMKey, $rText, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                        </do_else>
                        
                        <!-- Tablodan kaldırıyoruz-->
                        <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}" />
                        <set_value name="$pText" exact="'    REMOVED RFM_%s_( %s ) %s  from RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />

                        <!-- data change notification for OPEN LUA -->
                        <include_actions ref="Set_MDDataChanged" />

                        <!-- DEBUG -->

                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$pText" />
                        </run_actions>

                        <!-- diğer alt culerin beklemesini sonlandırıyoruz -->
                        <cancel_cue cue="parent"/>

                    </actions>
                </cue>

                <cue name="Player_Build_Started_Building_Destroyed">
                    <conditions>
                        <event_object_destroyed object="$buildprocessor"/>
                    </conditions>
                    <actions>
                        <debug_text text="'Station &lt;%s&gt; %s %s was DESTROYED, object = &lt;%s&gt; == buildprocessor = &lt;%s&gt;, Cancelling RFM_%s_%s - %s &lt;%s&gt;'.[@$shipyard, @$shipyard.knownname, @$shipyard.idcode, event.object, @$buildprocessor, $RFMKey, $ShipIDX, $Ship_Name, $NewShip]" chance="$testdebugchance"/>
                        <do_if value="$shipyard != null and event.object == $buildprocessor">
                            <set_value name="$event" exact="''" />
                            <set_value name="$event"    exact="'Station %s was DESTROYED. %s'.[(if $buildprocessor != null then 'buildprocessor %s'.[$buildprocessor] else '') , $event]"/>
                            <debug_text text="'%s. Shipyard = &lt;%s&gt; %s %s (Cancelling build.. RFM_%s_%s)'.[$event, $shipyard, $shipyard.knownname, $shipyard.idcode, $RFMKey, $ShipIDX]" chance="Main.$DebugChance"/>
                            
                            <!-- Üretim tamamlanamadan istyasyon yokedildi 
                                LOST Ship oluşturacağız
                                Tabloları sileceğiz 
                                    recorda atanmış object ve idcode
                                    rebuildcue tablosunda shipkey kaydı
                                parent cueyi kapatıyoruz
                            -->
                            <set_value name="$finishStatus" exact="'the %s was destroyed'.[if not $shipyard.iswreck then 'Station build processor' else 'station']" />
                            <!-- İstasyon destroy olduğunda oyunun normalinde parayı geri vermiyor, biz geri alacağız -->
                            <transfer_money from="$shipyard" to="faction.player" amount="$price"/>
                            
                            <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + ' ( ' + $ShipIDX + ' )' "/>
                                <replace string="'$STATUS$'" with="$finishStatus"/>
                            </substitute_text>
                            <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" money="$price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$object" exact="null"/>
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipKey}.$idcode" exact="''"/>
    
                            <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}" />
                            <set_value name="$pText" exact="'    REMOVED RFM_%s_( %s ) %s  from RebuildCues Table , Station was Destroyed ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
    
                            <run_actions ref="Check_FleetLockStatus">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
        
                            <!-- data change notification for OPEN LUA -->
                            <include_actions ref="Set_MDDataChanged" />
    
                            <!-- DEBUG -->
                            <!--  DEBUG -->
                            <debug_to_file text="'    ( %s ) Build Cancelling to RFM_%s_ $build = %s , Station Destroyed - Age: %s'.[$ShipKey, $RFMKey, $build, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <!-- FLEET RECORD TABLE -->
                            <run_actions ref="Debug_FleetRecord">
                                <param name="RFMKey" value="$RFMKey" />
                            </run_actions>
    
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
    
                            <!-- Diğer alt cuelerin çalışmasını sonlandırıyoruz-->
                            <cancel_cue cue="parent"/>
    
                        </do_if>
                        <do_else>
                            <debug_text text="'  MISMATCH OBJECT.  object = &lt;%s&gt; == buildprocessor = &lt;%s&gt;   , RESETTING THIS CUE.  (RFM_%s_%s) Ship = %s %s&lt;%s&gt;'.[event.object, $buildprocessor, $RFMKey, $ShipKey, $Ship_Name, @$NewShip.idcode, @$NewShip]" chance="Main.$DeepDebug"/>
                            <reset_cue cue="this" />
                        </do_else>
                    </actions>
                </cue>
            </cues>
        </cue>




        
        <!-- PARAM List  [RFMKey, ShipINDX, (destroyedobject default null), ( $passingcriterias default [] ) ] 
            IN  : 
                PARAM List  [RFMKey, ShipINDX, (destroyedobject default null), pass ] 
            OUT :
                none
        -->
        <cue name="AddConstructonShipForFleet" instantiate="true" namespace="this" >
            <conditions>
                <event_cue_signalled />
                <check_value value="typeof event.param == datatype.list" />
                <check_value value="not Main.$RebuildCues.{event.param.{1}}.keys.list.indexof.{event.param.{2}}" />
            </conditions>
            <actions>
                
                <set_value name="$RFMKey" exact="event.param.{1}"/>
                <set_value name="$ShipIDX" exact="event.param.{2}"/>

                <!-- $ShipIDX == -1 olma durumu yalnızca üretilen gemi üretilirken filo kaydından çıkarılmışsa 
                    (SpecRemove olayı içinden gönderilecek) (RFM kapatılmış olabilir) olur .
                    ShipIDX e -1 değeri göndererek bu durumu bildireceğiz
                    oldShipIDX ve ShipIDX bu durumda farklı olacaktır.
                    bilgilendirme mesajlarında oldShipIDX i kullanmak daha uygun olur.
                     -->
                <set_value name="$oldShipIDX" exact="$ShipIDX" />
                <set_value name="$Destroyed" exact="@event.param.{3}"/>
                <set_value name="$Ship_IdCode" exact="if $Destroyed != null then $Destroyed.idcode else ''"/>

                <include_actions ref="Let_failcasesOptions" />
                <!-- yapılandırma tamam ama bu özellikle henüz çalışmıyoruz
                    ekipmanlarda değişiklik olacağından
                        md içindeki loadout tablosundan verisini sileceğiz (gemi üretildiğinde gemiye ait loadout tekrar okunup tabloda yerine konacak)
                        tshipwares içinden de pass geçilen wareler çıkarılacak 
                        addconstructionship md komutu terine lua ya construct ship vereceğiz
                            rfmkey, shipkey, ... lua içindeki fonksiyon için lazım olacak parametreler belirlenecek
                -->
                
                <do_if value="event.param.{4}?">
                    <set_value name="$passingcriterias" exact="event.param.{4}" />
                </do_if>
                <do_if value="not $passingcriterias? or $passingcriterias == null or typeof $passingcriterias != datatype.list">
                    <create_list name="$passingcriterias" />
                </do_if>
                <!-- ŞU an sadece 'price' keyi için düzenleme var. 
                    respond tablo keyleri ile liste tutacağız ve name den alacağız bu key isimlerini, listede olan keyler pass olayında devreye girecek 
                    tanımlı pass keyleri : 
                    sectorisknown, relationdockge, shiptrader, buildclass, buildmacro, m_ship_licence, c_ship_licence, software, equipment, price
                -->
                <!-- <debug_text text="'Before $passingcriterias = %s'.[$passingcriterias]" />-->
                <do_for_each name="$key" valuename="$entry" in="global.$upbRF_DATA.$Editing.$failcases">
                    <do_if value="not $entry.$check">
                        <do_if value="not $passingcriterias.indexof.{$entry.$name}">
                            <append_to_list name="$passingcriterias" exact="$entry.$name" />
                        </do_if>
                    </do_if>
                </do_for_each>
                <do_if value="not $passingcriterias.indexof.{'software'}">
                    <append_to_list name="$passingcriterias" exact="'software'" />
                </do_if>
                <!-- <debug_text text="'After $passingcriterias = %s'.[$passingcriterias]" />-->

                <do_if value="$ShipIDX == null">
                    <debug_text text="'ShipIDX NULL geldi. NEDEN?'" />
                    <cancel_cue cue="this" />
                </do_if>

                <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                <do_if value="$RFMCue == null">
                    <debug_text text="'RFMCue NULL geldi. NEDEN?'" />
                    <cancel_cue cue="this" />
                </do_if>

                <set_value name="$Ship_Sector" exact="Main.$RM_Fleets.{$RFMKey}.$sectorid" />

                <set_value name="$reBuildTryNum" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" />
                <set_value name="$Ship_CommanderKey" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$commanderidx "/>
                <set_value name="$Ship_Commander" exact="@$RFMCue.$fleetshipsByIdx.{$Ship_CommanderKey}"/>
                <set_value name="$Ship_Assignment" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$assignment"/>
                <set_value name="$Ship_Subordinategroupid" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$subordinategroupid"/>

                <set_value name="$Ship_Name" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$name"/>
                <set_value name="$Ship_Macro" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro"/>
                <set_value name="$Ship_Type" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$type"/>
                <set_value name="$Ship_Loadout" exact="Main.$Loadouts.{$RFMKey}.{$ShipIDX}"/>
                <!-- 
                <set_value name="$Ship_Loadout" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$sLoadout"/>
                -->
                <set_value name="$Ship_WareTable" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tWare"/>
                <set_value name="$Ship_Pilot" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tPilot"/>
                <set_value name="$Ship_BulkCrew" exact="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tBulkCrew"/>
                
                <debug_text text="'  IS CLASS STATION = %s'.[$Ship_Macro.isclass.station]" chance="Main.$DeepDebug"/>
                <do_if value="$Ship_Macro.isclass.station">
                    <cancel_cue cue="AddConstructonShipForFleet" />
                </do_if>

                <include_actions ref="Let_RFM_LogFileNames" />

                
                <!-- ADD RebuildCues TABLE-->
                <set_value name="$cue" exact="this" />
                <set_value name="$shipyard" exact="@$Shipyard" />
                <set_value name="$build" exact="@$Build" />
                <set_value name="$isWaitingForRebuild" exact="false" />
                <set_value name="$respondMsg" exact="''" />
                <set_value name="$respond" exact="table[]" />

                <run_actions ref="Set_RebuildCueTable">
                    <param name="RFMKey"                value="$RFMKey" />
                    <param name="ShipKey"               value="$ShipIDX" />
                    <param name="cue"                   value="$cue" />
                    <param name="shipyard"              value="$shipyard" />
                    <param name="build"                 value="$build" />
                    <param name="isWaitingForRebuild"   value="$isWaitingForRebuild" />
                    <param name="respondMsg"            value="$respondMsg" />
                    <param name="respond"               value="$respond" />
                </run_actions>

                <set_value name="$NextRetryTime" exact="0s"/>
                
                <set_value name="$reBuildStartTime" exact="null" />

                
                <do_if value="$Ship_Macro.isclass.station">
                    <!-- YAPILACAK-->
                    <!-- ISTASYON patlarsa sublardan herhangi biri promote oluyor -->
                    <!-- İstasyon inşa rutinlerini yazıncaya kadar RFM'yi kapatacağız 
                        Kalan gemiler ne olacak ?
                        Yöntemler:
                        1- Promote olan gemiye istasyonun bulunduğu pozisyona protect order verilecek,
                            sub gemilere, bulundukalrı subordinate groupidleri korunarak defans assigmentı atanacak
                            istasyon, managerdan çıkarılıp RFM korunacak
                        2- Direk kapatıyoruz. record yapısından ölü gemi çıkarma rutini yazılınca 1.yöntem devam edebilir.
                    -->
                    <!-- param : $RFMKey Or a list [ $RFMKey, $endBy (default 'player'), $IsSpeak (default false), $IsSound (default false), $cancelcue (default true) , $removetable (default true) ]-->
                    <!-- mormalde RFM Cue içinden geliyoruz ve kendisini kapatmaya çalışıyoruz, zorlayacağız-->
                    <signal_cue_instantly cue="Disable__RFM" param="[ $RFMKey, 'Commander Station Destroyed' ]" />
                </do_if>
                <do_else>
                    <debug_text text="'    ADDED RFM_%s_( %s ) %s to RebuildCues Table '.[$RFMKey, $ShipIDX, $Ship_Name]" chance="Main.$DebugChance" />
                    <!--        DEBUG   -->
                    <!-- COM FILE-->
                    <!-- 
                    <set_value name="$printlogF" exact="$Command_logF"/>
                    <include_actions ref="Print_fleetshipsByIdx" />
                    <remove_value name="$printlogF" />
                    -->
                    <!-- FLEET RECORD TABLE -->
                    <run_actions ref="Debug_FleetRecord">
                        <param name="RFMKey" value="$RFMKey" />
                    </run_actions>
                    <!-- REBUILD CUES -->
                    <set_value name="$pText" exact="'    ADDED RFM_%s_( %s ) %s to RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
                    <run_actions ref="Debug_RebuildCue">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="inserttext" value="$pText" />
                    </run_actions>
                    <!-- ALL REBUILD CUES -->
                    <run_actions ref="Debug_AllRebuildCues"/>
                </do_else>

                <!-- data change notification for OPEN LUA -->
                <include_actions ref="Set_MDDataChanged" />

            </actions>
            <cues>
                <!-- SEARCHING A SHIPYARD-->
                <cue name="RebuildShip" checkinterval="30s" >
                    <conditions>
                        <check_any>
                            <check_age min="$NextRetryTime"/>
                        </check_any>
                    </conditions>
                    <actions>

                        <do_if value="@$oldShipIDX != null and @$oldShipIDX != @$ShipIDX">
                            <debug_text text="'   A L E R T    $oldShipIDX = %s , $ShipIDX = %s'.[$oldShipIDX,$ShipIDX]" />
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                        </do_if>

                        <debug_to_file text="'- - - Age: ' + player.age + '- Cue[%s] - RFM_%s_( %s ) %s %s'.[this.name, $RFMKey, $ShipIDX, $Ship_Name, $Ship_IdCode]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        
                        <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                        <set_value name="$cue" exact="parent" />


                            <set_value name="$reBuildTryNum" operation="add" exact="1" />
                            <set_value name="$reBuildStartTime" exact="player.age" />
                            <set_value name="$NextRetryTime" exact="$reBuildStartTime + (global.$upbRF_DATA.$Editing.$NextRetryTime)min"/>

                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="$reBuildTryNum" />
                            <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="$reBuildStartTime"/>

                            <debug_to_file text="' - - - NOW [%s], NextRetryTime[%s] (%smin), checkinterval = 30sec - RFM_%s_( %s ) Destroyed = %s %s'.[player.age, $NextRetryTime, global.$upbRF_DATA.$Editing.$NextRetryTime, $RFMKey, $ShipIDX, $Ship_Name, $Ship_IdCode]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                            <debug_to_file text="'        RFM_%s_( %s ) %s (%s) Starting reBuild  trynum = %s'.[$RFMKey, $ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'  ( %s ) %s (%s) Starting reBuild  trynum = %s'.[$ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            <debug_to_file text="'( %s ) %s (%s) Starting reBuild  trynum = %s'.[$ShipIDX, $Ship_Name, $Ship_Macro, $reBuildTryNum]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            
                            <set_value name="$finishStatus" exact="''" />
                            <set_value name="$lastErrMsg" exact="''" />

                            <set_value name="$Yards" exact="[]" />
                            <!-- GET POSSIBLE YARDS 
                                Keşfedilmemiş veya dock yapamayacağımız istasyonları kesinlikle burda istemiyoruz
                            -->
                            <debug_to_file text="'    *** Collecting Shipyards..'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                            <run_actions ref="Get_ActiveStations" result="$Yards" >
                                <param name="addUnknown" value="false" />
                                <param name="addEnemy" value="false" />
                                <param name="debugchance" value="0" />
                            </run_actions>
                            <run_actions ref="Update_BlacklistStations" >
                                <param name="sendIt" value="true" />
                            </run_actions>

                            <do_for_each name="$yard" in="$Yards" reverse="true">
                                <do_if value="Main.$blacklist_stations.indexof.{$yard} > 0">
                                    <remove_from_list name="$Yards" exact="$yard" />
                                    <continue />
                                </do_if>
                                <do_if value="($yard.trueowner == faction.player) and (not global.$upbRF_DATA.$Editing.$UsePlayerYards)">
                                    <remove_from_list name="$Yards" exact="$yard" />
                                    <continue />
                                </do_if>
                                <do_if value="($yard.trueowner != faction.player) and (not global.$upbRF_DATA.$Editing.$UseNPCYards)">
                                    <remove_from_list name="$Yards" exact="$yard" />
                                    <continue />
                                </do_if>
                            </do_for_each>
                            
                            <include_actions ref="Let_failcasesOptions" />

                            <set_value name="$testchance" exact="0"/>
                            <debug_text text="'CHECK CRITERIAS RFM_%s_( %s ) %s'.[$RFMKey, $ShipIDX, $Ship_Name]" chance="$testchance"/>

                            <!-- CHECK CRITERIAS-->
                            <do_if value="$Yards.count gt 0 ">
                                <!--checkcase [shipyard, buildclass, buildmacro, sectorisknown, relationdockge, shiptrader, licences, software, equipment, selectbest, price ]
                                    -->
                                <do_for_each name="$TestYard" in="$Yards" counter="$i" reverse="true">

                                    <debug_to_file text="'  %s/%s Checking %s %s &lt;%s&gt;  passingcriterias %s'.[$i, $Yards.count, $TestYard.knownname, $TestYard.idcode, $TestYard, $passingcriterias]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    <debug_text text="'  %s/%s Checking %s %s &lt;%s&gt;  passingcriterias %s'.[$i, $Yards.count, $TestYard.knownname, $TestYard.idcode, $TestYard, $passingcriterias]" chance="$testchance"/>

                                    <!--Kontrollerin sırasını burda ayarlıyoruz 
                                        daha sonra sonuçları analiz ederken en son hata kaydına bakacağız
                                    -->
                                    <!-- check Sector isKnown -->
                                    <do_if value="not $passingcriterias.indexof.{'sectorisknown'}">
                                        <do_if value="not $TestYard.sector.isknown">
                                            <set_value name="$buildresponds.$sectorisknown" exact="table[ 
                                                $checkcase = $failcases.$sectorisknown.$id, 
                                                $unknown = $TestYard, 
                                                $statusmsg = $failcases.$sectorisknown.$text
                                            ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt; Sector = %s %s %s'.[$failcases.$sectorisknown.$name, $TestYard.knownname, $TestYard.idcode, $TestYard, $TestYard.sector.name, $TestYard.sector.knownname, $TestYard.sector]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <continue />
                                        </do_if>
                                        <debug_to_file text="'     Ok .Check Sector is known.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt; Sector = %s %s %s'.[$failcases.$sectorisknown.$name, $TestYard.knownname, $TestYard.idcode, $TestYard, $TestYard.sector.name, $TestYard.sector.knownname, $TestYard.sector]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>

                                    <!-- check relationdockge -->
                                    <do_if value="not $passingcriterias.indexof.{'relationdockge'}">
                                        <do_if value="not $TestYard.hasrelation.dock.{faction.player}">
                                            <set_value name="$buildresponds.$relationdockge" exact="table[ 
                                                $checkcase = $failcases.$relationdockge.$id, 
                                                $faction = $TestYard.trueowner,
                                                $statusmsg = $failcases.$relationdockge.$text
                                            ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$relationdockge.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <continue />
                                        </do_if>
                                        <debug_to_file text="'     Ok .Check Relation Dock To Player.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$relationdockge.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>

                                    <!-- check shiptrader -->
                                    <do_if value="not $passingcriterias.indexof.{'shiptrader'}">
                                        <do_if value="not $TestYard.shiptrader.exists">
                                            <set_value name="$buildresponds.$shiptrader" exact="table[ 
                                                $checkcase = $failcases.$shiptrader.$id, 
                                                $yard = $TestYard, 
                                                $statusmsg = $failcases.$shiptrader.$text 
                                            ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$shiptrader.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <continue />
                                        </do_if>
                                        <debug_to_file text="'     Ok .Check shiptader.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$shiptrader.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>

                                    <!-- check buildclass  -->
                                    <do_if value="not $passingcriterias.indexof.{'buildclass'}">
                                        <do_for_each name="$Processor" in="$TestYard.buildprocessors">
                                            <do_if value="$Processor.canbuildclass.{$Ship_Macro.class} ">
                                                <set_value name="$canbuildclass" />
                                            </do_if>
                                        </do_for_each>
                                        <do_if value="not $canbuildclass?">
                                            <set_value name="$buildresponds.$buildclass" exact="table[ 
                                                $checkcase = $failcases.$buildclass.$id, 
                                                $class = $Ship_Macro.class,
                                                $statusmsg = $failcases.$buildclass.$text 
                                            ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$buildclass.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <continue />
                                        </do_if>
                                        <debug_to_file text="'     Ok .Check class.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <remove_value name="$canbuildclass" />
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$buildclass.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>
                                    
                                    <!-- Öncelikli olarak bu macro yu üretebilecek olan factionu belirlememiz gerekiyor -->
                                    <!-- check buildmacro  -->
                                    <do_if value="not $passingcriterias.indexof.{'buildmacro'}">
                                        <do_for_each name="$Processor" in="$TestYard.buildprocessors">
                                            <do_if value="$Processor.canbuildmacro.{$Ship_Macro}">
                                                <set_value name="$canbuildmacro" />
                                            </do_if>
                                        </do_for_each>
                                        <do_if value="not $canbuildmacro?">
                                            <set_value name="$buildresponds.$buildmacro" exact="table[ 
                                                $checkcase = $failcases.$buildmacro.$id, 
                                                $chassis = $Ship_Macro,
                                                $statusmsg = $failcases.$buildmacro.$text
                                            ]" />
                                            <remove_value name="$Yards.{$i}"/>
                                            <debug_to_file text="'        [remove] %s - %s %s &lt;%s&gt;'.[$failcases.$buildmacro.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <continue />
                                        </do_if>
                                        <debug_to_file text="'     Ok .Check macro.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <remove_value name="$canbuildmacro" />
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        [ pass ] %s - %s %s &lt;%s&gt;'.[$failcases.$buildmacro.$name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>
                                    
                                    <run_actions ref="Get_FactionWares_ByLicencedTable" result="$factionwaresbylicencedtable">
                                        <param name="faction" value="$TestYard.trueowner" />
                                        <param name="debugchance" value="0" />
                                    </run_actions>

                                    <!-- check ship licences  -->
                                    <do_if value="$Ship_Macro.class == class.ship_l or $Ship_Macro.class == class.ship_xl">
                                        <do_if value="not $passingcriterias.indexof.{'c_ship_licence'}">
                                            <set_value name="$licence" exact="$TestYard.trueowner.licence.capitalship" />
                                            <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$licence}.indexof.{$Ship_Macro.ware} ) and not faction.player.haslicence.{$licence.type}.{$TestYard.trueowner}">
                                                <set_value name="$buildresponds.$c_ship_licence" exact="table[ 
                                                    $checkcase = $failcases.$c_ship_licence.$id, 
                                                    $faction = $TestYard.trueowner,
                                                    $statusmsg = $failcases.$c_ship_licence.$text.[$licence.type , $licence.name] ]" />
                                                <remove_value name="$Yards.{$i}"/>
                                                <debug_to_file text="'        [remove] &lt;%s&gt;%s - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                <continue />
                                            </do_if>
                                        </do_if>
                                        <do_else>
                                            <debug_to_file text="'        [ pass ] &lt;%s&gt;%s - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        </do_else>
                                    </do_if>
                                    <do_else>
                                        <do_if value="not $passingcriterias.indexof.{'m_ship_licence'}">
                                            <set_value name="$licence" exact="$TestYard.trueowner.licence.militaryship" />
                                            <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$licence}.indexof.{$Ship_Macro.ware}) and not faction.player.haslicence.{$licence.type}.{$TestYard.trueowner}">
                                                <set_value name="$buildresponds.$m_ship_licence" exact="table[ 
                                                    $checkcase = $failcases.$m_ship_licence.$id, 
                                                    $faction = $TestYard.trueowner,
                                                    $statusmsg = $failcases.$m_ship_licence.$text.[$licence.type , $licence.name] ]" />
                                                <remove_value name="$Yards.{$i}"/>
                                                <debug_to_file text="'        [remove] .Check &lt;%s&gt; %s. - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                <continue />
                                            </do_if>
                                        </do_if>
                                        <do_else>
                                            <debug_to_file text="'        [ pass ] .Check &lt;%s&gt;%s. - %s %s &lt;%s&gt;'.[$licence.type , $licence.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        </do_else>
                                    </do_else>
                                    <debug_to_file text="'     Ok .Check Ship licence.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    
                                    <!-- check Equipment wares  -->
                                    <set_value name="$failedSoftWares" exact="[]" />
                                    <set_value name="$failedEquipments" exact="[]" />
                                    <set_value name="$resultwares" exact="table[]" />
                                    <set_value name="$allwares" exact="[]" />
                                    <do_for_each name="$ware" valuename="$amount" in="$Ship_WareTable">
                                        <!--equipmentlar pass edilecekse; 
                                            istasyonun bu gemiye en az 1 tane takabileceği engine olmalı 
                                        -->
                                        <set_value name="$resultwares.{$ware}" exact="$amount" />
                                        <append_to_list name="$allwares" exact="$ware" />
                                        <debug_text text="'   $ware = %s , transport tag = %s , tags = %s'.[$ware, $ware.transporttag, $ware.tags]" chance="0"/>
                                        <!-- result table[ $failed = true for failed or success false, $chkcase = return case for false status, $ware = ware ] -->
                                        <run_actions ref="CkeckShipyard_ForWare" result="$result">
                                            <param name="ware" value="$ware" />
                                            <param name="shipyard" value="$TestYard" />
                                            <param name="checkSoftware" value="false"/>
                                            <param name="checkEquipment" value="true" />
                                            <param name="DebugChance" value="$testchance" />
                                        </run_actions>                                        
                                        <do_if value="$result.$failed">
                                            <remove_value name="$resultwares.{$ware}" />
                                            <do_if value="$ware.hastag.equipment">
                                                <append_to_list name="$failedEquipments" exact="$ware" />
                                            </do_if>
                                            <do_else>
                                                <append_to_list name="$failedSoftWares" exact="$ware" />
                                            </do_else>
                                            <set_value name="$fail" />
                                            <debug_to_file text="'        [ fail ] .Check %s %s. - %s %s &lt;%s&gt;'.[$result.$chkcase, $result.$ware.id, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        </do_if>
                                        <do_else>
                                            <debug_to_file text="'          Ok. Shipyard for ware %s'.[$ware.name]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        </do_else>
                                    </do_for_each>
                                    
                                    <do_if value="$fail?">
                                        <remove_value name="$fail" />
                                        <do_if value="not $passingcriterias.indexof.{'equipment'}">
                                            <do_if value="$failedSoftWares.count > 0 or $failedEquipments.count > 0 ">
                                                <set_value name="$buildresponds.$equipment" exact="table[ 
                                                    $checkcase      = $failcases.$equipment.$id , 
                                                    $yard           = $TestYard, 
                                                    $softwares      = $failedSoftWares,
                                                    $equipmentwares = $failedEquipments,
                                                    $statusmsg      = $failcases.$equipment.$text
                                                ]" />
                                            </do_if>
                                            <remove_value name="$Yards.{$i}"/>
                                            <continue />
                                        </do_if>
                                    </do_if>
                                    <debug_to_file text="'     Ok .Check Softwares and Equipments.'.[]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                                    <!-- check Equipment Licence  -->
                                    <set_value name="$missinglicencedwares" exact="[]" />
                                    <do_for_each name="$ware" valuename="$amount" in="$Ship_WareTable">
                                        <do_if value="$ware.transporttag == tag.equipment">
                                            
                                            <do_if value="not $passingcriterias.indexof.{'m_equipment_licence'}">
                                                <set_value name="$m_licence" exact="$TestYard.trueowner.licence.militaryequipment" />
                                                <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$m_licence}.indexof.{$ware}) and not faction.player.haslicence.{$m_licence.type}.{$TestYard.trueowner}">
                                                    <append_to_list name="$missinglicencedwares" exact="table[ $ware = $ware.id , $licencetype = $m_licence.type ]" />
                                                    <set_value name="$buildresponds.$m_equipment_licence" exact="table[ 
                                                        $checkcase = $failcases.$m_equipment_licence.$id, 
                                                        $faction = $TestYard.trueowner,
                                                        $missinglicencedwares = $missinglicencedwares,
                                                        $statusmsg = $failcases.$m_equipment_licence.$text.['licence(s)'] ]" />
                                                    <set_value name="$fail" />
                                                    <debug_to_file text="'        [remove] .Check &lt;%s&gt;%s equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$m_licence.type , $m_licence.name, $ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                </do_if>
                                            </do_if>

                                            <do_if value="not $passingcriterias.indexof.{'c_equipment_licence'}">
                                                <set_value name="$c_licence" exact="$TestYard.trueowner.licence.capitalequipment" />
                                                <do_if value="($factionwaresbylicencedtable.{$licence}? and $factionwaresbylicencedtable.{$c_licence}.indexof.{$ware}) and not faction.player.haslicence.{$c_licence.type}.{$TestYard.trueowner}">
                                                    <remove_value name="$c_licenced" />
                                                    <append_to_list name="$missinglicencedwares" exact="table[ $ware = $ware.id , $licencetype = $m_licence.type ]" />
                                                    <set_value name="$buildresponds.$c_equipment_licence" exact="table[ 
                                                        $checkcase = $failcases.$c_equipment_licence.$id, 
                                                        $faction = $TestYard.trueowner,
                                                        $missinglicencedwares = $missinglicencedwares,
                                                        $statusmsg = $failcases.$c_equipment_licence.$text.['licence(s)'] ]" />
                                                    <set_value name="$fail" />
                                                    <debug_to_file text="'        [remove] .Check &lt;%s&gt;%s equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$c_licence.type , $c_licence.name, $ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                </do_if>
                                            </do_if>

                                            <do_if value="not $fail?">
                                                <debug_to_file text="'        [ pass ] .Check licence equipment.&lt;%s&gt;. - %s %s &lt;%s&gt;'.[$ware.name, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            </do_if>

                                        </do_if>
                                    </do_for_each>

                                    <do_if value="$fail?">
                                        <remove_value name="$fail" />
                                        <remove_value name="$Yards.{$i}"/>
                                        <continue />
                                    </do_if>

                                    <!-- Başka kriter kalmadı, bundan sonra kalan istasyonlara göre best ve price onayı alacağız -->
                                    <debug_text text="'  OK %s  %s %s &lt;%s&gt;'.[$i, $TestYard.knownname, $TestYard.idcode, $TestYard]" chance="$testchance" />
                                    <debug_to_file text="'  OK %s  %s %s &lt;%s&gt;'.[$i, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                </do_for_each>

                                <!-- Select best yard and calculate price-->
                                <do_if value="$Yards.count gt 0">
                                    <!-- SELECT BESTYARD -->
                                    <include_actions ref="Select_BestYard" />

                                    <do_if value="@$Shipyard.exists">
                                        <debug_to_file text="'  Shipyard Select is OK. %s %s (%s) , Build Price Factor = %s'.[$Shipyard, $Shipyard.knownname, $Shipyard.idcode, $Shipyard.buildpricefactor]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <!-- is there any better way to figure out the price...? -->
                                        <set_value name="$Price" exact="0Cr"/>
                                        
                                        <do_if value="not $Shipyard.isplayerowned">
                                            <set_value name="$ItemPrice" exact="(($Shipyard.buyprice.{$Ship_Macro.ware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr"/>
                                            <debug_to_file text="'     Chassis  %s Cr'.[$ItemPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <set_value name="$Price" exact="$ItemPrice" operation="add"/>
                                            <do_for_each name="$Ware" valuename="$Count" in="$Ship_WareTable">
                                                <set_value name="$ItemPrice" exact="(($Shipyard.buyprice.{$Ware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr * $Count"/>
                                                <debug_to_file text="'     %sx %s is %s Cr'.[$Count, $Ware, $ItemPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                                <set_value name="$Price" exact="$ItemPrice" operation="add"/>
                                            </do_for_each>
                                            <set_value name="$crewcount" exact="$Ship_BulkCrew.{entityrole.service}.count + $Ship_BulkCrew.{entityrole.marine}.count" />
                                            <set_value name="$crewware" exact="ware.{'crew'}" />
                                            <set_value name="$minprice" exact="$crewware.minprice"/>
                                            <set_value name="$maxprice" exact="$crewware.maxprice"/>
                                            <set_value name="$workforceavailable" exact="( $Shipyard.workforce.amount - ($Shipyard.workforce.bonus * $Shipyard.workforce.amount)LF ) " />
                                            <set_value name="$workforceavailable" exact=" ($workforceavailable)i + ( ($workforceavailable - ($workforceavailable)i )f + 0.5 )i" />
                                            <set_value name="$st1" exact="($maxprice - $minprice)f * 0.01f" />
                                            <set_value name="$st2" exact="($workforceavailable)LF / ($Shipyard.workforce.capacity)LF " />
                                            <set_value name="$st3" exact="$st2 * $st1" />
                                            <set_value name="$st4" exact="( (($maxprice)f * 0.01f) - $st3)LF " />
                                            <set_value name="$st5" exact="$Shipyard.buildpricefactor * $st4 " />
                                            <set_value name="$st6" exact=" ($st5)i + ( ($st5 - ($st5)i )f + 0.5 )i" />
                                            <!-- x = 5 Cr  dendiğinde x = 500 değeri alıyor çünkü birim artık 500ct şeklinde
                                                <debug_text text="'$workforceavailable = %s ,  workforce.capacity = %s \n
                                                $minprice = %s [%s] , $maxprice = %s [%s] \n
                                                , st1 = %s , st2 = %s , $st3 = %s , $st4 = %s , $st5 = %s , $st6 = %s
                                                '.[$workforceavailable, $Shipyard.workforce.capacity, 
                                                $minprice, $minprice.formatted.default,
                                                $maxprice, $maxprice.formatted.default,
                                                $st1, $st2, $st3, $st4, $st5, $st6]" />
                                                <debug_text text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$crewcount, $crewware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" />
                                            -->
                                            <!-- 
                                                <set_value name="$ItemPrice" exact="(($Shipyard.buyprice.{$crewware})LF * ($Shipyard.buildpricefactor)LF * 0.01LF)Cr"/>
                                                <debug_text text="'1 CREW PRICE $ItemPrice = %s , min = %s , max = %s , buy = %s , sell = %s , buildpricefactor = %s'.[$ItemPrice, $crewware.minprice, $crewware.maxprice, $Shipyard.buyprice.{$crewware}, $Shipyard.sellprice.{$crewware}, $Shipyard.buildpricefactor]" />
                                                <debug_text text="'workforce.amount = %s , workforce.capacity = %s , workforce.bonus = %s , workforce.min = %s , workforce.optimal = %s '.[$Shipyard.workforce.amount, $Shipyard.workforce.capacity, $Shipyard.workforce.bonus, $Shipyard.workforce.min , $Shipyard.workforce.optimal ]" />
                                                <debug_text text="'workforce.available = %s'.[$workforceavailable  ]" />
                                            -->
                                            <set_value name="$EachPrice" exact="($st6)Cr"/>
                                            <set_value name="$ItemPrice" exact="$EachPrice * $crewcount "/>
                                            <debug_to_file text="'     %sx %s is %s Cr ( each price = %s Cr )'.[$crewcount, $crewware, $ItemPrice.formatted.default, $EachPrice.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                            <set_value name="$Price" exact="$ItemPrice" operation="add"/>
                                        </do_if>

                                        <set_value name="$maxallowedpricepership_ct" exact="(global.$upbRF_DATA.$Editing.$maxallowedpricepership)Cr" />
                                        <set_value name="$playermoneythreshold_ct" exact="(global.$upbRF_DATA.$Editing.$playermoneythreshold)Cr" />
                                        <set_value name="$playermoney" exact="faction.player.money" />
                                        
                                        <!-- 
                                        <debug_text text="'\n
                                            player money            = &lt;%s&gt;    &lt;%s&gt;                \n
                                            playermoneythreshold_ct = &lt;%s&gt;    &lt;%s&gt;                \n
                                            maxallowedpricepership_ct  = &lt;%s&gt;    &lt;%s&gt;                \n
                                            ship price              = &lt;%s&gt;    &lt;%s&gt;                \n
                                            player.money - $Price   = &lt;%s&gt;    &lt;%s&gt;                \n
                                            Price gt maxallowedpricepership = %s
                                        '.[
                                            player.money.formatted.default, player.money,
                                            $playermoneythreshold_ct.formatted.default, $playermoneythreshold_ct,
                                            $maxallowedpricepership_ct.formatted.default, $maxallowedpricepership_ct,
                                            $Price.formatted.default, $Price,
                                            ($playermoney - $Price).formatted.default, ($playermoney - $Price),
                                            if ($Price gt $maxallowedpricepership_ct) then 'Maliyet FAZLA' else 'maliyet UYGUN'
                                        ]" chance="0"/>
                                        -->
                                        <debug_to_file text="'    Total price for %s is %s Cr'.[$Ship_Name, $Price.formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                                        <set_value name="$buildresponds" exact="table[]" />
                                        <do_if value="$playermoney lt $Price">
                                            <set_value name="$buildresponds.$price" exact="table[ 
                                                $checkcase = $failcases.$price.$id, 
                                                $price = $Price, 
                                                $fundsmoney = $playermoney,
                                                $statusmsg = 'The calculated ship cost (%s Cr) exceeded the players available funds (%s Cr).'.[$Price.formatted.default, $playermoney.formatted.default]
                                                ]" />
                                        </do_if>
                                        <do_else>
                                            <do_if value="not $passingcriterias.indexof.{'price'}">
                                                <do_if value="$playermoney gt $playermoneythreshold_ct and ( ($playermoney - $Price) ge $playermoneythreshold_ct)" comment="CONSTRUCT SHIP ...">
                                                    <do_if value="($maxallowedpricepership_ct gt 0Cr) and ($Price gt $maxallowedpricepership_ct)">
                                                        <set_value name="$buildresponds.$price" exact="table[ 
                                                            $checkcase = $failcases.$price.$id, 
                                                            $price = $Price, 
                                                            $checkmoney = $maxallowedpricepership_ct,
                                                            $statusmsg = 'The calculated ship cost (%s Cr) exceeded the ship production allowed cost (%s Cr).'.[$Price.formatted.default, $maxallowedpricepership_ct.formatted.default]
                                                            ]" />
                                                    </do_if>
                                                </do_if>
                                                <do_else>
                                                    <do_if value="$playermoneythreshold_ct gt 0Cr">
                                                        <set_value name="$buildresponds.$price" exact="table[ 
                                                        $checkcase   = $failcases.$price.$id, 
                                                        $price       = $Price, 
                                                        $playermoney = $playermoney,
                                                        $checkmoney  = $playermoneythreshold_ct,
                                                        $statusmsg   = 'After the calculated ship fee (%s Cr) is deducted from the player\'s money, (%s Cr) the remaining amount is less than the set money threshold %s Cr.'.[$Price.formatted.default, ($playermoney - $Price).formatted.default, $playermoneythreshold_ct.formatted.default]
                                                        ]" />
                                                    </do_if>
                                                </do_else>
                                            </do_if>
                                        </do_else>
                                        
                                    </do_if>
                                    <do_else>
                                        <!-- Bestyard dan sonuç gelmedi -->
                                        <set_value name="$buildresponds.$selectbest" exact="table[ 
                                            $checkcase = $failcases.$selectbest.$id, 
                                            $objects = $Yards, 
                                            $statusmsg = $failcases.$selectbest.$text
                                        ]" />
                                        <debug_to_file text="'      Cant select a Best Shipyard in yards. %s'.[$Yards]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>
                                </do_if>
                            </do_if>
                            <do_else>
                                <!-- !!!! No have any compability Shipyard for construction-->
                                <set_value name="$buildresponds.$shipyard" exact="table[ 
                                    $checkcase = $failcases.$shipyard.$id, 
                                    $statusmsg = $failcases.$shipyard.$text 
                                ] " />
                            </do_else>
                            
                            <!-- DEBUG TEST RESPOND -->
                            <debug_text text="'$Yards.count = %s , $buildresponds RFM_%s_%s = '.[$Yards.count, $RFMKey, $ShipIDX]" chance="$testchance"/>
                            <run_actions ref="DebugPrintValue">
                                <param name="value" value="$buildresponds" />
                                <param name="recursiondepth" value="2" />
                                <param name="DebugChance" value="$testchance" />
                            </run_actions>
                            
                            <!-- SELECT LAST RESPOND -->
                            <do_if value="$buildresponds.keys.count > 0">
                                <!-- Başarısız çıkış, Üretim oluşamadı -->
                                <set_value name="$selectedid" exact="0" />
                                <set_value name="$selectedkey" exact="''"/>
                                <do_for_each name="$key" valuename="$value" in="$buildresponds" >
                                    <!-- <debug_text text="'key = %s , .id =  %s , selectedid = %s'.[$key, $value.$checkcase, $selectedid]" />-->
                                    <do_if value="$value.$checkcase > $selectedid">
                                        <set_value name="$selectedid" exact="$value.$checkcase" />
                                        <set_value name="$selectedkey" exact="$key"/>
                                        <!-- <debug_text text="' Saved selectedid = %s, $selectedkey = %s'.[$selectedid, $selectedkey]" />-->
                                    </do_if>
                                </do_for_each>
                                <set_value name="$respond" exact="$buildresponds.{$selectedkey}"/>
                                <set_value name="$finishStatus" exact="$respond.$statusmsg" />
                                <debug_text text="'= = = Selected (RFM_%s_%s) Last Entry Big Key = %s , message = %s '.[$RFMKey, $ShipIDX, $selectedkey, $finishStatus ]" chance="Main.$DeepDebug"/>
                                
                                <!-- Özel Durum hatalı Çıkışlar -->
                                <do_if value="$selectedid == $failcaseOrders.$price">
                                    <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4011}">
                                        <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                        <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                        <replace string="'$PRICE$'" with="$respond.$price"/>
                                        <replace string="'$MONEY$'" with="faction.player.money"/>
                                    </substitute_text>
                                    <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                                </do_if>
                                <do_elseif value="$selectedid == $failcaseOrders.$selectbest">
                                    <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4012}">
                                        <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                        <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                    </substitute_text>
                                    <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                                </do_elseif>
                                <!-- Standart Hatalı çıkışlar-->
                                <do_else>
                                    <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                        <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                        <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                        <replace string="'$STATUS$'" with="$finishStatus"/>
                                    </substitute_text>
                                    <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                                </do_else>
                                
                                <include_actions ref="Reset_RebuildShip" />
                            </do_if>
                            <!-- ADD BUILD TO CONSTRUCT SHIP-->
                            <do_else>
                                <!-- Başarılı çıkış, Üretim Başladı -->
                                <!-- we can't use the price element because it charges when the build is done, but refunds on cancel! add_build_to_construct_ship-->
                                <transfer_money from="faction.player" to="$Shipyard" amount="$Price" />
                                <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4010}">
                                    <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                    <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                    <replace string="'$SHIPYARD$'" with="$Shipyard.knownname + ' ' + $Shipyard.idcode"/>
                                    <replace string="'$SECTOR$'" with="$Shipyard.sector.knownname"/>
                                </substitute_text>
                                <write_to_logbook object="$Shipyard" category="upkeep" interaction="showonmap" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" money="if $Price gt 0Cr then ($Price * -1) else $Price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>

                                <do_if value="typeof $Ship_Loadout == datatype.loadout">
                                    <debug_text text="'    OK   loadout, macro = %s , loadout = %s , wares.list = %s , yard = %s %s'.[$Ship_Macro, $Ship_Loadout, $Ship_Loadout.wares.list, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DeepDebug" />
                                </do_if>
                                <do_else>
                                    <debug_text text="'MISMATCH loadout, macro = %s , wares.list = %s , yard = %s %s. Generating new loadout..'.[$Ship_Macro, @$Ship_Loadout.wares.list, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DebugChance" />
                                    <!-- Patlamış gemilerin loadout bilgisi uygunsuz ise otomatik bir loadout oluşturulacak -->

                                    <run_actions ref="Create_Loadout_AndSetTo" result="Main.$Loadouts.{$RFMKey}.{$ShipIDX}">
                                        <param name="ship"      value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$object"/>
                                        <param name="macro"     value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$macro" />
                                        <param name="wares"     value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tWare" />
                                        <param name="FleetRec"  value="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}"/>
                                    </run_actions>
                                    <!-- loadout yeniden oluşturuldu, tshipplan üretim bitince denetlenecek ve yeni loadout bilgisine göre alınacak-->
                                    <remove_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tShipPlan" />

                                    <set_value name="$Ship_Loadout" exact="Main.$Loadouts.{$RFMKey}.{$ShipIDX}"/>

                                    <debug_text text="' NEW loadout = %s , wares.list = %s'.[$Ship_Loadout, $Ship_Loadout.wares.list]" chance="Main.$DeepDebug" />
                                    <!-- FLEET RECORD TABLE -->
                                    <run_actions ref="Debug_FleetRecord">
                                        <param name="RFMKey" value="$RFMKey" />
                                    </run_actions>
                                </do_else>                            
                                
                                <add_build_to_construct_ship result="$Build" object="$Shipyard" macro="$Ship_Macro" faction="faction.player" loadout="$Ship_Loadout"/>
                                <debug_text text="' Added build &lt;%s;&gt; to construct ship. object = &lt;%s;&gt;%s %s'.[$Build, $Shipyard, $Shipyard.idcode, $Shipyard.knownname]" chance="Main.$DeepDebug" />

                                <set_value name="$shipyard" exact="@$Shipyard" />
                                <set_value name="$build" exact="@$Build" />
                                <set_value name="$isWaitingForRebuild" exact="false" />
                                <set_value name="$respondMsg" exact="''" />
                                <set_value name="$respond" exact="table[]" />
        
                                <run_actions ref="Set_RebuildCueTable">
                                    <param name="RFMKey"                value="$RFMKey" />
                                    <param name="ShipKey"               value="$ShipIDX" />
                                    <param name="cue"                   value="$cue" />
                                    <param name="shipyard"              value="$shipyard" />
                                    <param name="build"                 value="$build" />
                                    <param name="isWaitingForRebuild"   value="$isWaitingForRebuild" />
                                    <param name="respondMsg"            value="$respondMsg" />
                                    <param name="respond"               value="$respond" />
                                </run_actions>
                                
                                <run_actions ref="Check_FleetLockStatus">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
        
                                <!-- data change notification for OPEN LUA -->
                                <include_actions ref="Set_MDDataChanged" />

                                <debug_to_file text="'           RFM_%s_( %s ) add_build_to_construct_ship, $Build = %s - Age %s'.[$RFMKey, $ShipIDX, $Build, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'        ( %s ) add_build_to_construct_ship, $Build = %s - Age %s'.[$ShipIDX, $Build, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="' ( %s ) add_build_to_construct_ship, $Build = %s - Age %s, Money = %sCr, Sended logbook.upkeep Msg.. '.[$ShipIDX, $Build, player.age, (if $Price gt 0Cr then ($Price * -1) else $Price).formatted.default]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                            </do_else>

                            <!-- Code buraya vardığında Shipyard seçilmiş olmalı 
                                seçim oluşmadıysa cue reset ya da cancel edilmeli (BuildResolved için)-->
                            <!-- DEBUG -->
                            <set_value name="$pText" exact="'    ADDED RFM_%s_( %s ) %s to RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
                            <!-- REBUILD CUES -->
                            <run_actions ref="Debug_RebuildCue">
                                <param name="RFMKey" value="$RFMKey" />
                                <param name="inserttext" value="$pText" />
                            </run_actions>
                            <!-- ALL REBUILD CUES -->
                            <run_actions ref="Debug_AllRebuildCues"/>

                    </actions>
                    <cues>
                        <!-- istasyona construction emri verildikten sonra build oluşmamasının bir imkanı var mı? belki gecikebilir.. 
                            1sn sonra hala build oluşmamışsa build iptal emri verilmiş gibi davranacağız  
                        -->
                        <cue name="Build_Resolved_Fallback" checkinterval="1s">
                            <conditions>
                                <check_value value="not $Build.exists and $Shipyard.exists"/>
                            </conditions>
                            <actions>
                                <debug_to_file text="'- - - - ' + player.systemtime.{'%F-%X'} + '- Cue[%s] started -'.[this.name]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'    ( %s ) Not yet Build Exist. Forcing to Signalling cue(Build_Resolved) with no condidions check to destroyed ship &lt;%s %s&gt; for Cancelling cue...'.[$ShipIDX, $Ship_Name, $Ship_IdCode]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                <!-- Üretime alındıktan sonra shipyard patlayabilir, Player build cancel yapabilir vb.., conditionu es geçerek BuildResolvedı  çalıştır-->
                                <signal_cue cue="Build_Resolved" check="false"/>
                            </actions>
                        </cue>
                        
                        <cue name="BuildStarted">
                            <conditions>
                                <check_any>
                                    <event_player_build_started build="$Build" />
                                </check_any>
                            </conditions>
                            <actions>

                                <do_if value="@$oldShipIDX != null and @$oldShipIDX != @$ShipIDX">
                                    <debug_text text="'   A L E R T    $oldShipIDX = %s , $ShipIDX = %s'.[$oldShipIDX,$ShipIDX]" />
                                    <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                                </do_if>
        
                                <set_value name="$NewShip" exact="event.param.buildanchor" />
                                
                                <debug_text text="'PLAYEROWNED SHIPS BUILD STARTED : name = %s, object = %s, param(buildprocessor or ship) = %s, param2(constructionsquance or buildtask) = %s, param3(buildtask) = %s, $Build = %s'.[event.name, event.object, event.param, event.param2, @event.param3, $Build]" chance="Main.$ChangesOnFleetDebug"/>
                                <debug_text text="'RFM_%s_( %s ) $NewShip = &lt;%s&gt; %s %s'.[$RFMKey, $ShipIDX, @$NewShip, @$NewShip.knownname, @$NewShip.idcode]" chance="Main.$ChangesOnFleetDebug"/>
                                
                                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$object" exact="$NewShip"/>
                                <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$idcode" exact="$NewShip.idcode"/>

                                <run_actions ref="Check_FleetLockStatus">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                
                                <!-- data change notification for OPEN LUA -->
                                <include_actions ref="Set_MDDataChanged" />

                                <!--  DEBUG -->
                                <debug_to_file text="'    ( %s ) Build Started to RFM_%s_ $Build = %s - Age: %s'.[$ShipIDX, $RFMKey, $Build, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <!-- FLEET RECORD TABLE -->
                                <run_actions ref="Debug_FleetRecord">
                                    <param name="RFMKey" value="$RFMKey" />
                                </run_actions>
                                
                            </actions>
                        </cue>

                        <!-- build_finished , build_cancelled , object_destroyed -->
                        <cue name="Build_Resolved">
                            <conditions>
                                <check_any>
                                    <event_build_finished object="$Shipyard" build="$Build"/>
                                    <event_build_cancelled object="$Shipyard" build="$Build"/>
                                    <event_object_destroyed object="$Shipyard"/>
                                    <event_cue_signalled/>
                                </check_any>
                            </conditions>
                            <actions>
                                <do_if value="@$oldShipIDX != null and @$oldShipIDX != @$ShipIDX">
                                    <debug_text text="'   A L E R T    $oldShipIDX = %s , $ShipIDX = %s'.[$oldShipIDX,$ShipIDX]" />
                                    <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                                </do_if>
                                <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                                <debug_to_file text="'- ( %s ) &lt;%s&gt; %s - Cue[%s] Action Part I'.[$ShipIDX, event.name, player.age, this.name]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                                <do_if value="event.name == 'event_build_finished'">
                                    <set_value name="$finishStatus" exact="'build finished'" />
                                    <set_value name="$NewShip" exact="event.param.buildanchor"/>
                                    <do_if value="$NewShip.exists">
                                        <debug_text text="'   RFM_%s_%s  Build Finished.  %s %s&lt;%s&gt;'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" chance="Main.$DeepDebug"/>
                                        <set_object_name object="$NewShip" name="$Ship_Name"/>
                                        <debug_to_file text="'    ( %s ) Build Finished.  %s %s&lt;%s&gt;'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <debug_to_file text="'  ( %s ) Build Finished.  %s %s&lt;%s&gt;'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <set_value name="$finishStatus" exact="'Build Finished'" />
                                    </do_if>
                                </do_if>
                                <do_else>
                                    <set_value name="$finishStatus" exact="if event.name == 'event_object_destroyed' then 'the station was destroyed' else 'Construction build cancelled'" />
                                    <!-- refund price -->
                                    <transfer_money from="$Shipyard" to="faction.player" amount="$Price"/>
                                    <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4013}">
                                        <replace string="'$COMMANDER$'" with="'RFM_' + $RFMKey + '_' "/>
                                        <replace string="'$SHIP$'" with="$Ship_Name + ' ' + $Ship_IdCode + (if Main.$DebugChance == 100 then ' (' + $ShipIDX + ')' else '') "/>
                                        <replace string="'$STATUS$'" with="$finishStatus + ' ( \033R' + $lastErrMsg + '\033X )'"/>
                                    </substitute_text>
                                    <write_to_logbook category="upkeep" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" money="$Price" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>

                                    <!--event_object_destroyed olayını resetleyeceğiz. (rebuildcue tablo kaydı boşalacak ve yeniden uygun construct için aramaya girecek )
                                        event_build_cancelled olayını resetlemiyoruz. 
                                            çıkış yaparak parent cue yi tamamlıyoruz ve rebuild tablosunu siliyoruz böylece
                                            lua içinde LOST Ship göreceğiz
                                     -->
                                    <do_if value="event.name == 'event_object_destroyed'">
                                        <!-- Restart ediyoruz-->
                                        <include_actions ref="Reset_RebuildShip" />
                                    </do_if>
                                    <do_else>
                                        <!-- construc cancel edildi çıkış yapıyoruz -->
                                        <debug_text text="'RFM_%s_%s  Construct Build CANCELLED.  Build = %s , Shipyard = %s'.[$RFMKey, $ShipIDX, $Build, $Shipyard]" chance="Main.$DeepDebug"/>
                                        <remove_value name="$Build" />
                                        <remove_value name="$Shipyard" />

                                        <include_actions ref="StampFilesAndFinish" />
                                    </do_else>

                                </do_else>
                            </actions>
                            
                            <!-- delay to let the shipyard do stuff first (assign pilot, peoples and mostly) -->
                            <delay exact="1s" comment="COMPLETE AND EXITING"/>

                            <actions>
                                <set_value name="$RFMCue" exact="@Main.$RM_Fleets.{$RFMKey}.$cue"/>
                                <debug_to_file text="'- ( %s ) &lt;%s&gt; %s - Cue[%s] Action Part II      after 1s from Part I    Is new Ship Exist = %s'.[$ShipIDX, event.name, player.age, this.name, @$NewShip.exists]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <do_if value="@$NewShip.exists">
                                    <!-- transferring people didn't work and there's no way to get at the DB to generate any, so we'll just clone the pilot and set skills manually -->
                                    <debug_to_file text="'    ( %s ) Transfering People...'.[$ShipIDX]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    <!-- Pilot -->
                                    <destroy_object object="$NewShip.pilot" />
                                    <create_control_entity object="$NewShip" post="controlpost.aipilot" macro="$Ship_Pilot.$macro">
                                        <owner exact="faction.player"/>
                                    </create_control_entity>
                                    <set_skill type="skilltype.engineering" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.engineering}"/>
                                    <set_skill type="skilltype.morale" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.morale}"/>
                                    <set_skill type="skilltype.boarding" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.boarding}"/>
                                    <set_skill type="skilltype.management" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.management}"/>
                                    <set_skill type="skilltype.piloting" entity="$NewShip.pilot" exact="$Ship_Pilot.$skill.{skilltype.piloting}"/>

                                    <!-- Peoples-->
                                    <set_value name="$Roles" exact="[entityrole.service, entityrole.marine]"/>
                                    <do_all exact="$Roles.count" counter="$i">
                                        <do_for_each name="$Crew" in="$Ship_BulkCrew.{$Roles.{$i}}">
                                            <create_npc_template name="$NPC" object="$NewShip" role="$Roles.{$i}" macro="$Crew.$macro"/>
                                            <do_if value="global.$upbRF_DATA.$Editing.$personnelcloning">
                                                <set_value name="$skillEngineering" exact="$Crew.$skill.{skilltype.engineering}" />
                                                <set_value name="$skillMorale" exact="$Crew.$skill.{skilltype.morale}" />
                                                <set_value name="$skillBoarding" exact="$Crew.$skill.{skilltype.boarding}" />
                                                <set_value name="$skillManagement" exact="$Crew.$skill.{skilltype.management}" />
                                                <set_value name="$skillPiloting" exact="$Crew.$skill.{skilltype.piloting}" />
                                            </do_if>
                                            <do_else>
                                                <set_value name="$skillEngineering" exact="[1, 2, 3, 4, 5].random" />
                                                <set_value name="$skillMorale" exact="[1, 2, 3, 4, 5].random" />
                                                <set_value name="$skillBoarding" exact="[1, 2, 3, 4, 5].random" />
                                                <set_value name="$skillManagement" exact="[1, 2, 3, 4, 5].random" />
                                                <set_value name="$skillPiloting" exact="[1, 2, 3, 4, 5].random" />
                                            </do_else>
                                            <set_skill type="skilltype.engineering" object="$NewShip" template="$NPC" exact="$skillEngineering"/>
                                            <set_skill type="skilltype.morale" object="$NewShip" template="$NPC" exact="$skillMorale"/>
                                            <set_skill type="skilltype.boarding" object="$NewShip" template="$NPC" exact="$skillBoarding"/>
                                            <set_skill type="skilltype.management" object="$NewShip" template="$NPC" exact="$skillManagement"/>
                                            <set_skill type="skilltype.piloting" object="$NewShip" template="$NPC" exact="$skillPiloting"/>
                                        </do_for_each>
                                    </do_all>
                                    
                                    <do_if value="Main.$FleetRecords.{$RFMKey}.keys.list.indexof.{$ShipIDX}" comment="Filo kaydında mevcutsa bağla">
                                        <add_to_group groupname="$RFMCue.$Subordinates" object="$NewShip"/>
                                        <set_value name="$RFMCue.$fleetshipsByIdx.{$ShipIDX}" exact="$NewShip"/>
                                        <set_value name="$RFMCue.$fleetshipsByComp.{$NewShip}" exact="$ShipIDX"/>
                                        
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$object" exact="$NewShip"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$idcode" exact="$NewShip.idcode"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$destroyed" exact="false"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$destroyedtime" exact="null"/>
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildTryNum" exact="0" />
                                        <set_value name="Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$reBuildStartTime" exact="null"/>

                                        <!--  Add Remove olayları içinde içinde yazıldı
                                        <set_value name="$index" exact="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.indexof.{$ShipIDX}" />
                                        <do_if value="$index > 0">
                                            <remove_value name="Main.$RMFleets.{$RFMKey}.$destroyedShipKeys.{$index}" />
                                        </do_if>
                                        -->
                                        <do_if value="$ShipIDX == 1">
                                            <set_value name="Main.$RM_Fleets.{$RFMKey}.$commander.$object" exact="$NewShip"/>
                                        </do_if>

                                        <!-- patlamış gemilerin tShipPlan ve Individual kayıtları olmayabilir. üretimden çıkanı kontrol edelim -->
                                        <run_actions ref="Fix_Ship_tShipPlan" >
                                            <param name="RFMKey"        value="$RFMKey"     />
                                            <param name="ShipKey"       value="$ShipIDX"    />
                                            <param name="SendIt"        value="true"       />
                                        </run_actions>
                                        <!-- Gemiye ait Indivudual Kaydını Set edelim-->
                                        <do_if value="not player.entity.$IIStack?">
                                            <set_value name="player.entity.$IIStack" exact="[]"/>
                                        </do_if>
                                        <!-- luadan boşaltılan liste, yapı olarak md içinde table olarak algılanıyor-->
                                        <do_if value="typeof player.entity.$IIStack == datatype.table">
                                            <set_value name="player.entity.$IIStack" exact="[]"/>
                                        </do_if>

                                        <set_value name="$IndividualInstructions" exact="table[
                                            $controllable = $NewShip,
                                            $RFMKey = $RFMKey,
                                            $ShipKey = $ShipIDX,
                                            $tIndividualInstructions = Main.$FleetRecords.{$RFMKey}.{$ShipIDX}.$tIndividualInstructions,
                                            $isdebug = (if Main.$DeepDebug == 100 then true else false)
                                        ]" />
                                        <append_to_list name="player.entity.$IIStack" exact="$IndividualInstructions" />
                                        <raise_lua_event name="'Set_IndividualInstructions'" />

                                        <set_value name="player.entity.$RM_Fleets" exact="Main.$RM_Fleets" />
                                        <set_value name="player.entity.$FleetRecords" exact="Main.$FleetRecords" />

                                        <debug_to_file text="'    ( %s ) Check and Assign to RFM_%s_'.[$ShipIDX, $RFMKey]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <signal_cue_instantly cue="CheckAndAssignToFleet" param="[$RFMKey, $ShipIDX, $NewShip]" />


                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'    ( %s ) Fleet Kaydından çıkarılmış. oldShipIDX = %s'.[$ShipIDX, $oldShipIDX]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    </do_else>
                                </do_if>

                                <include_actions ref="StampFilesAndFinish" />
                                
                            </actions>
                        </cue>

                    </cues>
                </cue>

                <library name="Let_failcasesOptions">
                    <actions>
                        <!--buildresponds; build üretim işlemi boyunca oluşacak hata ile ilgili bilgiyi saklayacağız 
                            ordersdaki değerin büyüklüğü bilgilendirmek istediğimiz en son hatayı yakalamamızı sağlayacak
                            * (shipyarddestroyed, buildcanceled, buildfallback taranacak criterler arasında değil)
                            -->
                        <set_value name="$failcaseOrders" exact="global.$upbRF_DATA.$Editing.$failcaseOrders" />
                        <set_value name="$failcases" exact="global.$upbRF_DATA.$Editing.$failcases" />
                        <set_value name="$buildresponds" exact="table[]"/>
                        <set_value name="$respond" exact="table[]"/>
                        <set_value name="$respondMsg" exact="''" />
                    </actions>
                </library>

                <library name="Reset_RebuildShip">
                    <actions>

                        <debug_to_file text="' - - %s Resetting Cue(RebuildShip)... Sended Logbook.upkeep Msg '.[$finishStatus]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        <debug_to_file text="' - - %s Resetting Cue(RebuildShip)... Sended Logbook. Msg '.[$finishStatus]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        
                        <remove_value name="$Shipyard" />
                        <remove_value name="$Build" />

                        <set_value name="$shipyard" exact="@$Shipyard" />
                        <set_value name="$build" exact="@$Build" />
                        <set_value name="$isWaitingForRebuild" exact="true" />
                        <set_value name="$respondMsg" exact="$finishStatus" />

                        <run_actions ref="Set_RebuildCueTable">
                            <param name="RFMKey"                value="$RFMKey" />
                            <param name="ShipKey"               value="$ShipIDX" />
                            <param name="cue"                   value="$cue" />
                            <param name="shipyard"              value="$shipyard" />
                            <param name="build"                 value="$build" />
                            <param name="isWaitingForRebuild"   value="$isWaitingForRebuild" />
                            <param name="respondMsg"            value="$respondMsg" />
                            <param name="respond"               value="$respond" />
                        </run_actions>

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
    
                        <!-- data change notification for OPEN LUA -->
                        <include_actions ref="Set_MDDataChanged" />
                        
                        <reset_cue cue="RebuildShip"/>
                    </actions>
                </library>

                <library name="Get_PossiblePLAYERYards" >
                    <actions>
                        <!-- owner null ise player + tüm npcler, [] ise sadece tüm npcler,  ya da belli bir faction ya da liste verilebilir.-->
                        <run_actions ref="FindBuildStations" >
                            <param name="yards"                 value="$Yards" />
                            <param name="owner"                 value="faction.player"/>
                            <param name="buildclass"            value="$Ship_Macro.class"/>
                            <!-- <param name="buildmacro"            value="$Ship_Macro"/> -->
                            <param name="reachablefrom"         value="player.entity" />
                            <!-- <param name="relation_to_faction"   value="faction.player"/>-->
                        </run_actions>
                    </actions>
                </library>
                <library name="Get_PossibleNPCYards" >
                    <actions>
                        <!-- owner null ise player + tüm npcler, [] ise sadece tüm npcler,  ya da belli bir liste verilebilir.-->
                        <run_actions ref="FindBuildStations" >
                            <param name="yards"                 value="$Yards" />
                            <param name="owner"                 value="[]"/>
                            <param name="buildclass"            value="$Ship_Macro.class"/>
                            <!-- <param name="buildmacro"            value="$Ship_Macro"/> -->
                            <param name="reachablefrom"         value="player.entity" />
                            <!-- <param name="relation_to_faction"   value="faction.player"/> -->
                        </run_actions>
                    </actions>
                </library>

                <library name="Select_BestYard" >
                    <actions>
                        <!-- lower is better -->
                        <debug_to_file text="'  Select Lower is Better ...'" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        <set_value name="$BestRating" exact="100000"/>
                        
                        <do_for_each name="$TestYard" in="$Yards" counter="$iy">
                            <set_value name="$gateDistance" exact="Main.$RM_Fleets.{$RFMKey}.$sectorid.gatedistance.{$TestYard}" />
                            <set_value name="$buildprocessors" exact="$TestYard.buildprocessors.count" />
                            <set_value name="$inprogress" exact="$TestYard.builds.inprogress.count" />
                            <set_value name="$queued" exact="$TestYard.builds.queued.count" />
                            <set_value name="$free" exact="if ($buildprocessors - ($queued + $inprogress)) le 0 then 0 else ($buildprocessors - ($queued + $inprogress))" />

                            <debug_to_file text="'    %s- %s %s &lt;%s&gt; Checking rating..'.[$iy, $TestYard.knownname, $TestYard.idcode, $TestYard]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'
             Gate Distance     = %s                                               * gate distance will be assigned as rating value \n
             Build Processors  = %s  [ Queued = %s , Inprogress = %s , free = %s ]   * If there is no free processor, 100 will be added to the rating. \n
             Rating = %s
                            '.[
                            $gateDistance, $buildprocessors, $queued, $inprogress, $free, $gateDistance + (if $free == 0 then 100 else 0)
                            ]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>

                            <set_value name="$Rating" exact="$gateDistance"/> 
                            <do_if value="$free == 0">
                                <set_value name="$Rating" exact="100" operation="add"/>
                            </do_if>
                            <do_if value="$Rating lt $BestRating">
                                <set_value name="$Shipyard" exact="$TestYard"/>
                                <set_value name="$BestRating" exact="$Rating"/>
                            </do_if>
                            <debug_to_file text="'        * BestRating = %s'.[$BestRating]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                        </do_for_each>
                    </actions>
                </library>

                <library name="StampFilesAndFinish">
                    <actions>
                        <set_value name="$pText" exact="''" />
                        <!-- Filodan çıkarılmış bir geminin üretilmiş olması durumunu kontrol ederek kapatıcağız -->
                        <do_if value="@$oldShipIDX != null and @$oldShipIDX != @$ShipIDX">
                            <debug_text text="'   A L E R T    $oldShipIDX = %s  , $ShipIDX = %s (StampFilesAndFinish)'.[$oldShipIDX,$ShipIDX]" />
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                        </do_if>

                        <do_if value="@$NewShip.exists">
                            <do_if value="not Main.$FleetRecords.{$RFMKey}.keys.list.indexof.{$ShipIDX}" comment="Filo kaydında yok ">
                                <do_if value="$Ship_Commander != null">
                                    <do_if value="not $Ship_Commander.iswreck">
                                        <set_value name="$finishStatus" exact="'Removed from fleet registration. Connected to his commander.'" />
                                        <set_value name="$lastErrMsg" exact="''" />
                                        <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s (%s %s&lt;%s&gt;)'.[$oldShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $Ship_Commander.knownname, $Ship_Commander.idcode, $Ship_Commander]" />
                                        <create_order object="$NewShip" id="'AssignCommander'" name="$order">
                                            <param name="commander" value="$Ship_Commander"/>
                                            <param name="assignment" value="$Ship_Assignment"/>
                                            <param name="subordinategroup" value="$Ship_Subordinategroupid"/>
                                            <param name="setgroupassignment" value="true"/>
                                            <param name="cancelorders" value="false" />
                                        </create_order>
                                    </do_if>
                                    <do_else>
                                        <set_value name="$finishStatus" exact="'Removed from fleet registration. The Commander it\'s attached to is dead.'" />
                                        <set_value name="$lastErrMsg" exact="'This ship is waiting on the shipyard.'" />
                                        <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s (%s %s&lt;%s&gt;) %s : %s %s'.[$oldShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $Ship_Commander.knownname, $Ship_Commander.idcode, $Ship_Commander, $lastErrMsg, $Shipyard.name, $Shipyard.idcode]" />
                                    </do_else>
                                </do_if>
                                <do_else>
                                    <set_value name="$finishStatus" exact="'Removed from fleet registration. There is no Commander attached to it.'" />
                                    <set_value name="$lastErrMsg" exact="'This ship is waiting on the shipyard.'" />
                                    <set_value name="$rText" exact="'( -%s ) %s %s&lt;%s&gt; - %s  %s : %s %s'.[$oldShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, $finishStatus, $lastErrMsg, $Shipyard.name, $Shipyard.idcode]" />
                                </do_else>
                                <debug_to_file text="'RFM_%s_%s  Age: %s'.[$RFMKey, $rText, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'%s  Age: %s'.[$rText, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            </do_if>
                            <do_else>
                                <debug_to_file text="'RFM_%s_( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt; OldShip&lt;%s&gt;  Age: %s'.[$RFMKey, $ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, (if $Destroyed != null then $Destroyed else ''), player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                <debug_to_file text="'( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt; OldShip&lt;%s&gt;. Canceling Cue(AddConstructionShip ForFleet Handler)  Age: %s'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, (if $Destroyed != null then $Destroyed else ''), player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                <debug_to_file text="'( %s ) ..DONE.. NewShip = %s %s&lt;%s&gt; OldShip&lt;%s&gt;. Canceling Cue(AddConstructionShip ForFleet Handler)  Age: %s'.[$ShipIDX, $Ship_Name, $NewShip.idcode, $NewShip, (if $Destroyed != null then $Destroyed else ''), player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            </do_else>
                        </do_if>
                        <do_else comment="Burası, yalnızca reBuild sonuç çıkaramazsa oluşur. (rebuid cancelled or resolved feedback signalled)">
                            <debug_to_file text="'RFM_%s_( %s ) %s %s&lt;%s&gt; - %s (%s)  Age: %s'.[$RFMKey, $oldShipIDX, $Ship_Name, $Ship_IdCode, (if $Destroyed != null then $Destroyed else ''), $finishStatus, $lastErrMsg, player.age]" name="Main.$logTAG_Main" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                            <debug_to_file text="'  ( %s ) %s %s&lt;%s&gt; - %s (%s), Canceling Cue(AddConstructionShip ForFleet Handler)  Age: %s'.[$oldShipIDX, $Ship_Name, $Ship_IdCode, (if $Destroyed != null then $Destroyed else ''), $finishStatus, $lastErrMsg, player.age]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                            <debug_to_file text="'( %s ) %s %s&lt;%s&gt; - %s (%s), Canceling Cue(AddConstructionShip ForFleet Handler)  Age: %s'.[$oldShipIDX, $Ship_Name, $Ship_IdCode, (if $Destroyed != null then $Destroyed else ''), $finishStatus, $lastErrMsg, player.age]" name="$reBuild_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                        </do_else>

                        <!-- REBUILDCUE TABLE   -->
                        <!-- $ShipIDX == -1 olma durumu yalnızca üretilen gemi üretilirken filo kaydından çıkarılmışsa olur 
                                (RFM to RFM bağlantısında patlamış gemileri dikkate almıyorduk. RFM To RFM yazılırsa burası boşa çıkacak)
                                oldShipIDX ve ShipIDX bu durumda farklı olacaktır
                                bu cue içindeki $ShipIDX SpecRemove olayı içinden -1 olarak değiştirildi 
                        -->
                        <do_if value="$ShipIDX == -1">
                            <substitute_text text="$LogMsg" source="readtext.{Main.$tPage}.{4014}">
                                <replace string="'$STATUS$'" with="$finishStatus + ' ( \033R' + $lastErrMsg + '\033X )'"/>
                                <replace string="'$COMMANDER$'" with="if $Ship_Commander then $Ship_Commander.name + ' ' + $Ship_Commander.idcode else ''"/>
                                <replace string="'$SHIP$'" with="$NewShip.name + ' ' + $NewShip.idcode"/>
                                <replace string="'$SHIPYARD$'" with="$Shipyard.name + ' ' + $Shipyard.idcode"/>
                                <replace string="'$SECTOR$'" with="$NewShip.sector.knownname"/>
                            </substitute_text>
                            <write_to_logbook object="$NewShip" category="upkeep" interaction="showonmap" title="'\033' + Main.$normalColor + 'Restock Manager\033X'" text="$LogMsg" chance="if global.$upbRF_DATA.$Editing.$write_to_logbook then 100 else 0"/>
                            <debug_text text="'   A L E R T    $oldShipIDX = %s , $ShipIDX = %s (%s %s), %s , %s'.[$oldShipIDX, $ShipIDX, $NewShip.name, $NewShip.idcode, $finishStatus, $lastErrMsg]" />
                            <play_sound object="player.entity" sound="'ui_notification_player_alert_04'"/>
                        </do_if>
                        <do_else>
                            <remove_value name="Main.$RebuildCues.{$RFMKey}.{$ShipIDX}" />
                            <set_value name="$pText" exact="'    REMOVED RFM_%s_( %s ) %s  from RebuildCues Table ,  Age: %s, %s'.[$RFMKey, $ShipIDX, $Ship_Name, player.age, player.systemtime.{'%F-%X'}]" />
                        </do_else>

                        <run_actions ref="Check_FleetLockStatus">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>

                        <!-- data change notification for OPEN LUA -->
                        <include_actions ref="Set_MDDataChanged" />

                        <!-- DEBUG -->

                        <!-- ALL REBUILD CUES -->
                        <run_actions ref="Debug_AllRebuildCues"/>
                        <!-- FLEET RECORD TABLE -->
                        <run_actions ref="Debug_FleetRecord">
                            <param name="RFMKey" value="$RFMKey" />
                        </run_actions>
                        <!-- REBUILD CUES -->
                        <run_actions ref="Debug_RebuildCue">
                            <param name="RFMKey" value="$RFMKey" />
                            <param name="inserttext" value="$pText" />
                        </run_actions>

                        <cancel_cue cue="AddConstructonShipForFleet"/>    

                    </actions>

                </library>

            </cues>
        </cue>




        <library name="Set_RebuildCueTable" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="cue" />
                <param name="shipyard"              default="null" />
                <param name="build"                 default="null" />
                <param name="isWaitingForRebuild"   default="false" />
                <param name="respondMsg"            default="''" />
                <param name="respond"               default="table[]" />
            </params>
            <actions>
                <set_value name="Main.$RebuildCues.{$RFMKey}.{$ShipKey}" exact="table[
                    $cue                    = $cue,
                    $shipyard               = table[ $object = $shipyard ],
                    $build                  = $build,
                    $isWaitingForRebuild    = $isWaitingForRebuild,
                    $respondMsg             = $respondMsg,
                    $respond                = $respond
                ]"/>
            </actions>
        </library>





        <!-- KULLANILMIYOR. bunun yerine Get_FactionWares_ByLicencedTable üzerinden sorgulanıyor
            belirtilen ware için belirtilen lisans olup olmadığını sorgular 
            ware = ware.xxx
            licence = $faction.licence.militaryship  yapısında
        -->
        <library name="CheckWare_For_Licence" purpose="run_actions">
            <params>
                <param name="ware" />
                <param name="licence" />
                <param name="debugchance" default="0" />
            </params>
            <actions>
                <set_value name="$islicenced" exact="false"/>

                <get_ware_definition result="$factionwares" >
                    <owner licence= "$licence"  />
                </get_ware_definition>

                <debug_text text="'faction = %s, licence = %s, checkware = ware.%s , wares = '.[$licence.faction.id, $licence.type, $ware.id]" chance="0"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$factionwares" />
                    <param name="recursiondepth" value="0" />
                    <param name="DebugChance" value="0" />
                </run_actions>
                
                <do_for_each name="$factionware" in="$factionwares">
                    <do_if value="$factionware == $ware">
                        <set_value name="$islicenced" exact="true"/>
                        <break />
                    </do_if>
                </do_for_each>
                <debug_text text="'This ware.&lt;%s&gt; %s a &lt;%s&gt;licence on this &lt;faction.%s&gt;.'.[$ware.name, if $islicenced then 'has' else 'does not have', $licence.type, $licence.faction.id]" chance="$debugchance"/>

                <return value="$islicenced"/>
            </actions>
        </library>

        <!--  
            istenilen factiona ait ware listesini licence bazında tablolayarak geri verir
            result factionwares table :
            {licence.<capitalequipment,Argon Federation>} = [
                [1]=ARG L Plasma Turret Mk1,
                [2]=ARG L Beam Turret Mk1,
                [3]=ARG L Dumbfire Turret Mk1,
                [4]=ARG Behemoth Main Battery,
                [5]=ARG L Tracking Turret Mk1
            ],
            ...
            {licence.<militaryship,Argon Federation>} = 
                [
                    [1]=Nomad Vanguard,
                    [2]=Eclipse Vanguard,
                    [3]=Quasar Vanguard,
                    [4]=Cerberus Vanguard,
                    [5]=Minotaur Vanguard
                ],
            ...
        -->
        <library name="Get_FactionWares_ByLicencedTable" purpose="run_actions">
            <params>
                <param name="faction" />
                <param name="isships" default="true"/>
                <param name="isequipments" default="true"/>
                <param name="ismodules" default="true" />
                <param name="debugchance" default="0"/>
            </params>
            <actions>
                <set_value name="$factionwares" exact="table[]"/>
                <do_for_each name="$licence" in="$faction.licences">
                    
                    <set_value name="$wares" />

                    <do_if value="$isships">
                        <get_ware_definition result="$wares" flags="ship" >
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>
                    
                    <do_if value="$isequipments">
                        <get_ware_definition result="$wares" flags="equipment" faction="$faction">
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>

                    <do_if value="$ismodules">
                        <get_ware_definition result="$wares" flags="module" >
                            <owner licence= "$licence"  />
                        </get_ware_definition>
                        <do_if value="$wares.count">
                            <set_value name="$factionwares.{$licence}"  exact="$wares"/>
                            <continue />
                        </do_if>
                    </do_if>

                    <do_if value="not $wares.count">
                        <set_value name="$factionwares.{$licence}" exact="[]"/>
                    </do_if>

                    <remove_value name="$wares" />
                </do_for_each>

                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$factionwares" />
                    <param name="recursiondepth" value="3" />
                    <param name="DebugChance" value="$debugchance" />
                </run_actions>

                <return value="$factionwares"/>
            </actions>
        </library>

        <!-- owner null ise player + tüm npcler, [] ise sadece tüm npcler,  ya da belli bir liste verilebilir.-->
        <library name="FindBuildStations" purpose="run_actions">
            <params>
                <param name="yards"                                 comment="yards değişkeni append modda çalışıyor"/>
                <param name="buildclass"                            comment="verilen class uygun sınırlama yapar, null atarnırsa tüm tür istasyonlar dahil olur"/>
                <param name="owner" default="null"                  comment="faction.player ya da diğer factionlar"/>
                <param name="buildmacro" default="null"             comment="macro idsi, blueprint owner macro sınırlaması yapar"/>
                <param name="reachablefrom" default="null"          comment="object, örn. player.entity konumundan güzergaha ulaşılabilir mi"/>
                <param name="relation_to_faction" default="null"    comment="faction, örn. faction.player için en az dock izni verenler"/>
            </params>
            <actions>
                <do_if value="$owner == null or $owner == []">
                    <do_if value="$owner == null">
                        <set_value name="$all"  />
                    </do_if>
                    <set_value name="$owner" exact="[]" />
                    <!-- $faction.iseconomic and  -->
                    <do_for_each name="$faction" in="lookup.faction.list">
                        <do_if value="(($faction.isactive and $faction != faction.player) or $faction == @faction.yaki) or $all?">
                            <append_to_list name="$owner" exact="$faction"/>
                        </do_if>
                    </do_for_each>
                </do_if>
                <!-- DİKKAT: 
                    find_station_by_true_owner kullanamayacağız çünkü faction zorunlu parametresi sadece 1 faction istiyor. liste gönderemiyoruz
                 -->
                    
                <do_if value="$reachablefrom == null or $buildmacro == null or $relation_to_faction == null " comment=" x x x">
                    <do_if value="$reachablefrom != null " comment=" 1 x x ">
                        <do_if value="$buildmacro != null and $relation_to_faction == null" comment=" _ 1 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$buildmacro == null and $relation_to_faction != null" comment="_ 0 1">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="_ 0 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                            </find_station>    
                        </do_else>
                    </do_if>
                    <do_elseif value="$buildmacro != null " comment="x 1 x">
                        <do_if value="$reachablefrom != null and $relation_to_faction == null" comment="1 _ 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$reachablefrom == null and $relation_to_faction != null" comment="0 _ 1">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match canbuildclass="$buildclass" />
                                <match canbuildmacro="$buildmacro"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="0 _ 0">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match_any canbuildclass="$buildclass" canbuildmacro="$buildmacro"/>
                            </find_station>    
                        </do_else>
                    </do_elseif>
                    <do_elseif value="$relation_to_faction != null " comment="x x 1">
                        <do_if value="$reachablefrom != null and $buildmacro == null" comment="1 0 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_if>
                        <do_elseif value="$reachablefrom == null and $buildmacro != null" comment="0 1 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match_any canbuildclass="$buildclass" canbuildmacro="$buildmacro"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_elseif>
                        <do_else comment="0 0 _">
                            <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                                <match canbuildclass="$buildclass"/>
                                <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                            </find_station>    
                        </do_else>
                    </do_elseif>
                    <do_else comment="0 0 0">
                        <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" append="true">
                            <match canbuildclass="$buildclass"/>
                        </find_station>    
                    </do_else>
                </do_if>
                <do_else comment="1 1 1">
                    <find_station owner="$owner" space="player.galaxy" name="$yards" multiple="true" reachablefrom="$reachablefrom" append="true">
                        <match canbuildclass="$buildclass" />
                        <match canbuildmacro="$buildmacro"/>
                        <match_relation_to faction="$relation_to_faction" relation="dock" comparison="ge"/>
                    </find_station>
                </do_else>
                
                <remove_value name="$all" />
            </actions>
        </library>

        <!-- Gemi ile Shipyard arasındaki Software ve Equipment Testi-->
        <!-- result table[ $status = sucsess for true or failed false, $chkcase = return case for false status, $errmsg = error message for false, $ware = ware ] -->
        <library name="CkeckShipyard_ForWare" purpose="run_actions">
            <params>
                <param name="ware" />
                <param name="shipyard" />
                <param name="checkSoftware" default="false"/>
                <param name="checkEquipment" default="true" />
                <param name="DebugChance" default="0" />
            </params>
            <actions>
                
                <set_value name="$chkS" exact="$ware.tags.indexof.{tag.software} > 0"  comment="ware software olmayacak"/>
                <set_value name="$chkE" exact="$ware.tags.indexof.{tag.equipment} > 0" comment="ware equipment waresi olacak"/>
                <set_value name="$chkYard" exact="$shipyard.buildequipment.wares.{$ware}.exists" comment="shipyardın build edebildiği ware listesinde bu ware var mı"/>
                <!--Kontrol etmeyeceğimiz değer için, SKIP  , onay aldı     [ false, '', '', $ware ]
                    Kontrolden geçen değer için     , SKIP  , onay aldı     [ false, '', '', $ware ]
                    Kontrolden geçemeyen değer için , ERROR , onay alamadı  [ true, 'check case', $errmsg, $ware ]
                -->
                <set_value name="$failed" exact="false" />
                <set_value name="$chkcase" exact="''"/>

                <do_if value="$chkS">
                    <set_value name="$chkcase" exact="'software'"/>
                    <do_if value="$checkSoftware">
                        <do_if value="$chkYard">
                            <debug_text text="'OK .%s %s bu %s ile çalışabiliyor.  (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                            <set_value name="$failed" exact="true" />
                            <debug_text text="'ERROR .%s %s için geçerli bir %s değil. (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'SKIP .%s Kontrol Edilmeyecek.  (%s)'.[$chkcase, $ware.name]" chance="$DebugChance"/>
                    </do_else>
                </do_if>
                <do_elseif value="$chkE">
                    <set_value name="$chkcase" exact="'equipment'"/>
                    <!-- equipmentlarda engine pass kriterine takılmayacak, yoksa gemi üretilince istasyondan ayrılamaz -->
                    <do_if value="$checkEquipment or $ware.hastag.engine">
                        <do_if value="$chkYard">
                            <debug_text text="'OK .%s %s bu %s ile çalışabiliyor.  (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_if>
                        <do_else>
                            <set_value name="$failed" exact="true" />
                            <debug_text text="'ERROR .%s %s için geçerli bir %s değil. (%s)'.[$shipyard.knownname, $shipyard.idcode, $chkcase, $ware.name]" chance="$DebugChance"/>
                        </do_else>
                    </do_if>
                    <do_else>
                        <debug_text text="'SKIP .%s Kontrol Edilmeyecek.  (%s)'.[$chkcase, $ware.name]" chance="$DebugChance"/>
                    </do_else>
                </do_elseif>
                <do_else>
                    <!-- YAPILACAK : 
                        Yeni oyun açıp ters mühendislikle öğrenmediğimiz şemalar varken bu satıra uğrayacak bir ware var mı görmemiz gerekiyor 
                        * Şimdilik SKIP durumu yapacağız
                    -->
                    <set_value name="$chkcase" exact="@$ware.tag"/>
                    <debug_text text="'ERROR .Bilinmeyen Tag. (%s)'.[$ware.name]" />
                </do_else>

                <set_value name="$result" exact="table[ $failed = $failed, $chkcase = $chkcase, $ware = $ware ]" />
                <return value="$result"/>
            </actions>
        </library>

        <!-- all buildable stations in galaxy
            IN : 
                addUnknown  (false)     oyuncunun bilmediği istasyonlar dahil olacak mı
                addEnemy    (false)     oyuncuya düşman istasyonlar da eklensin mi
                debugchance (0)
            OUT: active stations list
        -->
        <library name="Get_ActiveStations" purpose="run_actions">
            <params>
                <param name="addUnknown"       default="false" />
                <param name="addEnemy"      default="false"/>
                <param name="debugchance"   default="0" />
            </params>
            <actions>
                <!-- , class.ship_l, class.ship_xl class.ship_s, class.ship_m -->
                <set_value name="$tyards" exact="[]"/>
                
                <set_value name="$classes" exact="[class.ship_s, class.ship_m, class.ship_l, class.ship_xl]" />
                <do_for_each name="$class" in="$classes">
                    <run_actions ref="FindBuildStations">
                        <param name="yards"                 value="$tyards" />
                        <param name="buildclass"            value="$class"/>
                        <param name="reachablefrom"         value="player.entity" />
                        <param name="relation_to_faction"   value="if $addEnemy then null else faction.player" />
                    </run_actions>
                </do_for_each>
                
                <!-- class taramasını s ve m için 2 kere yapmış olduk. bu yüzden aynı istasyon 2 kere listeye alınmış olabilir. 
                    aynı durum l ve xl için de geçerli. Listedeki aynı elemanları çıkaracağız
                -->
                <debug_text text="'=================================================================='.[]" chance="$debugchance"/>
                <set_value name="$yards" exact="[]" />
                <set_value name="$cnt" exact="0"  />
                <do_for_each name="$tyard" in="$tyards" counter="$iy">
                    <do_if value="$yards.indexof.{$tyard} == 0">
                        <do_if value="$addUnknown">
                            <set_value name="$cnt" exact="1" operation="add" />
                            <debug_text text="'%s - %s %s === %s %s'.[$cnt, $tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                            <append_to_list name="$yards" exact="$tyard"/>
                        </do_if>
                        <do_else>
                            <do_if value="$tyard.isknown">
                                <set_value name="$cnt" exact="1" operation="add" />
                                <debug_text text="'%s - %s %s === %s %s'.[$cnt, $tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                                <append_to_list name="$yards" exact="$tyard"/>
                            </do_if>
                            <do_else>
                                <debug_text text="'   SKIPPING - %s %s === %s %s'.[$tyard.idcode, $tyard.knownname, (if $tyard.isknown then '' else 'UNKNOWN'), $tyard.sector.knownname]" chance="$debugchance"/>
                            </do_else>
                        </do_else>
                    </do_if>
                </do_for_each>
                <debug_text text="'=================================================================='.[]" chance="$debugchance"/>

                <return value="$yards"/>
            </actions>
        </library>





        <!-- IN : RFMKey  a value for fleet Key-->
        <!--    : ShipKey  a value for Ship Key-->
        <!--    : NewShip  an object for Assign -->
        <cue name="CheckAndAssignToFleet" instantiate="true" namespace="this">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <set_value name="$RFMKey" exact="event.param.{1}" />
                <set_value name="$ShipKey" exact="event.param.{2}" />
                <set_value name="$NewShip" exact="event.param.{3}" />

                <include_actions ref="Let_RFM_LogFileNames" />

                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue"/>

                <set_value name="$FComp" exact="$RFMCue.$fleetshipsByComp.clone"/>
                <set_value name="$FIndx" exact="$RFMCue.$fleetshipsByIdx.clone"/>
                <set_value name="$FRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>

                <debug_to_file text="'Checking Assignment .......... ( %s ) NewShip = &lt;%s&gt; %s %s , RFM.Commander = ( %s ) &lt;%s&gt; %s %s (%s)  Age: %s
                '.[$ShipKey, $NewShip, $NewShip.knownname, $NewShip.idcode, 
                if @$FComp.{$RFMCue.$PromotedCommander} != null then $FComp.{$RFMCue.$PromotedCommander} else 'dead',
                $RFMCue.$PromotedCommander, 
                if $RFMCue.$RMCommanderName == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.knownname 
                    else ''
                else $RFMCue.$RMCommanderName,
                if $RFMCue.$RMCommanderIdCode == '' then 
                    if @$RFMCue.$PromotedCommander != null then
                        $RFMCue.$PromotedCommander.idcode 
                    else ''
                else $RFMCue.$RMCommanderIdCode,
                if $RFMCue.$PromotedCommander != null then $RFMCue.$PromotedCommander.sector.knownname else '',
                player.age
                ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                <do_if value="$ShipKey == 1" comment="RFM nin Gerçek Commanderı Üretildi">
                    <debug_to_file text="'      &quot;RFM Real Commander (1) Promote edildi...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <do_if value="$RFMCue.$PromotedCommander == null">
                    <!-- destroyedShipKeys den ekleme/silme işi subordinate add/remove olayları içinde yazıldı
                        filo boş olduğundan add olayı çalışmayacak, burda silme işini yapıyoruz -->
                        <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                    </do_if>
                    <set_value name="$isPromote" exact="true" />
                </do_if>
                <do_elseif value="$RFMCue.$PromotedCommander == null" comment="Fleet Boş">
                    <debug_to_file text="'      &quot;Fleet Boş. Üretilen Gemi Promote Commander edildi...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <!-- destroyedShipKeys den ekleme/silme işi subordinate add/remove olayları içinde yazıldı
                        filo boş olduğundan add olayı çalışmayacak, burda silme işini yapıyoruz -->
                    <remove_from_list name="Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys" exact="$ShipKey" />
                    <set_value name="$isPromote" exact="true" />
                </do_elseif>
                <do_elseif value="$FRec.{$FComp.{$RFMCue.$PromotedCommander}}.$commanderidx == $FComp.{$NewShip}" comment="Üretilen gemi filo komutanının commanderi">
                    <debug_to_file text="'      &quot;Üretilen Gemi, şu anki filo commanderinin Commanderi olduğundan üretilen gemi Promote Commander edilecek...&quot;'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <set_value name="$isPromote" exact="true" />
                </do_elseif>

                <do_if value="$isPromote?">
                    <debug_to_file text="'  ( %s ) PROMOTED TopLevelCommander &lt;%s&gt; %s %s (%s)'.[$ShipKey, $NewShip, $NewShip.name, $NewShip.idcode, $NewShip.sector.knownname]" name="$Command_logF" directory="Main.$logDIR" chance="Main.$DebugChance" />

                    <run_actions ref="PromoteToCommander">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="Commander" value="$NewShip" />
                        <param name="oldCommander" value="$RFMCue.$PromotedCommander" />
                    </run_actions>
                    <set_value name="$RFMCue.$RMCommander" exact="$NewShip" />
                    
                </do_if>

                <debug_to_file text="'      Filo Commanderının altındaki gemilerin bağlantıları kontrol ediliyor...'.[]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                <do_for_each name="$iCnt" in="$FIndx.keys.list">
                    <do_if value="$FComp.{$RFMCue.$PromotedCommander} != $iCnt" comment="RFM Commander dışındaki gemileri kontrol et" >
                        <set_value name="$aNewShip" exact="@$FIndx.{$iCnt}"/>
                        <!-- construction altındaysa idx lere eklenmiştir ancak henüz oprational bir gemi değildir -->
                        <do_if value="@$aNewShip.state == componentstate.operational">
                            <set_value name="$IsAssign" exact="true"/>
                            <set_value name="$tComIdx" exact="$FRec.{$iCnt}.$commanderidx"/>
                            <set_value name="$tCom" exact="@$FIndx.{$tComIdx}"/>
                            <set_value name="$IsAliveCom" exact="if ($tCom == null) then false else true "/>
    
                            <set_value name="$aAssignment" exact="$FRec.{$iCnt}.$assignment"/>
                            <set_value name="$aSubordinategroupid" exact="$FRec.{$iCnt}.$subordinategroupid"/>
                            
                            <run_actions ref="GetNameSubordinateGroupId" result="$recGroupName" chance="Main.$DeepDebug">
                                <param name="subordinategroupid" value="$FRec.{$iCnt}.$subordinategroupid" />
                            </run_actions>
                            <run_actions ref="GetNameSubordinateGroupId" result="$nowGroupName" chance="Main.$DeepDebug">
                                <param name="subordinategroupid" value="$aNewShip.subordinategroupid" />
                            </run_actions>
    
                            <do_if value="$IsAliveCom" comment="ship.commander yaşıyorsa " >
                                <do_if value="$FIndx.{$iCnt}.commander != $tCom" comment="başka ship.commander a bağlıysa " >
                                    <debug_to_file text="'        &quot;%s %s. Kendi commanderına bağlanacak...&quot;'.[
                                    $iCnt, if $FIndx.{$iCnt}.commander == null then 'Commandersiz' else 'Başka bir Commandera Bağlı',
                                    ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                    <set_value name="$aCommander" exact="$tCom"/>
                                </do_if>
                                <do_else comment="zaten olması gereken commandera bağlı. pass geç">
                                    <debug_to_file text="'        &quot;%s Olması gereken commandera bağlı. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    <set_value name="$aCommander" exact="null"/>
                                    <set_value name="$IsAssign" exact="false"/>
                                </do_else>
                            </do_if>
                            <do_else comment="ship.commanderi ölü ise RM_Commandera bağla">
                                <do_if value="$FIndx.keys.count == 1">
                                    <debug_to_file text="'        &quot;%s Commanderı ölü ve Kendisi Promote Filo Commander. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                    <set_value name="$aCommander" exact="null"/>
                                    <set_value name="$IsAssign" exact="false"/>
                                </do_if>
                                <do_else>
                                    <do_if value="$FIndx.{$iCnt}.commander != $RFMCue.$PromotedCommander">
                                        <debug_to_file text="'        &quot;%s Commanderi ölü ancak Filo commanderine bağlı değil. Filo Commanderine bağlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                                        <set_value name="$aCommander" exact="$RFMCue.$PromotedCommander" />
                                    </do_if>
                                    <do_else>
                                        <debug_to_file text="'        &quot;%s Commanderı ölü ve Filo commanderine zaten bağlı. Atlanacak...&quot;'.[$iCnt]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
                                        <set_value name="$aCommander" exact="null"/>
                                        <set_value name="$IsAssign" exact="false"/>
                                    </do_else>
                                </do_else>
                            </do_else>
    
                            <debug_to_file text="'
                            %s - &lt;%s&gt; %s %s \n
                                Rec.CommanderIdx ( %s ) &lt;%s&gt; \n
                                  Şu anki Bağlı Commander %s \n
                                    Rec(subordinategroup %s &lt;%s&gt;, assignment &lt;%s&gt;) \n
                                    Now(subordinategroup %s &lt;%s&gt;, assignment &lt;%s&gt;) \n
                                %s %s &lt;%s&gt;
                            '.[
                            $iCnt, $aNewShip, $aNewShip.knownname, $aNewShip.idcode,
                            $tComIdx, if $IsAliveCom then $tCom else 'ÖLÜ', 
                            if not $FIndx.{$iCnt}.commander then 'YOK' else '( ' + @$FComp.{$FIndx.{$iCnt}.commander} + ' ) &lt;' + $FIndx.{$iCnt}.commander + '&gt;',
                            $recGroupName, $aSubordinategroupid, $aAssignment,
                            $nowGroupName, $aNewShip.subordinategroupid, $aNewShip.assignment,
                            if $IsAssign then 'BAĞLA  aCommander ' else 'ATLA',
                            if $IsAssign then $FComp.{$aCommander} else '', 
                            if $IsAssign then $aCommander else ''
                            ]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DeepDebug"/>
    
                        </do_if>

                        <do_if value="$IsAssign">
                            <debug_text text="'(&lt;%s&gt;%s %s) .order.state:&lt;%s&gt; .orders %s'.[$aNewShip, $aNewShip.knownname, $aNewShip.idcode, $aNewShip.order.state, $aNewShip.orders]"  chance="Main.$ChangesOnFleetDebug"/>
                            <do_all exact="$aNewShip.orders.count" counter="$d">
                                <debug_text text="'  %1: %2 (%3) (state:%s)'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d}, $aNewShip.orders.{$d}.state]"  chance="Main.$ChangesOnFleetDebug"/>
                            </do_all>
                            <create_order object="$aNewShip" id="'AssignCommander'" name="$order">
                                <param name="commander" value="$aCommander"/>
                                <param name="assignment" value="$aAssignment"/>
                                <param name="subordinategroup" value="$aSubordinategroupid"/>
                                <param name="setgroupassignment" value="true"/>
                                <param name="cancelorders" value="false" />
                            </create_order>
                            <debug_text text="'  created AssignOrder : %s %s'.[$order, $order.id]"  chance="Main.$ChangesOnFleetDebug"/>
                            <move_order order="$order" newindex="1" result="$movesuccess"/>
                            <debug_text text="'  Move to top order %s'.[if $movesuccess then 'success' else 'failed']"  chance="Main.$ChangesOnFleetDebug"/>
                            <do_if value="$movesuccess">
                                <debug_text text="'    New order queue list:'"  chance="Main.$ChangesOnFleetDebug"/>
                                <do_all exact="$aNewShip.orders.count" counter="$d">
                                    <debug_text text="'      %1: %2 (%3) (state:%s)'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d}, $aNewShip.orders.{$d}.state]"  chance="Main.$ChangesOnFleetDebug"/>
                                </do_all>
                                <debug_text text="'  ready to process order'.[]"  chance="Main.$ChangesOnFleetDebug"/>
                            </do_if>
                            <do_else>
                                <debug_text text="'  Failed to move order %1'.[$order]"  chance="Main.$ChangesOnFleetDebug"/>
                                <do_all exact="$aNewShip.orders.count" counter="$d">
                                    <debug_text text="'    %1: %2 (%3) state(%s)'.[$d, $aNewShip.orders.{$d}.id, $aNewShip.orders.{$d}, $aNewShip.orders.{$d}.state]"  chance="Main.$ChangesOnFleetDebug"/>
                                </do_all>
                            </do_else>

                            <do_if value="not $RFMCue.$reAssignedShips?">
                                <create_list name="$RFMCue.$reAssignedShips" />
                            </do_if>
                            <append_to_list name="$RFMCue.$reAssignedShips" exact="$aNewShip" />

                        </do_if>

                    </do_if>
                </do_for_each>
                
                <!-- Üretilen gemi kaydında defaultorder varsa orderını geri ver -->
                <do_if value="$FRec.{$ShipKey}.$defaultorder?">
                    <run_actions ref="Add_OrderTable_To_Ship" result="$result">
                        <param name="orderT" value="$FRec.{$ShipKey}.$defaultorder" />
                        <param name="ship" value="$NewShip" />
                    </run_actions>
                    <debug_text text="'    RFM_%s_[%s] %s %s recorded order (%s) , now = %s'.[$RFMKey, $ShipKey, $NewShip.knownname, $NewShip.idcode, $FRec.{$ShipKey}.$defaultorder.$id, $aNewShip.defaultorder.id ]"  chance="Main.$ChangesOnFleetDebug"/>
                </do_if>

                <debug_to_file text="'Ended.................................................. Age: %s'.[player.age]" name="$reAssign_logF" directory="Main.$logDIR" chance="Main.$DebugChance"/>

                <remove_value name="$isPromote" />
                <remove_value name="$aNewShip" />
                <remove_value name="$aCommander" />
                <remove_value name="$aAssignment" />
                <remove_value name="$aSubordinategroupid" />
                <remove_value name="$recGroupName" />
                <remove_value name="$nowGroupName" />
                
                <remove_value name="$tCom" />
                <remove_value name="$tComIdx" />
                <remove_value name="$IsAliveCom" />
                <remove_value name="$IsAssign" />

                <debug_text text="'RFM_' + $RFMKey + '_' + $ShipKey + '_ ReAssign Ok and BEFORE Check : ' + if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'KAPALI' else 'AÇIK'"  chance="Main.$ChangesOnFleetDebug"/>
            </actions>
            <!-- Filo kilit olayı Manuel Ekleme-Çıkarma işi için;
                    addsignment order dan kaynaklı add-remove olaylarını yakalayıp 
                    filo kaydının bozulmaması için konuldu.
                Burdaki sign işleminin oluşturduğu Add ve remove olaylarının tamamlanmasını bekleyeceğiz.
                üretilen geminin filo içi değişiminden kaynaklı
                    kontrol edilen en geç add-remove olayı 30 ms
                Bu yüzden bu değerden biraz fazla beklemek gerekiyor ki filo kilidi kaldırılsın
                    Böylece filoya manuel ekleme çıkarma sorunsuz yapılabilir.
                    * * * Add ve Remove olaylarına kontrol kondu. 
                -->
            <delay exact="1ms" comment="warebasket_override işi için bekletiyoruz "/>
            <actions>
                
                <run_actions ref="Check_FleetLockStatus">
                    <param name="RFMKey" value="$RFMKey" />
                </run_actions>
                <!-- -->
                <debug_text text="'RFM_' + $RFMKey + '_' + $ShipKey + '_ ReAssign Ok and AFTER Check : ' + if Main.$RM_Fleets.{$RFMKey}.$isLockedFleet then 'KAPALI' else 'AÇIK'"  chance="Main.$ChangesOnFleetDebug"/>

                <do_if value="$FRec.{$ShipKey}.$defaultorder?">
                    <!-- <debug_text text="'BEFORE warebasket = %s , warebasket_override = %s'.[ $NewShip.defaultorder.$warebasket, $NewShip.defaultorder.$warebasket_override]" />-->
                    <do_if value="$FRec.{$ShipKey}.$defaultorder.$warebasket_override.count > 0">
                        <edit_order_param order="$NewShip.defaultorder" param="'warebasket'" value="$FRec.{$ShipKey}.$defaultorder.$warebasket" />
                        <!-- <debug_text text="'CHANGED 1 warebasket = %s , warebasket_override = %s'.[ $NewShip.defaultorder.$warebasket, $NewShip.defaultorder.$warebasket_override]" />-->
                        <edit_order_param order="$NewShip.defaultorder" param="'warebasket_override'" value="$FRec.{$ShipKey}.$defaultorder.$warebasket_override" />
                        <!-- <debug_text text="'CHANGED 2 warebasket = %s , warebasket_override = %s'.[ $NewShip.defaultorder.$warebasket, $NewShip.defaultorder.$warebasket_override]" />    -->
                    </do_if>
                    <!-- <debug_text text="'AFTER warebasket = %s , warebasket_override = %s'.[ $NewShip.defaultorder.$warebasket, $NewShip.defaultorder.$warebasket_override]" />-->
                </do_if>

                <remove_value name="$FComp" />
                <remove_value name="$FIndx" />
                <remove_value name="$FRec" />
                <remove_value name="$RFMCue" />
            </actions>
        </cue>





        <!--IN  : none 
            OUT : 
                free RFMKey
        -->
        <library name="Get_New_RFMKey" purpose="run_actions">
            <actions>
                <!-- RM_Fleets TABLE KEY lerinde  boştaki index e göre yeni index alınacak-->
                <do_all exact="Main.$RM_Fleets.keys.count" counter="$iCnt">
                    <do_if value="Main.$RM_Fleets.keys.list.indexof.{$iCnt} == 0" >
                        <set_value name="$RFMKey" exact="$iCnt"/>
                        <break />
                    </do_if>
                </do_all>
                <do_if value="not $RFMKey?">
                    <set_value name="$RFMKey" exact="Main.$RM_Fleets.keys.count + 1"/>
                </do_if>

                <return value="$RFMKey"/>
            </actions>
        </library>
        <!-- 
            IN :    
                Commander object, Kaydı oluşturulacak TopLevel Gemi
            OUT :   
                [] liste
                [ $Promoted grp, $fleetshipsByComp rable , $fleetshipsByIdx table, $Subordinates grp ]
        -->
        <library name="Create_RFM_HeaderData_From_Commander" purpose="run_actions">
            <params>
                <param name="Commander" />
            </params>
            <actions>
                <set_value name="$result"  exact="[]"/>

                <!-- Create RFM Header Values -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>
                <!-- Set to Start Key -->
                <set_value name="$tShipKey" exact="1" />

                <do_if value="$Commander != null">
                    <!-- Prepare RFM Header Values -->
                    <add_to_group groupname="$Promoted" object="$Commander"/>

                    <set_value name="$fleetshipsByComp.{$Commander}" exact="$tShipKey" />
                    <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$Commander" />
                    <add_to_group groupname="$Subordinates" object="$Commander"/>

                    <do_for_each name="$tShip" in="$Commander.allsubordinates" >
                        <do_if value="not $tShip.isunit and not $tShip.isclass.ship_xs">
                            <set_value name="$tShipKey" operation="add" exact="1" />
                            <set_value name="$fleetshipsByComp.{$tShip}" exact="$tShipKey" />
                            <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$tShip" />
                            <add_to_group groupname="$Subordinates" object="$tShip"/>
                        </do_if>
                    </do_for_each>
                </do_if>

                <set_value name="$result" exact="[ $Promoted, $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ]" />
                <return value="$result"/>
            </actions>
        </library>
        <!-- 
            IN : 
                $HeaderData [Promoted (group), fleetshipsByComp (table), fleetshipsByIdx (table), Subordinates (group) ]
            Out : 
                $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ve $FleetRec 
        -->
        <library name="Let_HeaderData_To_HeaderValues">
            <actions>
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>

                <clear_group group="$Promoted" />
                <add_to_group groupname="$Promoted" object="$HeaderData.{1}.list.{1}" />
                <clear_table table="$fleetshipsByComp" />
                <set_value name="$fleetshipsByComp" exact="$HeaderData.{2}" />
                <clear_table table="$fleetshipsByIdx" />
                <set_value name="$fleetshipsByIdx" exact="$HeaderData.{3}" />
                <clear_group group="$Subordinates" />
                <do_all exact="$HeaderData.{4}.count" counter="$i">
                    <add_to_group groupname="$Subordinates" object="$HeaderData.{4}.list.{$i}" />
                </do_all>
            </actions>
        </library>

        <!-- İlgili Commandera bağlı gemilerin HeaderDatayı ve FleetRecord kayıtlarını geri verir
            IN  :
                Commander       :  Kaydı çıkarılacak fleet commander
                RFMKey          :      
                    verilirse  
                        FleetRec = Main.$FleetRecords.{$RFMKey} 
                        Loadout  = Main.$Loadout.{$RFMKey}      olarak belirlenir ve 
                    Verilmez ise bağımsız bir FleetRec kaydı açılır ve istenilen değerler return içinden okunur.
                SendPlanData    : RFMKey verilmiş ise ve SendPlanData true ise lua yolu ile ShipPlan oluşturup ekleme istekleri gönderilir. (default true)
            OUT :
                [$HeaderData, $FleetRec, $Loadouts, $PlanData]
         -->
        <library name="CreateAndGet_Records_By_Commander" purpose="run_actions">
            <params>
                <param name="Commander" />
                <param name="RFMKey" default="null"/>
                <param name="SendPlanData" default="true" />
            </params>
            <actions>
                <!-- Create RFM Header Values -->

                <do_if value="$RFMKey == null">
                </do_if>
                <do_else>
                </do_else>

                <run_actions ref="Create_RFM_HeaderData_From_Commander" result="$HeaderData">
                    <param name="Commander" value="$Commander" />
                </run_actions>
                <include_actions ref="Let_HeaderData_To_HeaderValues" />

                <do_if value="$RFMKey == null">
                    <set_value name="$FleetRec" exact="table[]" />
                    <set_value name="$Loadouts" exact="table[]" />
                </do_if>
                <do_else>
                    <do_if value="not Main.$FleetRecords.{$RFMKey}?">
                        <set_value name="Main.$FleetRecords.{$RFMKey}" exact="table[]" />    
                    </do_if>
                    <set_value name="$FleetRec" exact="Main.$FleetRecords.{$RFMKey}" />
                    <do_if value="not Main.$Loadouts.{$RFMKey}?">
                        <set_value name="Main.$Loadouts.{$RFMKey}" exact="table[]" />    
                    </do_if>
                    <set_value name="$Loadouts" exact="Main.$Loadouts.{$RFMKey}" />
                </do_else>

                <do_for_each name="$ShipKey" in="$fleetshipsByIdx.keys.list"  >

                    <set_value name="$Ship" exact="$fleetshipsByIdx.{$ShipKey}" />

                    <run_actions ref="Get_NoneColor_ShipName" result="$name">
                        <param name="RFMKey" value="$RFMKey" />
                        <param name="ship" value="$Ship" />
                    </run_actions>
                    
                    <set_value name="$FleetRec.{$ShipKey}" exact="table[]" />
                    
                    <run_actions ref="Set_ShipPropertiesToFleetRec">
                        <param name="FleetRec" value="$FleetRec.{$ShipKey}" />
                        <param name="Ship" value="$Ship"/>
                        <param name="ShipKey" value="$ShipKey" />
                        <param name="name" value="$name" />
                        <param name="commanderidx" value="if $Ship.commander then $fleetshipsByComp.{$Ship.commander} else -1" />
                    </run_actions>
                    
                    <set_value name="$Loadouts.{$ShipKey}" exact="0"  />
                    <run_actions ref="Create_Loadout_AndSetTo" result="$Loadouts.{$ShipKey}">
                        <param name="ship"      value="$Ship"/>
                        <param name="macro"     value="$Ship.macro" />
                        <param name="FleetRec"  value="$FleetRec.{$ShipKey}"/>
                    </run_actions>

                    <do_if value="not $PlanData?">
                        <create_list name="$PlanData" />
                    </do_if>
                    <run_actions ref="AppendTo_PlanData" >
                        <param name="RFMKey"    value="$RFMKey" />
                        <param name="ShipKey"   value="$ShipKey"/>
                        <param name="Object"    value="$Ship"/>
                        <param name="issupplyship"      value="$FleetRec.{$ShipKey}.$issupplyship"/>
                        <param name="macro"             value="$FleetRec.{$ShipKey}.$macro"/>
                        <param name="PlanData"              value="$PlanData" />
                        <param name="getShipPlan"               value="true"/>
                        <param name="getIndividualInstructions" value="true"/>
                    </run_actions>
                </do_for_each>

                <!-- ShipPlan ataması istenecek -->
                <do_if value="$RFMKey != null">
                    <do_if value="$SendPlanData and $PlanData? ">
                        <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
                        <signal_cue_instantly cue="Get_PlanData_FromLua" param="$PlanData" />
                    </do_if>
                </do_if>
                <remove_value name="$PlanData" />

                <return value="[$HeaderData, $FleetRec, $Loadouts]"/>
            </actions>
        </library>

        <library name="Set_ShipPropertiesToFleetRec" purpose="run_actions">
            <params>
                <param name="FleetRec" />
                <param name="Ship" />
                <param name="ShipKey" />
                <param name="name" />
                <param name="commanderidx" />
            </params>
            <actions>

                <run_actions ref="GetNameSubordinateGroupId" result="$subordinategrouptext">
                    <param name="subordinategroupid" value="$Ship.subordinategroupid" />
                </run_actions>
                
                <set_value name="$FleetRec.$id" exact="$ShipKey"/>
                <set_value name="$FleetRec.$assignment" exact="$Ship.assignment"/>
                <set_value name="$FleetRec.$commanderidx" exact="$commanderidx" comment="if $Ship.commander then $fleetshipsByComp.{$Ship.commander} else -1"/>
                <set_value name="$FleetRec.$name" exact="$name" comment="tag içermeyen isim gerekiyor"/>
                <set_value name="$FleetRec.$object" exact="$Ship"/>
                <set_value name="$FleetRec.$idcode" exact="$Ship.idcode"/>
                <set_value name="$FleetRec.$class" exact="$Ship.class"/>
                <set_value name="$FleetRec.$issupplyship" exact="if $Ship.macro.isclass.ship then $Ship.issupplyship else false"/>
                <set_value name="$FleetRec.$purpose" exact="$Ship.primarypurpose"/>
                <set_value name="$FleetRec.$loadoutlevel" exact="$Ship.loadoutlevel"/>
                <set_value name="$FleetRec.$macro" exact="$Ship.macro"/>
                <set_value name="$FleetRec.$icon" exact="if $Ship.isclass.ship then $Ship.macro.icon else 'maptr_hexagon'"/>
                <set_value name="$FleetRec.$subordinategroupid" exact="$Ship.subordinategroupid"/>
                <set_value name="$FleetRec.$subordinategrouptext" exact="$subordinategrouptext"/>
                <set_value name="$FleetRec.$type" exact="if $Ship.isclass.ship then $Ship.type else null"/>
                <set_value name="$FleetRec.$reBuildTryNum" exact="0"/>
                <set_value name="$FleetRec.$reBuildStartTime" exact="null"/>
                <set_value name="$FleetRec.$destroyed" exact="false"/>
                <set_value name="$FleetRec.$destroyedtime" exact="null"/>
                <!-- Trader, Miner ve Salvagerlerin orderlarını kaydedeceğiz -->
                <set_value name="$warebasketdefaultorders" exact="['TradeRoutine', 'MiningRoutine', 'SalvageRoutine']" />
                <!-- İstasyonların defaultorder ları yoktur-->
                <!-- <debug_text text="'%s %s , .defaultorder? = %s , @.defaultorder = %s , @.defaultorder.id = %s'.[$Ship.knownname, $Ship.idcode, $Ship.defaultorder?, @$Ship.defaultorder, @$Ship.defaultorder.id]" /> -->
                <do_if value="$Ship.defaultorder.id?">
                    <do_if value="$warebasketdefaultorders.indexof.{$Ship.defaultorder.id}">
                        <run_actions ref="Get_OrderTable_From_Ship" result="$orderTable">
                            <param name="ship" value="$Ship" />
                        </run_actions>
                        <set_value name="$FleetRec.$defaultorder" exact="$orderTable.{1}"/>
                    </do_if>
                </do_if>

                <!-- Loadout bilgileri sonra ekleyeceğiz-->
                
            </actions>
        </library>
        
        <!-- verilen gemiye ait Loadout ve FleetRecord ve loadout tablosunu günceller (record.tShipPlan Hariç)
            IN  :
                Ship        object planı çıkarılacak gemi
                FlletRec    üstüne yazılacak olan record tablosu    örn. Main.$FleetRecors.{$RFMKey}.{$ShipKey}
            OUT : 
                retvaule loadout  
        -->
        <library name="Create_Loadout_AndSetTo" purpose="run_actions">
            <params>
                <param name="ship"                          comment="ship objesi varsa .loadout"/>
                <param name="macro"                         comment="ship objesi yoksa macro üzerinden loadout"/>
                <param name="oldLoadout"    default="null"  comment="macro üzerinden varsa default alınacak"/>
                <param name="wares"         default="null"  comment="macro üzerinden varsa generateye eklenecek"/>
                <param name="FleetRec"      />
            </params>
            <actions>
                <do_if value="$ship != null">
                    <!-- componentstate.construction , componentstate.operational -->
                    <!-- 
                    <debug_text text="'%s %s &lt;%s&gt;.state = %s'.[$ship.idcode, $ship.knownname, $ship, $ship.state]" />
                    -->
                    <do_if value="$ship.state == componentstate.operational">
                        <run_actions ref="Get_ShipLoadouts" result="$NewLoadout">
                            <param name="Ship" value="$ship"/>
                        </run_actions>
                        <set_value name="$Loadout" exact="$NewLoadout.{1}"/>
                        <set_value name="$FleetRec.$tWare" exact="$NewLoadout.{2}"/>
                        <set_value name="$FleetRec.$tPilot" exact="$NewLoadout.{3}"/>
                        <set_value name="$FleetRec.$tBulkCrew" exact="$NewLoadout.{4}"/>
                    </do_if>
                    <do_else>
                        <set_value name="$Loadout" exact="$ship.loadout"/>
                    </do_else>
                </do_if>
                <do_else>
                    <set_value name="$Loadout" exact="$oldLoadout"/>
                    <do_if value="$oldLoadout == null">
                        <do_if value="$wares == null">
                            <set_value name="$wares" exact="@$FleetRec.$tWare"/>
                            <do_if value="$wares == null">
                                <generate_loadout result="$loadout" macro="$macro" level="1.0" variation="1.0" faction="faction.player" />
                            </do_if>
                            <do_else>
                                <generate_loadout result="$loadout" macro="$macro" level="1.0" wares="$wares" variation="1.0" faction="faction.player" />    
                            </do_else>
                        </do_if>
                        <do_else>
                            <generate_loadout result="$loadout" macro="$macro" level="1.0" wares="$wares" variation="1.0" faction="faction.player" />
                        </do_else>
                        <set_value name="$Loadout" exact="$loadout.{1}"/>
                    </do_if>
                </do_else>

                <return value="$Loadout"/>
            </actions>
        </library>




        <!--DIKKAT: Ardarda kullanıldığında ve büyük bilgi paketleri gönderildiğinde lua en sonuncuya yanıt verdi.
            IN  : 
            param [ $PlanData , $debug (default true) ]
                $PlanData  = 
                        [ 
                            table[ 
                                $RFMKey  1 = $RFMKey,
                                $ShipKey 1 = $ShipKey, 
                                $object  1 = $Ship 1,
                                $ShipPlanTable 1 = ShipPlanTable
                            ],
                            ...
                            table[
                                $RFMKey  n = $RFMKey,
                                $ShipKey n = $ShipKey, 
                                $object  n = $Ship n,
                                $ShipPlanTable n = ShipPlanTable
                            ],
                        ]
                
                $isChangeCrewAmounts : luadan geri dönüldüğünde ship plan içindeki crew amounts bilgisi tBulkCrew bilgisini kullanarak değiştir izni
                $debug : luadan geri dönüldüğünde FleetRecords debug dosyalarının güncelleme izni..
                    Özellikle birden fazla RFM işi peşpeşe yapılacaksa oyun fps sinin düşmemesi için false olmalı 
            OUT : none
        -->
        <!--param  $PlanData  or  [ $PlanData , $isChangeCrewAmounts (default false), $debug (default true) ] -->
        <cue name="Get_PlanData_FromLua" instantiate="true">
            <conditions>
                <event_cue_signalled />
            </conditions>
            <actions>
                <do_if value="typeof event.param == datatype.list">
                    <do_if value="typeof event.param.{1} == datatype.list">
                        <set_value name="$PlanData" exact="event.param.{1}" />
                        <set_value name="$isChangeCrewAmounts" exact="if event.param.{2}? or @event.param.{2} != null then event.param.{2} else false" />
                        <set_value name="$debug" exact="if event.param.{3}? or @event.param.{3} != null then event.param.{3} else true" />
                    </do_if>
                    <do_else>
                        <set_value name="$PlanData" exact="event.param" />
                        <set_value name="$isChangeCrewAmounts" exact="false" />
                        <set_value name="$debug" exact="true" />
                    </do_else>

                    <do_if value="$PlanData == null">
                        <debug_text text="'HATA, $PlanData parametresi yok.'.[]" />
                        <cancel_cue cue="this" />
                    </do_if>
                    <do_elseif value="$PlanData.count == 0">
                        <debug_text text="'HATA, $PlanData listesi boş.'.[]" />
                        <cancel_cue cue="this" />
                    </do_elseif>
                    <do_else>
                        <set_value name="$param" exact="'debug;%s;isChangeCrewAmounts;%s'.[$debug, $isChangeCrewAmounts]" />
                        <debug_text text="'\n
        Before player.entity.$PlanData  = %s \n
                             $PlanData  = %s \n
                                $param  = %s 
                        '.[@player.entity.$PlanData, $PlanData, $param]" chance="if $debug then Main.$DeepDebug"/>
                        <!-- arka arkaya bir çok raise_lua_event çağrısı yapıldığında sadece en sonuncu çağrı cevap veriyor
                            bu yüzden iş yapmak istediğimiz işlem türü için hazırlanan veri paketi tek seferde gönderilecek şekilde hazırlanmalı.
                            raise_lua_event param ancak string, sayısal ya da component türünden veri alabilir. 
                            göndermek istediğimiz tablo türü olduğundan player.entity. üstüne yazarak göndereceğiz  
                            debug değişkeni tek tip olduğundan raise_lua_event paraetresi üzerinden stringe çeirip gönderebiliriz.
                            ** player.entity.$PlanData üzerinden luaya gönderilen veri luada işlenip md ye gönderildiğinde (event recevied from lua içinde)
                                işlenmiş verinin alındığından emin olmak açısından .$PlanData propertysini sildik.
                                player.entity üzerindeki bilgi recevied lua dan alınmışsa bu property olmamalı.
                                hala player.entity üzerinde bilgi varsa md içinden alamadık demektir, 
                                buyüzden listeyi alıp gönderilecek bilgiye ekleyerek tekrar göndereceğiz.
                                Ayrıca lua dan yapılan bir trigleme Md tarafından 15ms kadar geç algılanıyor
                        -->    
                        <do_if value="player.entity.$PlanData?">
                            <set_value name="$tPlanData" exact="player.entity.$PlanData" />
                            <do_for_each name="$entry" in="$tPlanData">
                                <append_to_list name="$PlanData" exact="$entry"/>
                            </do_for_each>
                        </do_if>
                        <set_value name="player.entity.$PlanData" exact="$PlanData" />
                        <debug_text text="'\n
        Sending player.entity.$PlanData = %s \n
                                        '.[player.entity.$PlanData]" chance="if $debug then Main.$DeepDebug"/>
                        <raise_lua_event name="'Get_ShipPlan'" param="$param" />
                    </do_else>
                </do_if>
                <do_else>
                    <debug_text text="'HATA, Parametre hatalı.'.[]" />
                    <cancel_cue cue="this" />
                </do_else>
            </actions>
        </cue>

        <!--verilen PlanData listesine atama yaparak üstünde biriktirir  
            PlanData bir liste ve bu listeye 
                table[ 
                    $RFMKey = $RFMKey,
                    $ShipKey = $ShipKey, 
                    $Object = $Ship,
                    $macro  = $Ship.macro.id,
                    $issupplyship = $Ship.issupplyship,
                    $isShip = $macro.isclass.ship,
                    $primarypurpose = $macro.primarypurpose,
                    $faction = faction.player.id,
                    $getShipPlan = true / false, 
                    $getIndividualInstructions = true / false
                ]
            eklemesi yapılarak güncellenecek
            $ShipPlanTable = null  <- daha sonra Get_PlanData_FromLua ile geri verilerek doldurulacak
        -->
        <library name="AppendTo_PlanData" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="ShipKey" />
                <param name="Object" />
                <param name="macro" />
                <param name="issupplyship" />
                <param name="PlanData" />
                <param name="getShipPlan" default="true"/>
                <param name="getIndividualInstructions" default="true"/>
            </params>
            <actions>
                <do_if value="typeof $PlanData != datatype.list">
                    <create_list name="$PlanData" />
                </do_if>
                <do_if value="($Object != null or $macro != null ) and $RFMKey != null and $ShipKey != null">
                    <append_to_list name="$PlanData" exact="table[ 
                    $RFMKey = $RFMKey, 
                    $ShipKey = $ShipKey, 
                    $Object = $Object, 
                    $macro = $macro.id, 
                    $issupplyship = $issupplyship,
                    $isShip = $macro.isclass.ship,
                    $primarypurpose = $macro.primarypurpose,
                    $faction = faction.player.id,
                    $getShipPlan = $getShipPlan, 
                    $getIndividualInstructions = $getIndividualInstructions 
                    ]" />
                </do_if>
            </actions>
        </library>




        <!-- 
            ReEnable için yazıldı
         -->
        <!--Verilen FleetRec ve filo commander bilgilerini kullanarak HeaderData oluşturur.
            IN :
                Commander
                FleetRec
            OUT :   [] liste
                HeaderData [ $Promoted grp, $fleetshipsByComp table, $fleetshipsByIdx table, $Subordinates grp ]
        -->
        <library name="Create_RFMHeaderData_From_FleetRec" purpose="run_actions">
            <params>
                <param name="FleetRec"  comment="okunacak Filoya ait record tablosu örn. Main.FleetRecords.{RFM}"/>
                <param name="Commander" comment="Promoted group bilgisi için o anki fleetcommander kimse" />
            </params>
            <actions>

                <set_value name="$result"  exact="[]"/>

                <!-- Create RFM Header Values -->
                <create_group groupname="$Promoted" />
                <set_value name="$fleetshipsByComp" exact="table[]" />
                <set_value name="$fleetshipsByIdx" exact="table[]" />
                <create_group groupname="$Subordinates"/>
                
                <do_if value="$Commander != null">
                    <add_to_group groupname="$Promoted" object="$Commander"/>
                </do_if>

                <do_for_each name="$tShipKey" valuename="$entry" in="$FleetRec"  >
                    <do_if value="$entry.$object != null">
                        <set_value name="$fleetshipsByComp.{$entry.$object}" exact="$tShipKey" />
                        <set_value name="$fleetshipsByIdx.{$tShipKey}" exact="$entry.$object" />
                        <add_to_group groupname="$Subordinates" object="$entry.$object"/>
                    </do_if>
                </do_for_each>

                <set_value name="$result" exact="[ $Promoted, $fleetshipsByComp, $fleetshipsByIdx, $Subordinates ]" />
                <return value="$result"/>

            </actions>
        </library>
        <!--RFMKey e ait $RFMCue deki DataHeader bilgilerini günceller 
            (ilgili cue çalışıyor olması gerek ve biz HeaderDATA sını değiştireceğiz)
            IN : 
                $RFMKey
                $HeaderData [Promoted (group), fleetshipsByComp (table), fleetshipsByIdx (table), Subordinates (group) ]
            Out :  none
        -->
        <library name="Let_HeaderData_To_RFM_HeaderValues" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="HeaderData" />
            </params>
            <actions>
                <set_value name="$RFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />

                <do_if value="not $RFMCue.$Promoted?">
                    <create_group groupname="$RFMCue.$Promoted" />
                </do_if>
                <clear_group group="$RFMCue.$Promoted" />
                <do_if value="$HeaderData.{1}.count > 0">
                    <add_to_group groupname="$RFMCue.$Promoted" object="$HeaderData.{1}.list.{1}" />
                </do_if>

                <do_if value="not $RFMCue.$fleetshipsByComp?">
                    <set_value name="$RFMCue.$fleetshipsByComp" exact="table[]" />
                </do_if>
                <clear_table table="$RFMCue.$fleetshipsByComp" />
                <set_value name="$RFMCue.$fleetshipsByComp" exact="$HeaderData.{2}" />

                <do_if value="not $RFMCue.$fleetshipsByIdx?">
                    <set_value name="$RFMCue.$fleetshipsByIdx" exact="table[]" />
                </do_if>
                <clear_table table="$RFMCue.$fleetshipsByIdx" />
                <set_value name="$RFMCue.$fleetshipsByIdx" exact="$HeaderData.{3}" />

                <do_if value="not $RFMCue.$Subordinates?">
                    <create_group groupname="$RFMCue.$Subordinates" />
                </do_if>
                <clear_group group="$RFMCue.$Subordinates" />
                <do_all exact="$HeaderData.{4}.count" counter="$i">
                    <add_to_group groupname="$RFMCue.$Subordinates" object="$HeaderData.{4}.list.{$i}" />
                </do_all>

            </actions>
        </library>
        <!--Verilen FleetRec kaydından RFMKey.Cue DataHeader bilgilerini günceller  
            IN :
                RFMKey
                FleetRec
            OUT : none
        -->
        <library name="Set_ToRFM_HeaderValues_From_FleetRec" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="FleetRec" />
            </params>
            <actions>
                <!--Promote bilgisi fleetrec kaydından bulmak istersek 
                    kayıt içinde patlamamış bir gemi buluruz ve fleetcommander bilgisine ulaşabiliriz. 
                 -->
                <run_actions ref="Create_RFMHeaderData_From_FleetRec" result="$HeaderData">
                    <param name="Commander" value="Main.$RM_Fleets.{$RFMKey}.$object" />
                    <param name="FleetRec" value="$FleetRec" />
                </run_actions>
                <run_actions ref="Let_HeaderData_To_RFM_HeaderValues">
                    <param name="RFMKey" value="$RFMKey" />
                    <param name="HeaderData" value="$HeaderData" />
                </run_actions>
            </actions>
        </library>







        



        <!-- IN :   subordinategroupid            : as subordinategroupid
		    OUT :   return value as string
		-->
        <library name="GetNameSubordinateGroupId" purpose="run_actions">
            <params>
                <param name="subordinategroupid"/>
            </params>
            <actions>
                <do_if value="$subordinategroupid == 1">
                    <set_value name="$name" exact="'Alpha'"/>
                </do_if>
                <do_elseif value="$subordinategroupid == 2">
                    <set_value name="$name" exact="'Beta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 3">
                    <set_value name="$name" exact="'Gamma'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 4">
                    <set_value name="$name" exact="'Delta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 5">
                    <set_value name="$name" exact="'Epsilon'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 6">
                    <set_value name="$name" exact="'Zeta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 7">
                    <set_value name="$name" exact="'Eta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 8">
                    <set_value name="$name" exact="'Theta'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 9">
                    <set_value name="$name" exact="'Iota'"/>
                </do_elseif>
                <do_elseif value="$subordinategroupid == 10">
                    <set_value name="$name" exact="'Kappa'"/>
                </do_elseif>
                <do_else>
                    <set_value name="$name" exact="''"/>
                </do_else>
                <return value="$name"/>
            </actions>
        </library>

        <!-- IN RFMKey e göre Fleet log dosyalarının adlarını oluşturur-->
        <library name="Let_RFM_LogFileNames">
            <actions>
                <set_value name="$Command_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_Command "/>
                <set_value name="$FleetRecord_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord  " />
                <set_value name="$reBuildCues_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_RebuildCues " />
                <set_value name="$reBuild_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_reBuild"/>
                <set_value name="$reAssign_logF" exact="'RFM_' + $RFMKey + Main.$logTAG_reAssignment"/>
            </actions>
        </library>


        <!--       : $printlogF  as log file name, default 'RFM_' + $RFMKey + Main.$logTAG_Command-->
        <library name="Print_Subordinates">
            <actions>
                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                <do_if value="@$printlogF == null">
                    <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_Command"/>
                </do_if>
                <do_if value="not $printAppend?">
                    <set_value name="$printAppend" exact="true"/>
                </do_if>
                <debug_to_file text="' RFM_%s_ , Commander: &lt;%s&gt; %s %s (%s)'.[$RFMKey, @$RFM_Cue.$RMCommander, $RFM_Cue.$RMCommanderName, $RFM_Cue.$RMCommanderIdCode, @$RFM_Cue.$RMCommander.sector.knownname]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$printAppend"/>
                <debug_to_file text="' Subordanates ( count %s ) :'.[$RFM_Cue.$Subordinates.count]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                <debug_to_file text="' Subordinates = %s'.[$RFM_Cue.$Subordinates]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                <do_for_each name="$subObj" in="$RFM_Cue.$Subordinates" counter="$iSubOrd">
                    <debug_to_file text="'   %s- &lt;%s&gt; %s %s '.[$iSubOrd, $subObj, $subObj.name, $subObj.idcode]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DeepDebug" />
                </do_for_each>
                <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                <remove_value name="$subObj"/>
                <remove_value name="$iSubOrd"/>
                <remove_value name="$printlogF"/>
                <remove_value name="$printAppend"/>
                <remove_value name="$RFM_Cue"/>
                
            </actions>
        </library>



        <!-- RFM_xx_RebuildCue dosyasına döküm yapar
            IN  : 
                RFMKey
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  verilmemişse  deepdebug için 2 yoksa 1
                logfile         (Default null)  verilmemişse 'RFM_' + $RFMKey + Main.$logTAG_RebuildCues üretir
                append          (Default false) dosyayı ilk açma yöntemi
        -->
        <library name="Debug_RebuildCue" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_RebuildCues"/>
                <do_if value="$logfile != null">
                    <set_value name="$printlogF" exact="$logfile"/>
                </do_if>

                <do_if value="$inserttext != ''">
                    <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                    <set_value name="$append" exact="true" />
                </do_if>

                <do_if value="Main.$RebuildCues.{$RFMKey}?">
                    <debug_to_file text="'RebuildCues.{ %s } ( count %s ) =   Age: %s, %s'.[$RFMKey, Main.$RebuildCues.{$RFMKey}.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>

                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="Main.$RebuildCues.{$RFMKey}" />
                        <param name="recursiondepth" value="if Main.$DeepDebug then 2 else 1" />
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$printlogF" />
                        <param name="debugFileDir" value="Main.$logDIR" />
                        <param name="DebugChance" value="Main.$DebugChance" />
                    </run_actions>
                </do_if>
                <do_else>
                    <debug_text text="'Main.$RebuildCues.{%s} YOK..'.[$RFMKey]" chance="Main.$DebugChance"/>
                </do_else>
            </actions>
        </library>

        <!-- RebuildCues dosyasına döküm yapar
            IN  : 
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  verilmemişse  deepdebug için 3 yoksa 2
                logfile         (Default null)  verilmemişse Main.$logTAG_RebuildCues  üretir
                append          (Default false) dosyayı ilk açma yöntemi                
        -->
        <library name="Debug_AllRebuildCues" purpose="run_actions">
            <params>
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <set_value name="$printlogF" exact="Main.$logTAG_RebuildCues"/>
                <do_if value="$logfile != null">
                    <set_value name="$printlogF" exact="$logfile"/>
                </do_if>

                <do_if value="$inserttext != ''">
                    <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                    <set_value name="$append" exact="true" />
                </do_if>

                <debug_to_file text="'All RebuildCues for %s RM Fleets  Age: %s, %s'.[Main.$RebuildCues.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="Main.$RebuildCues" />
                    <param name="recursiondepth" value="if Main.$DeepDebug then 2 else 1" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$printlogF" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="Main.$DebugChance" />
                </run_actions>
            </actions>
        </library>

        <!-- RFM_Fleets dosyasına döküm yapar
            IN  : 
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  Main.$DebugFileDetail_Fleets açıksa ve  verilmemişse deepdebug için 2 yoksa 1
                logfile         (Default null)  verilmemişse Main.$logTAG_RFMleets  üretir
                append          (Default false) dosyayı ilk açma yöntemi                
        -->
        <library name="Debug_RM_Fleets" purpose="run_actions">
            <params>
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <set_value name="$printlogF" exact="Main.$logTAG_RFMleets"/>
                <do_if value="$logfile != null">
                    <set_value name="$printlogF" exact="$logfile"/>
                </do_if>

                <do_if value="$inserttext != ''">
                    <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                    <set_value name="$append" exact="true" />
                </do_if>
                <debug_to_file text="'RM Fleets (count %s)  Age: %s, %s'.[Main.$RM_Fleets.keys.count, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                
                <do_if value="md.SWI_HQ_Discovery?">
                    <set_value name="$north" exact="md.SWI_HQ_Discovery.Start.$Sector_random_north"/>
                    <set_value name="$south" exact="md.SWI_HQ_Discovery.Start.$Sector_random_south"/>
                    <debug_text text="'North Sector = %s '.[$north.knownname]" />
                    <debug_text text="'South Sector = %s '.[$south.knownname]" />
                    <debug_text text="'\n
                        HQ = %s \n
                        All Sectors_random_north = %s   \n
                        All Sectors_random_south = %s   \n
                        Sector_random_north = %s    \n
                        Sector_random_south = %s 
                        '.[@md.SWI_HQ_Discovery.Start.$HQ, 
                        md.SWI_HQ_Discovery.Start.$Sectors_random_north, 
                        md.SWI_HQ_Discovery.Start.$Sectors_random_south,
                        md.SWI_HQ_Discovery.Start.$Sector_random_north,
                        md.SWI_HQ_Discovery.Start.$Sector_random_south
                        ]" />
                </do_if>
                
                <do_for_each name="$xRFMKey" in="Main.$RM_Fleets.keys.list" counter="$icount">
                    <debug_to_file text="'
        %s/%s - RFM_%s_  Promoted = %s %s &lt;%s&gt; ( %s ), Real Commander = %s %s &lt;%s&gt;, Entity= %s &lt;%s&gt;
                    '.[
                    $icount , Main.$RM_Fleets.keys.count, $xRFMKey, 
                    Main.$RM_Fleets.{$xRFMKey}.$name, @Main.$RM_Fleets.{$xRFMKey}.$object.idcode,
                    @Main.$RM_Fleets.{$xRFMKey}.$object, @Main.$RM_Fleets.{$xRFMKey}.$object.sector.knownname, 
                    Main.$RM_Fleets.{$xRFMKey}.$commander.$name, @Main.$RM_Fleets.{$xRFMKey}.$commander.$object.idcode,
                    @Main.$RM_Fleets.{$xRFMKey}.$commander.$object,
                    @Main.$RM_Fleets.{$xRFMKey}.$entity.knownname, @Main.$RM_Fleets.{$xRFMKey}.$entity
                    ]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                </do_for_each>

                <do_if value="Main.$DebugFileDetail_Fleets">
                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="Main.$RM_Fleets" />
                        <param name="recursiondepth" value="if Main.$DeepDebug then 2 else 1" />
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$printlogF" />
                        <param name="debugFileDir" value="Main.$logDIR" />
                        <param name="DebugChance" value="100" />
                    </run_actions>
                </do_if>
                <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />

            </actions>
        </library>

        <!-- IN     : $pFSByIdx as RF Manager.$fleetshipsByIdx Table-->    
        <!--       : $printlogF  as log file name-->
        <library name="Print_fleetshipsByIdx">
            <actions>
                <!-- 
                <set_value name="$RFM_Cue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                -->
                <set_value name="$pFSByIdx" exact="Main.$RM_Fleets.{$RFMKey}.$cue.$fleetshipsByIdx.clone"/>
                <!-- FLEET ALIVE SHIPS TABLE -->
                <debug_to_file text="'   Fleet Ships By IDXs Table ( count %s )'.[$pFSByIdx.keys.count]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$pFSByIdx" />
                    <param name="recursiondepth" value="if Main.$DeepDebug then 2 else 1" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$printlogF" />
                    <param name="debugFileDir" value="Main.$logDIR" />
                    <param name="DebugChance" value="Main.$DebugChance" />
                </run_actions>
                <remove_value name="$pFSByIdx" />
                
            </actions>
        </library>
        <!-- RFM_xx_FleetRecord dosyasına döküm yapar
            IN  : 
                RFMKey
                inserttext      (Default ''  )  dosya başına ekstra satır eklemek için
                recursiondepth  (Default null)  Main.$DebugFileDetail_Records açıksa ve  verilmemişse  debugchance için +2 deepdebug için +2 yoksa 1
                logfile         (Default null)  verilmemişse 'RFM_' + $RFMKey + Main.$logTAG_FleetRecord üretir
                append          (Default false) dosyayı ilk açma yöntemi
        -->
        <library name="Debug_FleetRecord" purpose="run_actions">
            <params>
                <param name="RFMKey" />
                <param name="inserttext" default="''" />
                <param name="recursiondepth" default="null"/>
                <param name="logfile" default="null" />
                <param name="append" default="false"/>
            </params>
            <actions>
                <do_if value="( not Main.$RM_Fleets.{$RFMKey}? ) or ( not Main.$FleetRecords.{$RFMKey}? )" >
                    <do_if value="not Main.$RM_Fleets.{$RFMKey}?">
                        <debug_text text="'Main.$RM_Fleets.{%s} YOK..'.[$RFMKey]" chance="Main.$DebugChance"/>
                    </do_if>
                    <do_else>
                        <debug_text text="'Main.$FleetRecords.{%s} YOK..'.[$RFMKey]" chance="Main.$DebugChance"/>
                    </do_else>
                </do_if>
                <do_else>
                    <set_value name="$pRFMCue" exact="Main.$RM_Fleets.{$RFMKey}.$cue" />
                    <set_value name="$pFRec" exact="Main.$FleetRecords.{$RFMKey}.clone"/>
                    <set_value name="$printlogF" exact="'RFM_' + $RFMKey + Main.$logTAG_FleetRecord"/>
                    <do_if value="$logfile != null">
                        <set_value name="$printlogF" exact="$logfile"/>
                    </do_if>
    
                    <!-- FLEET ALIVE SHIPS TABLE -->
                    <do_if value="$inserttext != ''">
                        <debug_to_file text="$inserttext" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                        <set_value name="$append" exact="true" />
                    </do_if>
                    <debug_to_file text="'RFM_%s_ , Commander &lt;%s&gt; %s %s (%s),  Age: %s, %s'.[$RFMKey, @$pRFMCue.$RMCommander, $pRFMCue.$RMCommanderName, $pRFMCue.$RMCommanderIdCode, @$pRFMCue.$RMCommander.sector.knownname, player.age, player.systemtime.{'%F-%X'}]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" append="$append"/>
                    
                    <include_actions ref="Print_fleetshipsByIdx" />
                    <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                    <!-- FLEET RECORD TABLE -->
                    <set_value name="$pFSByIdx" exact="$pRFMCue.$fleetshipsByIdx.clone"/>
                    <set_value name="$pFSByComp" exact="$pRFMCue.$fleetshipsByComp.clone"/>
                    <debug_to_file text="'Fleet Record ( count %s ), Destroyed Ship Keys : %s'.[$pFRec.keys.count, Main.$RM_Fleets.{$RFMKey}.$destroyedShipKeys]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance"/>
                    <do_for_each name="$xId" in="$pFRec.keys.list"  >
                        <run_actions ref="GetNameSubordinateGroupId" result="$groupName">
                            <param name="subordinategroupid" value="$pFRec.{$xId}.$subordinategroupid" />
                        </run_actions>
    
                        <debug_to_file text="' Fleet ship (%s/%s) : &lt;%s&gt; %s %s .comanderidx : %s &lt;%s&gt; , subordinategroupid : %s (%s), assignment : %s , l = %s
                        '.[
                        $xId, $pFRec.keys.list.count, 
                        if @$pFSByIdx.{$xId} then $pFSByIdx.{$xId} else '   DEAD    ', 
                        $pFRec.{$xId}.$name, 
                        if @$pFSByIdx.{$xId} then $pFSByIdx.{$xId}.idcode else '',  
                        $pFRec.{$xId}.$commanderidx, 
                        if @$pFSByIdx.{$pFRec.{$xId}.$commanderidx} then $pFSByIdx.{$pFRec.{$xId}.$commanderidx} else (if $xId == 1 then 'null' else 'DEAD'), 
                        $pFRec.{$xId}.$subordinategroupid, $groupName, @$pFRec.{$xId}.$assignment.name,
                        Main.$Loadouts.{$RFMKey}.{$xId}
                        ]" name="$printlogF" directory="Main.$logDIR" chance="Main.$DebugChance" />
                    </do_for_each>
    
                    <do_if value="Main.$DebugFileDetail_Records">
                        <debug_to_file text="' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - '" name="$printlogF" directory="Main.$logDIR"  />
                        <debug_to_file text="'Fleet Record Table : '" name="$printlogF" directory="Main.$logDIR"  />
                        <do_if value="$recursiondepth == null">
                            <set_value name="$recursiondepth" exact="0" />
                            <do_if value="Main.$DebugChance > 0">
                                <set_value name="$recursiondepth" exact="2" operation="add"/>
                            </do_if>
                            <do_if value="Main.$DeepDebug > 0">
                                <set_value name="$recursiondepth" exact="2" operation="add"/>
                            </do_if>
                            <do_if value="$recursiondepth == 0">
                                <set_value name="$recursiondepth" exact="1" />
                            </do_if>
                        </do_if>
                        <run_actions ref="DebugPrintValue">
                            <param name="value" value="Main.$FleetRecords.{$RFMKey}" />
                            <param name="recursiondepth" value="$recursiondepth" />
                            <param name="debugToFile" value="true" />
                            <param name="debugFileName" value="$printlogF" />
                            <param name="debugFileDir" value="Main.$logDIR" />
                            <param name="DebugChance" value="100" />
                        </run_actions>
                    </do_if>
    
                </do_else>

            </actions>
        </library>


        <!--KULLANILMAYACAK :
            IN :   
                    RFMKey          , RM Fleet numarası
            OUT : -
        -->
        <library name="Dump_ShipFiles" purpose="run_actions" >
            <params>
                <param name="RFMKey" />
            </params>
            <actions>
                
                <set_value name="$DebugChance" exact="Main.$DebugChance" />
                <set_value name="$DeepDebug" exact="Main.$DeepDebug" />
                <set_value name="$logDIR" exact="Main.$logDIR" />
                
                <do_for_each name="$idx" in="Main.$FleetRecords.{$RFMKey}.keys.list"  >
                    <set_value name="$fr" exact="Main.$FleetRecords.{$RFMKey}.{$idx}" />
                    
                    <set_value name="$loadout" exact="Main.$Loadouts.{$RFMKey}.{$idx}" />
                    
                    <!-- 
                    <set_value name="$loadout" exact="$fr.$sLoadout" />
                    -->
                    <set_value name="$slogF" exact="'RFM_' + $RFMKey + '_SHP_' + $idx " />
                    <set_value name="$slogD" exact="$logDIR" />
                    
                    <debug_to_file text="'RM Fleet_%s_  Ship_%s_ '.[$RFMKey, $idx]" name="$slogF" directory="$logDIR" append="false" chance="$DebugChance"/>
                    <debug_to_file text="' 0- loadout = %s '.[$loadout]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 1- Ship.name = %s '.[$fr.$name]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 2- Ship.type = %s'.[$fr.$type]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 3- Ship.macro = %s'.[$fr.$macro]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 4- commander idx = %s'.[@$fr.$commanderidx]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 5- Ship.assignment = %s'.[$fr.$assignment]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <debug_to_file text="' 6- Ship.subordinategroupid = %s ( %s )'.[$fr.$subordinategrouptext, $fr.$subordinategroupid]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>

                    <debug_to_file text="' 7- all Wares = %s'.[$fr.$tWare]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="$fr.$tWare"/>
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$slogF" />
                        <param name="debugFileDir" value="$logDIR" />
                        <param name="DebugChance" value="$DeepDebug" />
                    </run_actions>

                    <debug_to_file text="' 8- Pilot = %s'.[$fr.$tPilot]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="$fr.$tPilot" />
                        <param name="recursiondepth" value="2" />
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$slogF" />
                        <param name="debugFileDir" value="$logDIR" />
                        <param name="DebugChance" value="$DeepDebug" />
                    </run_actions>

                    <debug_to_file text="' 9- Peoples = %s'.[$fr.$tBulkCrew]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                    <run_actions ref="DebugPrintValue">
                        <param name="value" value="$fr.$tBulkCrew" />
                        <param name="recursiondepth" value="3" />
                        <param name="debugToFile" value="true" />
                        <param name="debugFileName" value="$slogF" />
                        <param name="debugFileDir" value="$logDIR" />
                        <param name="DebugChance" value="$DeepDebug" />
                    </run_actions>

                </do_for_each>
                
                <!-- 
                <debug_to_file text="' 9- Engines = %s'.[$DumpShipLoadout.{9}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{9}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="' 10- Weapons = %s'.[$DumpShipLoadout.{10}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{10}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'11- Shields = %s'.[$DumpShipLoadout.{11}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{11}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'12- Turrets = %s'.[$DumpShipLoadout.{12}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{12}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'13- CounterMeasures = %s'.[$DumpShipLoadout.{13}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{13}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'14- Missiles = %s'.[$DumpShipLoadout.{14}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{14}" />
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'15- Deployables = %s'.[$DumpShipLoadout.{15}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{15}"/>
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'16- Softwares = %s'.[$DumpShipLoadout.{16}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{16}"/>
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'17- Thruster = %s'.[$DumpShipLoadout.{17}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{17}"/>
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'18- Ammo = %s'.[$DumpShipLoadout.{18}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{18}"/>
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                <debug_to_file text="'19- Units = %s'.[$DumpShipLoadout.{19}]" name="$slogF" directory="$logDIR" chance="$DebugChance"/>
                <run_actions ref="DebugPrintValue">
                    <param name="value" value="$DumpShipLoadout.{19}"/>
                    <param name="debugToFile" value="true" />
                    <param name="debugFileName" value="$slogF" />
                    <param name="debugFileDir" value="$logDIR" />
                    <param name="DebugChance" value="$DeepDebug" />
                </run_actions>
                -->
                
            </actions>
        </library>

        <!--KULLANILMAYACAK :
            IN : text 
            OUT : aç kapa parantezler yerine default '' karakteri koyar, istenirse param la belirtilir
        -->
        <library name="TrimBrackets" purpose="run_actions" namespace="this">
            <params>
                <param name="text" />
                <param name="replacestring1" default="''" />
                <param name="replacestring2" default="''" />
            </params>
            <actions>
                <substitute_text text="$result" source="$text">
                    <replace string="'('" with="$replacestring1"/>
                    <replace string="')'" with="$replacestring2"/>
                    <replace string="'{'" with="$replacestring1"/>
                    <replace string="'}'" with="$replacestring2"/>
                    <replace string="'['" with="$replacestring1"/>
                    <replace string="']'" with="$replacestring2"/>
                    <replace string="'\''" with="''"/>
                    <replace string="'#'" with="''"/>
                    <replace string="'\033X'" with="''"/>
                    <replace string="'\033'" with="''"/>
                    <replace string="'/'" with="''"/>
                    <replace string="'\\'" with="''"/>
                </substitute_text>
                <return value="$result"/>
            </actions>
        </library>

        <!-- IN : value is a table or list value-->
        <!-- OUT : none, to debug -->
        <library name="DebugPrintValue" purpose="run_actions">
            <params>
                <param name="value" />
                <param name="recursiondepth" default="1" />
                <!-- Standart 2-->
                <param name="indent" default="''" />
                <param name="prefix" default="''" />
                <param name="postfix" default="''" />
                <param name="showindex" default="true" />
                <param name="debugToFile" default="false" />
                <param name="debugFileName" default="''" />
                <param name="debugFileDir" default="''" />
                <param name="DebugChance" default="100" />
                <param name="textindex" default="''"  comment="iç komut, dışardan parametre verme"/>
            </params>
            <actions>
                <do_if value="$recursiondepth" min="1">
                    <do_if value="typeof $value == datatype.table">
                        <do_if value="$value.keys.count">
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + $prefix + 'table['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + $prefix + 'table['" context="false" chance="$DebugChance"/>
                            </do_else>
                            <set_value name="$nextindent" exact="$indent + '  '" />
                            <do_for_each in="$value">
                                <run_actions ref="DebugPrintValue">
                                    <param name="recursiondepth" value="$recursiondepth - 1" />
                                    <param name="indent" value="$nextindent" />
                                    <param name="prefix" value="(if typeof loop.key == datatype.string then loop.key else '{' + loop.key + '}' ) + ' = '" />
                                    <param name="value" value="loop.value" />
                                    <param name="postfix" value="','" />
                                    <param name="showindex" value="$showindex" />
                                    <param name="debugToFile" value="$debugToFile" />
                                    <param name="debugFileName" value="$debugFileName" />
                                    <param name="debugFileDir" value="$debugFileDir" />
                                    <param name="DebugChance" value="$DebugChance" />
                                </run_actions>
                            </do_for_each>
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + ']' + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + ']' + $postfix" context="false" chance="$DebugChance"/>
                            </do_else>
                            <return />
                        </do_if>
                    </do_if>
                    <do_elseif value="typeof $value == datatype.list">
                        <do_if value="$value.count and ($value.count gt 1 or typeof $value.{1} == datatype.table or typeof $value.{1} == datatype.list)" comment="Skip recursion for trivial content">
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + $prefix + '['" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + $prefix + '['" context="false" chance="$DebugChance"/>
                            </do_else>
                            <set_value name="$nextindent" exact="$indent + '  '" />
                            <do_for_each in="$value">
                                <run_actions ref="DebugPrintValue">
                                    <param name="recursiondepth" value="$recursiondepth - 1" />
                                    <param name="indent" value="$nextindent" />
                                    <param name="value" value="loop.element" />
                                    <param name="showindex" value="$showindex" />
                                    <param name="textindex" value=" '[' + loop.index + ']=' " />
                                    <param name="postfix" value="if loop.index == $value.count then '' else ','" />
                                    <param name="debugToFile" value="$debugToFile" />
                                    <param name="debugFileName" value="$debugFileName" />
                                    <param name="debugFileDir" value="$debugFileDir" />
                                    <param name="DebugChance" value="$DebugChance" />
                                </run_actions>
                            </do_for_each>
                            <do_if value="$debugToFile">
                                <debug_to_file text="$indent + ']' + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                            </do_if>
                            <do_else>
                                <debug_text text="$indent + ']' + $postfix" context="false" chance="$DebugChance"/>
                            </do_else>
                            <return />
                        </do_if>
                    </do_elseif>
                    <!-- 
                    <do_else>
                        <debug_text text="$indent + $prefix + (if $showindex then $textindex else '') + (typeof $value) + $postfix" context="false" chance="$DebugChance"/>
                        <return />
                    </do_else>
                    -->
                </do_if>

                <do_if value="typeof $value == datatype.string  ">
                    <set_value name="$value" exact="'&quot;%s&quot;'.[$value]" />
                </do_if>

                <do_if value="$debugToFile">
                    <debug_to_file text="$indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" name="$debugFileName" directory="$debugFileDir" chance="$DebugChance"/>
                </do_if>
                <do_else>
                    <debug_text text="$indent + $prefix + (if $showindex then $textindex else '') + $value + $postfix" context="false" chance="$DebugChance"/>
                </do_else>
            </actions>
        </library>

    </cues>
</mdscript>